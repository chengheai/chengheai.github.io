{"meta":{"title":"CHI1130","subtitle":"业精于勤，荒于嬉；行成于思，毁于随","description":"javascript,react,angular,前端开发,nodejs,vuejs","author":"HEAI","url":"https://github.com/chengheai","root":"/"},"pages":[{"title":"文章分类","date":"2018-10-11T03:04:12.000Z","updated":"2021-10-09T08:48:32.098Z","comments":true,"path":"categories/index.html","permalink":"https://github.com/chengheai/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-10-11T02:23:15.000Z","updated":"2021-10-09T08:48:32.157Z","comments":false,"path":"tags/index.html","permalink":"https://github.com/chengheai/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"深入理解js中防抖跟截流的区别","slug":"深入理解js中防抖跟截流的区别","date":"2021-07-15T13:29:55.000Z","updated":"2021-10-09T08:48:32.094Z","comments":true,"path":"2021/07/15/深入理解js中防抖跟截流的区别/","link":"","permalink":"https://github.com/chengheai/2021/07/15/深入理解js中防抖跟截流的区别/","excerpt":"","text":"前言在日常项目开发中，通常会碰到监听处理的操作，比如监听浏览器窗口大小改变，监听滚动事件，监听输入事件等等，然而做这方面功能的时候就要想着怎么优化性能，防抖跟截流就派上用场了 防抖 触发高频事件后delay内函数只会执行一次，如果delay内高频事件再次被触发，则重新计算时间 实现方式：每次触发事件时设置一个延迟调用方法，并且取消之前的延时调用方法 缺点：如果事件在规定的时间间隔内被不断的触发，则调用方法会被不断的延迟 123456789101112131415161718192021//debouncefunction debounce(method, delay) &#123; let timer = null return function () &#123; let self = this if (timer) &#123; clearTimeout(timer) timer = null &#125; timer = setTimeout(function () &#123; method.apply(self, arguments) &#125;, delay) &#125;&#125;// 处理函数function handle() &#123; console.log(xxx);&#125;// 滚动事件window.addEventListener('scroll', debounce(handle,1000)); 节流 指在规定时间内只触发一次事件，减少事件执行的频率 实现方式：每次触发事件时，如果当前有等待执行的延时函数，则直接return 123456789101112function throttle(fn,delay) &#123; let canRun = true return function () &#123; let self = this if (!canRun) return canRun = false setTimeout(() =&gt; &#123; fn.apply(self, arguments) canRun = true &#125;, delay) &#125;&#125; 其他版本123456789101112131415161718192021222324// 时间戳function throttle1 (fn, delay) &#123; let prev = Date.now() return () =&gt; &#123; let now = Date.now() if (now - prev &gt;= delay) &#123; fn() prev = Date.now() &#125; &#125;&#125;// 定时器function throttle2 (fn, delay) &#123; let timer = null return () =&gt; &#123; if (!timer) &#123; timer = setTimeout(() =&gt; &#123; fn() timer = null &#125;, delay) &#125; &#125;&#125; demothrottle 截流debounce 防抖 总结一般情况下onresize，onkeyup事件使用防抖；onscroll、onmousemove等事件使用截流。","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://github.com/chengheai/tags/Javascript/"}]},{"title":"jenkins+docker+github+nginx前端实现自动化部署","slug":"jenkins-docker-github-nginx前端实现自动化部署","date":"2020-07-06T14:08:22.000Z","updated":"2021-10-09T08:48:32.070Z","comments":true,"path":"2020/07/06/jenkins-docker-github-nginx前端实现自动化部署/","link":"","permalink":"https://github.com/chengheai/2020/07/06/jenkins-docker-github-nginx前端实现自动化部署/","excerpt":"","text":"前言由于之前写过react+nodejs+mongodb的项目，只是在本地开发完成，想尝试正常开发部署上线流出走一波，然而在网上搜索一番，大部分都是写的基础东西，标题大内容小，有的甚至写到关键位置就没了，当然也有些是好文章，下面是我总结一些问题，踩过坑之后的流程 准备 虚拟机一台，市面上的有VirtualBox【mac】，VMware【windows】系统为linux，笔者为linux CentOS7.6Docker安装 1234567891011121314151617181920// 看你当前的内核版本uname -r// yum 包更新到最新yum update -y// 安装 dockeryum install docker// 启动并加入开机启动systemctl start dockersystemctl enable docker// 下载docker-composecurl -L https://github.com/docker/compose/releases/download/1.23.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose// 添加可执行权限(这里不懂可以看一下菜鸟教程-linux教程-文件权限)chmod +x /usr/local/bin/docker-compose// 查看docker-compose版本docker-compose --version Jenkins 安装与配置1docker search jenkins 选择第二个或者第三个，第一个有坑 安装jenkins1docker run -d -u 0 --privileged --name jenkins -p 8888:8080 -v /root/jenkins_home:/var/jenkins_home jenkins/jenkins 注意⚠️：本机需要在/root下创建一个jenkins_home文件夹【没有就加，有就要加】其中:-d 指的是在后台运行；-u 0 指的是传入 root 账号 ID，覆盖容器中内置的账号；-v /root/jenkins_home:/var/jenkins_home 指的是将 docker 容器内的目录 /var/jenkins_home 映射到宿主机 /root/jenkins_home 目录上；–name jenkins 指的是将 docker 容器内的目录 /var/jenkins_home 映射到宿主机 /root/jenkins_home 目录上；-p 49003:8080 指的是将容器的 8080 端口映射到宿主机的 8888 端口；–privileged 指的是赋予最高权限。 整条命令的意思就是：运行一个镜像为 jenkins/jenkins:latest 的容器，命名为 jenkins_home，使用 root 账号覆盖容器中的账号，赋予最高权限，将容器的 /var/jenkins_home 映射到宿主机的 /root/jenkins_home 目录下，映射容器中 8080 端口到宿主机 49003 端口 执行完成后，等待几十秒，等待 Jenkins 容器启动初始化。到浏览器中输入 http://your ip:49003 查看 Jenkins 是否启动成功 看到如下界面说明启动成功： 通过如下命令获取密码，复制到上图输入框中 进入到下个页面，选择【安装推荐的插件】。 由于墙的问题，需要修改 Jenkins 的默认下载地址。可以在浏览器另起一个 tab 页面，进入 http://your ip:49003/pluginManager/advanced，修改最下面的升级站点 URL 为 http://mirror.esuni.jp/jenkins/updates/update-center.json 然后重启容器，再次进入初始化页面，通常下载速度会加快。 然后就是创建管理员账号。 进入首页后，因为自动化部署中需要通过 ssh 登陆服务器执行命令以及 node 环境，所以需要下载 Publish Over SSH 和 NodeJS 插件，可通过系统管理 -&gt; 管理插件 -&gt; 可选插件进入，搜索选中并直接安装。如下图所示： 需要注意的是，Publish Over SSH 需要配置相关 ssh 服务器，通过系统管理 -&gt; 系统设置 进入并拉到最下面，输入 Name、Hostname、Username、Passphrase / Password 等参数。如下图所示： 然后点击 Test Configuration 校验能否登陆。 至此 Jenkins 已经完成了全局配置。 关联 Jenkins 和 Github在 GitHub 创建一个项目，以本项目为例，在项目根目录下创建 nginx.conf 和 docker-compose.yml 文件 nginx.conf12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#user nobody;worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; #log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' # '$status $body_bytes_sent \"$http_referer\" ' # '\"$http_user_agent\" \"$http_x_forwarded_for\"'; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server &#123; listen 10000; server_name 192.168.56.101; #charset koi8-r; #access_log logs/host.access.log main; location / &#123; index index.html index.htm; root /usr/share/nginx/html; # 所有静态资源均指向 /index.html try_files $uri $uri/ /index.html; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root /usr/share/nginx/html; &#125; # location /api &#123; # proxy_pass http://server:port; # &#125; # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \\.php$ &#123; # proxy_pass http://127.0.0.1; #&#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \\.php$ &#123; # root html; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; # include fastcgi_params; #&#125; # deny access to .htaccess files, if Apache's document root # concurs with nginx's one # #location ~ /\\.ht &#123; # deny all; #&#125; &#125;&#125; docker-compose.yml 123456789101112version: '3'services: ad-tpl-vue: #项目name container_name: 'webhtml' #容器名称 image: nginx restart: always ports: - 10000:10000 volumes: - ./nginx.conf:/etc/nginx/nginx.conf #挂载nginx配置 - ./dist:/usr/share/nginx/html/ #挂载项目 privileged: true 这里需要解释下 volumes 参数，在打包 Docker 镜像时，如果将 nginx.conf 和 dist 直接拷贝到镜像中，那么每次修改相关文件时，都需要重新打包新的镜像。通过 volumes 可以将宿主机的某个文件映射到容器的某个文件，那么改动相关文件，就不要重新打包镜像了，只需修改宿主机上的文件即可。 然后在 Jenkins 创建一个新的任务，选择【构建一个自由风格的软件项目】，并设置相关配置，如下图所示。 其中第三张图两部分命令含义如下： 第一部分 shell 命令是 build 前端项目，会在项目根目录下生成 dist 目录 12345echo $PATHnode -vnpm -vnpm installnpm run build 第二部分 shell 命令就是通过 ssh 登陆服务器，通过 docker-compose 进行构建 docker 镜像并运行容器。相较于直接使用 docker ，当更新代码时无需执行停止删除容器，重新构建新的镜像等操作。cd /root/jenkins_home/workspace/ad-tpl-vue \\&amp;&amp; docker-compose stop &amp;&amp; docker-compose up -d 最后可以回到该任务页，点击【立即构建】来构建我们的项目了。实现自动触发打包不过仍有个问题，那就是当向 GitHub 远程仓库 push 代码时，需要能够自动触发构建，相关操作如下。1.修改 Jenkins 安全策略 通过系统管理 -&gt; 全局安全配置 进入，并如下图操作 2.生成 Jenkins API Token 通过用户列表 -&gt; 点击管理员用户 -&gt; 设置，点击添加新 token，然后复制身份验证令牌 token 3.在 Jenkins 项目对应任务的设置中配置【构建触发器】，将刚复制的 token 粘贴进去，如下图所示： 4.在 Github 相关项目中打开 Setting -&gt; Webhooks -&gt; Add webhooks，输入格式如下的 URL :12// 前面是 Jenkins 服务地址，ad-tpl-vue 指在 Jenkins 的任务名称，Token指上面获取的令牌http://12x.xxx.xxx.xxx:xxxx/job/ad-tpl-vue/build?token=Token 这样，我们就实现了在 push 新的代码后，自动触发 Jenkins 打包项目代码，并打包 docker 镜像然后运行。","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"https://github.com/chengheai/tags/docker/"},{"name":"nginx","slug":"nginx","permalink":"https://github.com/chengheai/tags/nginx/"},{"name":"jenkins","slug":"jenkins","permalink":"https://github.com/chengheai/tags/jenkins/"}]},{"title":"el-date-picker daterange设置上下7天选择区间","slug":"daterange设置上下7天选择区间","date":"2020-06-11T06:18:25.000Z","updated":"2021-10-09T08:48:32.064Z","comments":true,"path":"2020/06/11/daterange设置上下7天选择区间/","link":"","permalink":"https://github.com/chengheai/2020/06/11/daterange设置上下7天选择区间/","excerpt":"","text":"需求时间选择区间想个不能超过 7 天 代码12345678910&lt;el-form-item label=\"搜索时间:\"&gt; &lt;el-date-picker v-model=\"form.rangeDate\" value-format=\"yyyy-MM-dd\" type=\"daterange\" :picker-options=\"pickerOptions\" clearable @change=\"handleFormChange\" /&gt;&lt;/el-form-item&gt; 12345678910111213141516171819202122data()&#123; let that = this // 关键 return &#123; pickerOptions: &#123; disabledDate(time) &#123; let timeOptionRange = that.timeOptionRange let secondNum = 60 * 60 * 24 * 7 * 1000 if (timeOptionRange) &#123; return time.getTime() &gt; timeOptionRange.getTime() + secondNum || time.getTime() &lt; timeOptionRange.getTime() - secondNum &#125; &#125;, onPick(time) &#123; // 当第一时间选中才设置禁用 if (time.minDate &amp;&amp; !time.maxDate) &#123; that.timeOptionRange = time.minDate &#125; if (time.maxDate) &#123; that.timeOptionRange = null &#125; &#125; &#125; &#125;&#125;","categories":[],"tags":[{"name":"element-ui","slug":"element-ui","permalink":"https://github.com/chengheai/tags/element-ui/"}]},{"title":"解决vue中移动端ios键盘收起页面不归位问题","slug":"解决vue中移动端ios键盘收起页面不归位问题","date":"2020-03-24T12:36:07.000Z","updated":"2021-10-09T08:48:32.097Z","comments":true,"path":"2020/03/24/解决vue中移动端ios键盘收起页面不归位问题/","link":"","permalink":"https://github.com/chengheai/2020/03/24/解决vue中移动端ios键盘收起页面不归位问题/","excerpt":"","text":"前言网上找的例子千篇一律～～～～～ 代码12345678910111213141516171819202122232425262728293031323334&lt;template&gt; &lt;div&gt; &lt;div @focusout=\"inputBlur\" @focusin=\"inputFocus\"&gt; &lt;input type=\"tel\" placeholder=\"请输入手机号\" /&gt; &lt;input type=\"number\" placeholder=\"请输入验证码\" /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; data() &#123; return &#123; timer: null, &#125;; &#125;, methods: &#123; inputBlur(e) &#123; if (e &amp;&amp; e.target &amp;&amp; e.target.tagName &amp;&amp; e.target.tagName.toLowerCase() === 'input') &#123; this.timer = setTimeout(() =&gt; &#123; window.scrollTo(0, 0); &#125;, 0); &#125; &#125;, inputFocus(e) &#123; if (e &amp;&amp; e.target &amp;&amp; e.target.tagName &amp;&amp; e.target.tagName.toLowerCase() === 'input') &#123; clearTimeout(this.timer); &#125; &#125;, &#125;, &#125;;&lt;/script&gt;&lt;style lang=\"scss\" scoped&gt;&lt;/style&gt;","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"https://github.com/chengheai/tags/vue/"}]},{"title":"el-time-picker自定义选择大于当前时间限制","slug":"el-time-picker自定义选择大于当前时间限制","date":"2020-03-11T13:02:59.000Z","updated":"2021-10-09T08:48:32.066Z","comments":true,"path":"2020/03/11/el-time-picker自定义选择大于当前时间限制/","link":"","permalink":"https://github.com/chengheai/2020/03/11/el-time-picker自定义选择大于当前时间限制/","excerpt":"","text":"问题something think DEMO在线 demo🎱🤓👀 代码1234567891011121314151617181920212223&lt;template&gt; &lt;el-form :model=\"ruleForm\" :rules=\"rules\" ref=\"ruleForm\" label-width=\"150px\" class=\"demo-ruleForm\" &gt; &lt;el-form-item label=\"大于当前时间\" prop=\"mytime\"&gt; &lt;el-date-picker type=\"datetime\" placeholder=\"选择日期\" value-format=\"timestamp\" :picker-options=\"pickerOptions\" v-model=\"ruleForm.mytime\" &gt;&lt;/el-date-picker&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-button type=\"primary\" @click=\"submitForm('ruleForm')\"&gt;立即创建&lt;/el-button&gt; &lt;el-button @click=\"resetForm('ruleForm')\"&gt;重置&lt;/el-button&gt; &lt;/el-form-item&gt; &lt;/el-form&gt;&lt;/template&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;script&gt; export default &#123; data() &#123; var validateTime = (rule, value, callback) =&gt; &#123; if (value &lt;= Date.now()) &#123; callback(new Error('选择时间必须大于当前时间')); &#125; else &#123; callback(); &#125; &#125;; return &#123; pickerOptions: &#123; // 限制收货时间不让选择今天以前的 disabledDate(time) &#123; return time.getTime() &lt; Date.now() - 8.64e7; &#125;, &#125;, ruleForm: &#123; mytime: '', &#125;, rules: &#123; mytime: [ &#123; required: true, message: '请选择时间', trigger: 'change' &#125;, &#123; validator: validateTime, trigger: 'blur' &#125;, ], &#125;, &#125;; &#125;, methods: &#123; submitForm(formName) &#123; this.$refs[formName].validate(valid =&gt; &#123; if (valid) &#123; alert('submit!'); &#125; else &#123; console.log('error submit!!'); return false; &#125; &#125;); &#125;, resetForm(formName) &#123; this.$refs[formName].resetFields(); &#125;, &#125;, &#125;;&lt;/script&gt;","categories":[],"tags":[{"name":"element-ui","slug":"element-ui","permalink":"https://github.com/chengheai/tags/element-ui/"}]},{"title":"原生js实现redux中getState,subscribe,listener,dispatch函数","slug":"原生js实现redux中getState-subscribe-listener-dispatch函数","date":"2020-03-01T12:05:52.000Z","updated":"2021-10-09T08:48:32.086Z","comments":true,"path":"2020/03/01/原生js实现redux中getState-subscribe-listener-dispatch函数/","link":"","permalink":"https://github.com/chengheai/2020/03/01/原生js实现redux中getState-subscribe-listener-dispatch函数/","excerpt":"","text":"原生代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;!-- 原生js实现dispatch 函数 --&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"title\"&gt;标题&lt;/div&gt; &lt;div id=\"content\"&gt;内容&lt;/div&gt; &lt;script&gt; var render = function(state) &#123; document.getElementById('title').innerHTML = state.title; document.getElementById('content').innerHTML = state.content; &#125;; // 自定义一个dispatch过程 var appReducer = function(state, action) &#123; // 返回默认的state if (!state) &#123; return &#123; title: '初始化title', content: '初始化content', &#125;; &#125; //返回相应的state switch (action.type) &#123; case 'CHANGE_TITLE': // state修改 return &#123; ...state, title: action.newTitle, &#125;; default: return state; &#125; &#125;; // 希望调用createStore就返回一个store // 纯函数 传入什么返回什么 var createStore = function(reducer) &#123; var state = null; // 监听者们 var listeners = []; var dispatch = function(action) &#123; // state = reducer(state, action); // reducer返回新的state listeners.forEach(listener =&gt; listener()); &#125;; dispatch(&#123;&#125;); getState = function() &#123; return state; &#125;; // 订阅 var subscribe = function(listener) &#123; listeners.push(listener); &#125;; return &#123; subscribe, dispatch, getState, &#125;; &#125;; // store 包含subscribe,dispatch,getState var store = createStore(appReducer); store.subscribe(function() &#123; render(store.getState()); &#125;); store.subscribe(function() &#123; console.log(store.getState()); &#125;); store.dispatch(&#123; type: 'CHANGE_TITLE', newTitle: 'this is new title', &#125;); render(store.getState()); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"redux","slug":"redux","permalink":"https://github.com/chengheai/tags/redux/"}]},{"title":"js原生方法实现react开发模式与组件化包装","slug":"js原生方法实现react开发模式与组件化包装","date":"2020-02-25T14:04:02.000Z","updated":"2021-10-09T08:48:32.072Z","comments":true,"path":"2020/02/25/js原生方法实现react开发模式与组件化包装/","link":"","permalink":"https://github.com/chengheai/2020/02/25/js原生方法实现react开发模式与组件化包装/","excerpt":"","text":"react 原生开发模式1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!-- 更加接近react的开发模式 --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"root\"&gt;&lt;/div&gt; &lt;script&gt; var root = document.getElementById('root'); // 状态 var state = &#123; like: false, &#125;; var setState = function(newState) &#123; state = &#123; ...state, ...newState, &#125;; render(); &#125;; // 渲染 var render = function() &#123; root.innerHTML = ` &lt;button type='button' style='color:$&#123;state.like ? 'red' : 'black'&#125;' onclick='handleClick()'&gt; $&#123;state.like ? '已赞' : '喜欢'&#125; &lt;/button&gt; `; &#125;; var handleClick = function() &#123; setState(&#123; like: !state.like, &#125;); &#125;; render(); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 组件化包装12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;!-- 组件化包装 --&gt; &lt;body&gt; &lt;div id=\"root\"&gt;&lt;/div&gt; &lt;script&gt; var root = document.getElementById('root'); // 提取setState方法 class Component &#123; setState(newState) &#123; this.state = &#123; ...this.state, ...newState, &#125;; &#125; &#125; // extends 继承组件Component的setState方法 + super() class Button extends Component &#123; constructor() &#123; super(); this.state = &#123; like: true, &#125;; this.render(); &#125; // setState(newState) &#123; // this.state = &#123; // ...this.state, // newState // &#125; // this.render() // &#125; render() &#123; const state = this.state; return ` &lt;button type='button' style='color:$&#123;state.like ? 'red' : 'black'&#125;'&gt; $&#123;state.like ? '已赞' : '喜欢'&#125; &lt;/button&gt; `; &#125; &#125; // extends 继承组件Component的setState方法 + super() class Title extends Component &#123; constructor() &#123; super(); this.state = &#123; text: '这是一个标题', &#125;; &#125; // setState(newState) &#123; // this.state = &#123; // ...this.state, // newState // &#125; // &#125; render() &#123; return `&lt;h1&gt;$&#123;this.state.text&#125;&lt;/h1&gt;`; &#125; &#125; // 组件复用 class Wrap &#123; constructor() &#123;&#125; render() &#123; return `Wrap $&#123;new Title().render()&#125; $&#123;new Button().render()&#125;`; &#125; &#125; root.innerHTML = new Wrap().render(); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"react","slug":"react","permalink":"https://github.com/chengheai/tags/react/"}]},{"title":"nodejs中常见的跨域处理","slug":"nodejs中常见的跨域处理","date":"2020-02-23T13:29:53.000Z","updated":"2021-10-09T08:48:32.074Z","comments":true,"path":"2020/02/23/nodejs中常见的跨域处理/","link":"","permalink":"https://github.com/chengheai/2020/02/23/nodejs中常见的跨域处理/","excerpt":"","text":"跨域问题ajax 同源策略 协议 主机(ip,域名) 端口号 协议，端口 cors header 头文件信息 jsonp 服务器 解决 🧍‍♀️ 协议，端口 将跨域的文件放入与服务器一样的文件下 cors 以 express 为例 123456const express = require('express');const cors = require('cors');...your codes......app.use(cors()); header 头文件信息 以 express 为例 12345678910const express = require('express');...your codes......app.all('*', function(req, res, next) &#123; res.header(\"Access-Control-Allow-Origin\", \"*\"); res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With,Content-Type\"); res.header(\"Access-Control-Allow-Methods\",\"PUT,POST,GET,DELETE,OPTIONS\"); next();&#125;); jsonp 123JSONP.getJSON('http://api.com', data, function(data) &#123; console.log(data);&#125;); 服务器 12345678910111213141516171819const express = require('express');const request = require('request');...your codes......// 本地api接口app.get('/cors', (req, res) =&gt; &#123; // 发送一个服务器请求 console.log('cors.html的ajax'); // 目标服务器，你想请求的服务器api request('http://www.google.com/xx/api/v1', (err, response, body) =&gt; &#123; console.log(body); if (!err) &#123; res.send(body); &#125; else &#123; console.log(err); &#125; &#125;);&#125;);","categories":[],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"https://github.com/chengheai/tags/nodejs/"},{"name":"跨域","slug":"跨域","permalink":"https://github.com/chengheai/tags/跨域/"}]},{"title":"小程序中优雅的获取手机号","slug":"小程序中优雅的获取手机号","date":"2020-01-08T13:33:09.000Z","updated":"2021-10-09T08:48:32.088Z","comments":true,"path":"2020/01/08/小程序中优雅的获取手机号/","link":"","permalink":"https://github.com/chengheai/2020/01/08/小程序中优雅的获取手机号/","excerpt":"","text":"前言最近在写小程序项目，有个获取手机号功能，网上荡了一下，虽不说是代码问题，有些文章都是残缺不全的，说到容易错误的区域又并未使用代码避免，说而不做的问题，索性自己结合网上的文章及官网文档写了一套完整的代码，完全开箱即用 🏄🏻‍♂️🏮🎹🐸 效果 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778//Page ObjectPage(&#123; data: &#123;&#125;, getPhoneNumber: function(e) &#123; let that = this; console.log('e', e); //-----------------是否授权，授权通过进入主页面，授权拒绝则停留在登录界面 if (e.detail.errMsg == 'getPhoneNumber:fail user deny') &#123; //用户点击拒绝 wx.showModal(&#123; content: '请输入手机号', showCancel: false, success(res) &#123; if (res.confirm) &#123; // your code ... &#125; &#125;, &#125;); &#125; else &#123; let phoneQuery = &#123; encryptedData: e.detail.encryptedData, iv: e.detail.iv, // other params... openid: wx.getStorageSync('openid'), &#125;; // 检查是session_key否过期 wx.checkSession(&#123; success() &#123; //session_key 未过期，并且在本生命周期一直有效 console.log('session_key 未过期，并且在本生命周期一直有效'); wx.request(&#123; url: 'https://xxx.com/api/v1/xx', method: 'POST', data: phoneQuery, success: function(res) &#123; // your code... &#125;, fail: function(err) &#123; // your code... &#125;, &#125;); &#125;, fail() &#123; that.myLogin(); // session_key 已经失效，需要重新执行登录流程 &#125;, &#125;); &#125; &#125;, // login myLogin() &#123; wx.login(&#123; success: res =&gt; &#123; //用code传给服务器调换session_key let query = &#123; code: res.code, &#125;; // my_login为wx.request(&#123;&#125;)封装 my_login(query).then(res =&gt; &#123; // other code... wx.setStorageSync('unionid', unionid); &#125;); &#125;, &#125;); &#125;, //options(Object) onLoad: function(options) &#123;&#125;, onReady: function() &#123;&#125;, onShow: function() &#123;&#125;, onHide: function() &#123;&#125;, onUnload: function() &#123;&#125;, onPullDownRefresh: function() &#123;&#125;, onReachBottom: function() &#123;&#125;, onShareAppMessage: function() &#123;&#125;, onPageScroll: function() &#123;&#125;, //item(index,pagePath,text) onTabItemTap: function(item) &#123;&#125;,&#125;);","categories":[],"tags":[{"name":"小程序","slug":"小程序","permalink":"https://github.com/chengheai/tags/小程序/"}]},{"title":"怎么使用docker运行nuxt项目","slug":"怎么使用docker运行nuxt项目","date":"2020-01-07T13:18:36.000Z","updated":"2021-10-09T08:48:32.091Z","comments":true,"path":"2020/01/07/怎么使用docker运行nuxt项目/","link":"","permalink":"https://github.com/chengheai/2020/01/07/怎么使用docker运行nuxt项目/","excerpt":"","text":"个人日常 DEMO1git clone git@github.com:chengheai/ssr-project.git 添加 Dockerfile12345678910111213touch Dockerfilevi DockerfileFROM node:8.11.0WORKDIR /optADD node_modules /opt/node_modulesADD server /opt/serverADD .nuxt /opt/.nuxtADD static /opt/staticADD nuxt.config.js /optADD package.json /optEXPOSE 3000CMD [\"npm\", \"run\", \"start\"] ~FROM node:8.11.0：该 image 文件继承官方的 node image，冒号表示标签，这里标签是 8.11.0，即 8.11.0 版本的 node。~ADD . /opt：将当前目录文件下的所有文件（除了.dockerignore 排除的路径），都拷贝进入 image 文件的/opt 目录。~WORKDIR /opt：指定接下来的工作路径为/opt。~RUN npm install 或者 ADD node_modules：在/opt 目录下，运行 npm install 命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。~EXPOSE 3000: 3000 端口暴露出来， 允许外部连接这个端口。 添加.dockerignore12345touch .dockerignorevi .dockerignore .git # node_modules npm-debug.log build1234docker image build -t ssr-project.# 或者docker image build -t ssr-project:0.0.1 .# 最后面的空格和点不要漏 start12345$ docker run -d --name ssr-server -p 3000:3000 test-ssrssr-server: 容器名称test-ssr: 镜像关闭$ docker stop ssr-server 123456789101112131415okcer image ls // 查看 imagedocker image build -t ssr-project. // 常见imagedocker rmi [containerID] // 删除指定镜像docker run -it --rm -p 3000:3000 ssr-project // docker container run命令会从 image 文件生成容器。--rm参数，在容器终止运行后自动删除容器文件docker ps // 列出本机正在运行的容器docker ps -a // 列出本机所有容器，包括终止运行的容器docker container ls // 列出本机正在运行的容器docker container ls --all // 列出本机所有容器，包括终止运行的容器docker container rm [containerID] // 删除指定容器docker container kill [containerID] // 终止容器运行，相当于向容器里面的主进程发出 SIGKILL 信号docker container stop [containerID] // 终止容器运行，相当于向容器里面的主进程发出 SIGTERM 信号，然后过一段时间再发出 SIGKILL 信号docker container start [containerID] // 启动已经生成、已经停止运行的容器docker container logs [containerID] // 用来查看 docker 容器的输出，即容器里面 Shell 的标准输出docker container exec -it [containerID] /bin/bash // 用于进入一个正在运行的 docker 容器 进入容器就可以在容器的 Shell 执行命令了docker container cp [containID]:[/path/to/file] . // 用于从正在运行的 Docker 容器里面，将文件拷贝到本机 附录docker 常用指令说明","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"https://github.com/chengheai/tags/docker/"}]},{"title":"一个优秀的Stack Engineer该有的姿态","slug":"Engineer该有的姿态","date":"2019-12-06T13:40:51.000Z","updated":"2021-10-09T08:48:32.056Z","comments":true,"path":"2019/12/06/Engineer该有的姿态/","link":"","permalink":"https://github.com/chengheai/2019/12/06/Engineer该有的姿态/","excerpt":"","text":"程序员,一个在外人看来是高薪、前途无量的工作,但又有多少人清楚,有多少程序员是用自己的身心健康换来的这一看似华丽的褒赞。好吧,生活总是继续向前的,有问题就要积极地去解决,更何况是关乎自身的身心健康问题,如果一味的抱怨只会将自己推向另一个深渊。 以下建议,大家可以参考一下: 1、要学会走开 一般来说程序员大多有定力、做事有条理。我们不愿意承认失败,当不顺时我们也不愿走开。但当你已在一个问题上花费了太长时间的时候,最好的选择是走开,清醒头脑。出去走两步看看风景呼吸新鲜空气,等你平静下来(不再急躁)再回到办公桌上,效率会事半功倍。 2、在家少编程 工作一天了,回到家,继续打开电脑开启 eclipse 进行编程,我想这是很多程序员都喜欢干的事情。但是我的建议是,既然回家了,那就把代码放一边,做做饭,做做家务 ,然后看会电视,最好阅读点书籍。至于代码,可以等到明天。 3、少叫外卖,中午出去吃 很多程序员中午习惯叫外卖,别人都去吃饭了,他还在那里继续编码,直至外卖送来,然后在电脑面前完成这顿仓促的午餐,这是一件多么悲催的事情。我的建议是,中午出去吃,但要吃的健康,KFC 和麦当劳就不要了,你的健康本来就比人差了,再吃这个就说不过去了。 4、非技术的兴趣爱好 你不能只对电脑、对代码感兴趣,我们是一个社会人,应该具备社会人所应有的社交活动。你的兴趣要广泛,看书、看电影、喝茶、唱歌等,如果能有几项自己喜欢的体育锻炼项目,那就更完美了。程序员要有健康的生活方式,代码只是你生活中很小的一面而已。 5、休假 当工作上的一切都变得很不顺的时候,不要担心使用你的假期——它将使你彻底远离无法承受的工作。你不必去国外度假也不必旅行,如果你愿意待在家里也没关系。休假的关键是不工作。 6、学会借力 在专业的平台上找你需要的 SDK 或 API,而不是直接百度,例如 devstore,测评和对比做的都是很到位的,这些东西都可以根据自己的需求运用到自己的项目里,这样会节省你很多时间。","categories":[],"tags":[]},{"title":"解决iOS12及一下弹框滚动会带动body内容滑动","slug":"解决iOS12及一下弹框滚动会带动body内容滑动","date":"2019-11-20T13:32:55.000Z","updated":"2021-10-09T08:48:32.096Z","comments":true,"path":"2019/11/20/解决iOS12及一下弹框滚动会带动body内容滑动/","link":"","permalink":"https://github.com/chengheai/2019/11/20/解决iOS12及一下弹框滚动会带动body内容滑动/","excerpt":"","text":"前言在移动项目开发中往往会写一些 H5 页面，一个项目可能只有一两个页面，引入其他 UI 组件项目显得太臃肿，也没有啥必要，毕竟那些组件都是被人写的，有的时候不能一味的去使用他人写好的代码，有时间也需要自己谢谢，锻炼自己的同时也在巩固一些基础知识～～ 插件【 NPM 】v-scroll-lock这个插件虽然很好，但是在华为手机 📱 上却不起作用，而且还有不好的效果【亲测 🍄🐷🐸🦋】【在线测试】 问题一个页面弹出一个框，框里的内容可以滚动，但是滚动弹框时，body 内容也在动 【前提是你的 body 超过屏幕的高度】，然而在 iOS13 ，安卓手机没有问题，但是在 iOS12 及以下就会出现这个问题，通过代码 document.body.style.overflow = &quot;hidden&quot;;，并不管用，原因是：在苹果 🧬 手机上就不存在这个属性，在它看来，我的页面有内容就该给客户全部展示出来，为什么要 hidden 呢 🍌，这个方法行不通时，我们准备给它添加另外一个属性document.body.style.position = &quot;fixed&quot;;,发现可以正常，但是感觉怪怪的，因为 fixed 的 top 为 0 问题总结～弹窗时给 body 设置 overflow:hidden；（ios 不理你）～弹窗时给 body 设置 position:fixed；(滚动位置会丢失) 代码123456789101112131415161718watch: &#123; dialogStatus: function(news, olds) &#123; if (news) &#123; document.body.style.overflow = \"hidden\"; let scrollTop = document.body.scrollTop || document.documentElement.scrollTop; document.body.style.cssText += \"position:fixed;width:100%;top:-\" + scrollTop + \"px;\"; &#125; else &#123; document.body.style.overflow = \"\"; document.body.style.position = \"static\"; let top = document.body.style.top; document.body.scrollTop = document.documentElement.scrollTop = -parseInt( top ); &#125; &#125;,&#125;","categories":[],"tags":[{"name":"小技巧","slug":"小技巧","permalink":"https://github.com/chengheai/tags/小技巧/"}]},{"title":"vue中实现图片上传添加自定义水印并下载","slug":"vue中实现图片上传添加自定义水印并下载","date":"2019-11-20T13:27:28.000Z","updated":"2021-10-09T08:48:32.080Z","comments":true,"path":"2019/11/20/vue中实现图片上传添加自定义水印并下载/","link":"","permalink":"https://github.com/chengheai/2019/11/20/vue中实现图片上传添加自定义水印并下载/","excerpt":"","text":"前言最近看了一篇用 Angular4+ 写的添加水印功能，觉得挺好玩，就自己试着用 vue 写一个相同功能 效果 LIVE☀️🇱🇷🏮 在线例子 🌰🌪☃️❄️ 代码✈️✈️✈️✈️✈️✈️ 直达完整代码 🚅✈️🛫🛬🛸🚀 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;div class=\"wrap\"&gt; &lt;div class=\"optea\"&gt; &lt;div class=\"file-upload\"&gt; &lt;p&gt;选择图片&lt;/p&gt; &lt;el-button type=\"text\" style=\"color: #c00;\" &gt;&lt;label for=\"uploads\"&gt; &lt;i class=\"el-icon-upload2\" style=\"margin-right: 5px;\"&gt;&lt;/i&gt; 选择需要添加水印的图片&lt;/label &gt;&lt;/el-button &gt; &lt;input type=\"file\" id=\"uploads\" hidden accept=\"image/png, image/jpeg, image/gif, image/jpg\" @change=\"uploadImg($event, 1)\" /&gt; &lt;/div&gt; &lt;p&gt;水印文字&lt;/p&gt; &lt;el-input v-model=\"watermarkOptions.text\" placeholder=\"请输入水印内容\"&gt;&lt;/el-input&gt; &lt;p&gt;字体颜色&lt;/p&gt; &lt;el-color-picker v-model=\"watermarkOptions.color\"&gt;&lt;/el-color-picker&gt; &lt;p&gt;旋转角度&lt;/p&gt; &lt;el-slider v-model=\"watermarkOptions.rotate\" :min=\"0\" :max=\"360\"&gt;&lt;/el-slider&gt; &lt;p&gt;透明度&lt;/p&gt; &lt;el-slider v-model=\"watermarkOptions.alpha\" :min=\"0\" :max=\"100\"&gt;&lt;/el-slider&gt; &lt;p&gt;文本间距&lt;/p&gt; &lt;el-slider v-model=\"watermarkOptions.width\" :min=\"0\" :max=\"100\"&gt;&lt;/el-slider&gt; &lt;p&gt;字体大小&lt;/p&gt; &lt;el-slider v-model=\"watermarkOptions.fontSize\" :min=\"0\" :step=\"0.5\" :max=\"50\"&gt;&lt;/el-slider&gt; &lt;/div&gt; &lt;div&gt; &lt;el-button @click=\"handleDown\" class=\"download-btn\" type=\"primary\" plain icon=\"el-icon-download\" &gt;下载水印图片&lt;/el-button &gt; &lt;div class=\"preview\" ref=\"previewImg\"&gt; &lt;img :src=\"preImg || defaultimg\" alt=\"\" /&gt; &lt;div class=\"watermark\" :style=\"&#123; background: paint &#125;\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990export default &#123; data() &#123; return &#123; defaultimg, preImg: '', watermarkOptions: &#123; text: '仅供 xxx 验证使用', fontSize: 10, width: 5, color: '#000000', alpha: 35, rotate: 35, &#125;, &#125;; &#125;, methods: &#123; uploadImg(e, num) &#123; //上传图片 // this.option.img var file = e.target.files[0]; if (!/\\.(gif|jpg|jpeg|png|bmp|GIF|JPG|PNG)$/.test(e.target.value)) &#123; alert('图片类型必须是.gif,jpeg,jpg,png,bmp中的一种'); return false; &#125; var reader = new FileReader(); reader.onload = e =&gt; &#123; let data; if (typeof e.target.result === 'object') &#123; // 把Array Buffer转化为blob 如果是base64不需要 data = window.URL.createObjectURL(new Blob([e.target.result])); &#125; else &#123; data = e.target.result; &#125; if (num === 1) &#123; this.preImg = data; &#125; &#125;; // 转化为base64 reader.readAsDataURL(file); // 转化为blob // reader.readAsArrayBuffer(file) &#125;, handleDown() &#123; let node = this.$refs.previewImg; let that = this; DomToImage.toPng(node) .then(function(dataUrl) &#123; var oLink = document.createElement('a'); oLink.download = '水印图片.png'; oLink.href = dataUrl; oLink.click(); that.$nextTick(() =&gt; &#123; that.$message.success('水印图片下载成功'); &#125;); &#125;) .catch(function(error) &#123; console.error('oops, something went wrong!', error); that.$message.error('下载失败'); &#125;); &#125;, &#125;, computed: &#123; paint() &#123; // 文字长度 const wordWidth = this.watermarkOptions.fontSize * this.watermarkOptions.text.split('').length; const width = wordWidth + this.watermarkOptions.width; let svgText = ` &lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"$&#123;width&#125;px\" height=\"$&#123;width&#125;px\"&gt; &lt;text x=\"50%\" y=\"50%\" alignment-baseline=\"middle\" text-anchor=\"middle\" stroke=\"$&#123;this.watermarkOptions.color&#125;\" opacity=\"$&#123;this.watermarkOptions.alpha / 100&#125;\" transform=\"translate($&#123;width / 2&#125;, $&#123;width / 2&#125;) rotate($&#123; this.watermarkOptions.rotate &#125;) translate(-$&#123;width / 2&#125;, -$&#123;width / 2&#125;)\" font-weight=\"100\" font-size=\"$&#123;this.watermarkOptions.fontSize&#125;\" font-family=\"microsoft yahe\" &gt; $&#123;this.watermarkOptions.text&#125; &lt;/text&gt; &lt;/svg&gt;`; return `url(data:image/svg+xml;base64,$&#123;btoa(unescape(encodeURIComponent(svgText)))&#125;)`; &#125;, &#125;,&#125;;","categories":[],"tags":[{"name":"水印","slug":"水印","permalink":"https://github.com/chengheai/tags/水印/"}]},{"title":"多个el-select共用一个options且一个option只能用一次","slug":"多个el-select共用一个options且一个option只能用一次","date":"2019-10-21T14:01:16.000Z","updated":"2021-10-09T08:48:32.087Z","comments":true,"path":"2019/10/21/多个el-select共用一个options且一个option只能用一次/","link":"","permalink":"https://github.com/chengheai/2019/10/21/多个el-select共用一个options且一个option只能用一次/","excerpt":"","text":"需求一个表单多个下拉框，假如 options 里有中国，美国，第一个 select 选择里中国那么第二个 select 的 options 中国就置为灰色，反之我第二个选里中国，第一个 options 中中国就置为灰色 效果 DEMO在线 demo ⛩⛽️🚁✈️📡💈🧧🏮 代码12345678910111213141516171819202122232425262728&lt;template&gt; &lt;div&gt; &lt;el-form :model=\"ruleForm\" ref=\"ruleForm\" label-width=\"100px\" class=\"demo-ruleForm\"&gt; &lt;div v-for=\"(item, index) in ruleForm.list\" :key=\"index\"&gt; &lt;el-select v-model=\"item.type\" clearable @change=\"selectChange(item.type,index)\" placeholder=\"请选择\" &gt; &lt;el-option v-for=\"(item,optionIndex) in options\" :key=\"optionIndex\" :label=\"item.label\" :disabled=\"getDisable(item.value)\" :value=\"item.value\" &gt;&lt;/el-option&gt; &lt;/el-select&gt; &lt;i v-if=\"index === 0 &amp;&amp; ruleForm.list[0].type !== '' &amp;&amp; ruleForm.list.length&lt;2\" class=\"el-icon-circle-plus-outline ico\" @click=\"add\" &gt;&lt;/i&gt; &lt;i v-if=\"index !==0\" class=\"el-icon-remove-outline ico\" @click=\"del(index)\"&gt;&lt;/i&gt; &lt;/div&gt; &lt;/el-form&gt; &lt;/div&gt;&lt;/template&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475&lt;script&gt;/* eslint-disable */// 添加数组自定义事件 用来删除数组中的某一项Array.prototype.indexOf = function(val) &#123; for (var i = 0; i &lt; this.length; i++) &#123; if (this[i] == val) &#123; return i; &#125; &#125; return -1;&#125;;Array.prototype.remove = function(val) &#123; var index = this.indexOf(val); if (index &gt; -1) &#123; this.splice(index, 1); &#125;&#125;;export default &#123; data() &#123; return &#123; ruleForm: &#123; list: [ &#123; type: '', &#125;, ], &#125;, options: [ &#123; label: '中国', value: 1, &#125;, &#123; label: '美国', value: 2, &#125;, ], selectedOptions: [], &#125;; &#125;, methods: &#123; selectChange(value, index) &#123; console.log(arguments); console.log(value, index); this.selectedOptions[index] = value; &#125;, getDisable(value) &#123; if (this.selectedOptions.indexOf(value) &gt;= 0) &#123; return true; &#125; else &#123; return false; &#125; &#125;, add() &#123; this.ruleForm.list.push(&#123; type: '', &#125;); &#125;, del(index) &#123; // 删除时恢复可选 if (this.ruleForm.list[index] || this.ruleForm.list[index] == 0) &#123; this.selectedOptions.remove(this.ruleForm.list[index].type); &#125; console.log(this.selectedOptions); this.ruleForm.list.splice(index, 1); &#125;, &#125;,&#125;;&lt;/script&gt;&lt;style lang=\"css\" scoped&gt;.ico &#123; font-size: 40px;&#125;&lt;/style&gt;","categories":[],"tags":[{"name":"element-ui","slug":"element-ui","permalink":"https://github.com/chengheai/tags/element-ui/"}]},{"title":"git分支上删除某次提交与获取其他分支上某个提交","slug":"git分支上删除某次提交","date":"2019-10-15T14:10:02.000Z","updated":"2021-10-09T08:48:32.067Z","comments":true,"path":"2019/10/15/git分支上删除某次提交/","link":"","permalink":"https://github.com/chengheai/2019/10/15/git分支上删除某次提交/","excerpt":"","text":"前言～在日常开发中，常常会碰到这样的问题，我们在dev分支上写好的代码，经过严格的测试确认无误没有问题，打包发不到正式环境上去了，后来产品经理说这个功能不是本期上的，但是正式服已经有了，那怎么弄呢？ 例子例如，现在当前分支上代码有三次提交，我想把其中间一次提交去掉，怎么做？步骤： 1git log // 查看log信息记下commitId 1git rebase -i commitId // [上一次提交的commitId] 1vim i[插入] // 将需要修改的commit的 pick改为drop 1esc wq // 退出插入模式，保存退出 1git status // 状态查看 1git push origin branch -f // 提交并覆盖远程 附加📎当前分支拉取其他分支某次提交代码 [git cherry-pick commitID] 1git cherry-pick commitID 属于复制的操作，对源分支不影响～","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://github.com/chengheai/tags/git/"}]},{"title":"Linux执行history命令显示命令执行时间","slug":"Linux执行history命令显示命令执行时间","date":"2019-09-17T13:42:43.000Z","updated":"2021-10-09T08:48:32.057Z","comments":true,"path":"2019/09/17/Linux执行history命令显示命令执行时间/","link":"","permalink":"https://github.com/chengheai/2019/09/17/Linux执行history命令显示命令执行时间/","excerpt":"","text":"附录在线快速生成JSON对象api【MYJSON】(http://myjson.com/1g17dp) 前言在实际项目开发中，往往碰到这样一种情况，我明明没有敲这个指令啊，怎么代码被覆盖了？怎么回事？👺用history命令查看 ： 这时间也没有也不知道是谁敲的名字，这可咋办？ 效果 实现过程在你的命令行中贱【键】入1echo 'export HISTTIMEFORMAT=\"%Y-%m-%d %H:%M:%S `whoami` \"'&gt;&gt;/etc/profile 然后再输入1source /etc/profile OK，完了！！","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://github.com/chengheai/tags/linux/"}]},{"title":"在Linux服务器上Nginx部署vue静态项目","slug":"在Linux服务器上部署vue静态项目","date":"2019-09-11T13:56:37.000Z","updated":"2021-10-09T08:48:32.087Z","comments":true,"path":"2019/09/11/在Linux服务器上部署vue静态项目/","link":"","permalink":"https://github.com/chengheai/2019/09/11/在Linux服务器上部署vue静态项目/","excerpt":"","text":"前言最近看了看nginx，觉得挺好玩，刚好自己有一个VPN测试服务器，就自己敲了一遍，部署一个vue-cli初始化项目～另外给大家推荐一个免费试玩的服务器腾讯云☁️实验室,每天有大约6个小时的时间可以使用，两个ubuntu，一个ubuntu是3小时3 + 3 = 6 安装nginx安装～命令行输入1wget http://nginx.org/download/nginx-1.12.2.tar.gz 12345678910# 安装依赖yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel# 解压缩tar -zxvf linux-nginx-1.12.2.tar.gzcd nginx-1.12.2/# 执行配置./configure# 编译安装(默认安装在/usr/local/nginx)makemake install 一顿闪烁之后你将发现你的/usr/local下多了个nginx文件夹验证信息：nginx主配置文件：/usr/local/nginx/conf/nginx.confnginx日志文件：/usr/local/nginx/logs/access.log启动Nginx：/usr/local/nginx/sbin/nginx 然后直接访问ip地址，比如\\：http://192.168.1.1/\\，如果能看到如下Nginx主页说明安装成功了 上传部署文件window机器可以使用winscp上传mac的话可以使用lrzsz这个使用mac执行命令 1234# 打包tar zcvf dist.tar.gz dist/# 解压tar zxvf dist.tar.gz 在根目录下新建nginx文件夹12mkdir ~/nginxcp -rf dist ./../vue 运行下面这段话可以nginx的配置文件1234$ sudo /usr/local/nginx/sbin/nginx -t# 下面这行代码说明 nginx 的配置文件是 /usr/local/nginx/conf/nginx.confnginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is oknginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful 配置nginx 修改完毕，保存退出。运行以下命令来重启 Nginx，让配置生效：sudo /usr/local/nginx/sbin/nginx -s reload刚开始因为没有配置权限，访问会出现403 Forbidden错误123sudo chmod 755 ~sudo chmod 755 ~/nginxsudo chmod 755 ~/nginx/vue 最后，你能看到下面的页面","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://github.com/chengheai/tags/linux/"},{"name":"vue","slug":"vue","permalink":"https://github.com/chengheai/tags/vue/"},{"name":"部署","slug":"部署","permalink":"https://github.com/chengheai/tags/部署/"}]},{"title":"解决vscode中js文件提示typescript语法报错","slug":"解决vscode中js文件提示typescript语法报错","date":"2019-09-11T13:45:33.000Z","updated":"2021-10-09T08:48:32.096Z","comments":true,"path":"2019/09/11/解决vscode中js文件提示typescript语法报错/","link":"","permalink":"https://github.com/chengheai/2019/09/11/解决vscode中js文件提示typescript语法报错/","excerpt":"","text":"前言最近在vue项目中，全局安装了一下typescript，再看看vue项目代码就有一大堆ts提示错误然后网上一搜也没啥好答案～例如：❌❌解决办法：在设置里面加上 “javascript.validate.enable”: false 禁用默认的 js 验证这样禁用那我js写错了都不知道。。。 正解～设置中搜索tsconfig -&gt;Check JS Experimental Decorators 去掉勾选☑️🐳","categories":[],"tags":[{"name":"vscode","slug":"vscode","permalink":"https://github.com/chengheai/tags/vscode/"}]},{"title":"Axios无法在Safari浏览器及微信中打开","slug":"Axios无法在Safari浏览器及微信中打开","date":"2019-09-09T13:31:05.000Z","updated":"2021-10-09T08:48:32.049Z","comments":true,"path":"2019/09/09/Axios无法在Safari浏览器及微信中打开/","link":"","permalink":"https://github.com/chengheai/2019/09/09/Axios无法在Safari浏览器及微信中打开/","excerpt":"","text":"前言最近在项目开发中碰到这样一个问题，刚登录完用 axios 调订单列表接口时，总是提示 token 过期失效。仔细想想，刚登录的返回的 token 都没存在 window.document.cookie 中，怎么会过期呢。经过沿路抽丝剥茧，debugger，打印出来的 token 依然是最新的返回，这使得我不禁陷入了沉思 🧕🏿👳🏿‍♂️，为啥？ 正常代码123456789101112131415161718192021// listgetList() &#123; this.$axios .get(url, &#123; headers: &#123; token: 'xxx' &#125;, withCredentials: true, params: &#123; page: this.page, per_page: 6, others: 'xxx' &#125; &#125;) .then(res =&gt; &#123; console.log('res: ', res); &#125;) .catch(err =&gt; &#123; console.log('err: ', err); &#125;);&#125;, 这代码看起来没啥问题啊，为啥在safari浏览器就不行了呢？于是。。 方法修改后的代码[方法一]123456789101112131415161718192021// listgetList() &#123; this.$axios .get(`$&#123;url&#125;?nocache=$&#123;new Date().getTime()&#125;`, &#123; headers: &#123; token: 'xxx' &#125;, withCredentials: true, params: &#123; page: this.page, per_page: 6, others: 'xxx' &#125; &#125;) .then(res =&gt; &#123; console.log('res: ', res); &#125;) .catch(err =&gt; &#123; console.log('err: ', err); &#125;);&#125;, 修改后的代码[方法二]1234567891011121314151617181920212223// listgetList() &#123; this.$axios .get(url, &#123; headers: &#123; token: 'xxx', Pragma: no-cache, // 注释1 'Cache-control': no-cache // 注释2 &#125;, withCredentials: true, params: &#123; page: this.page, per_page: 6, others: 'xxx' &#125; &#125;) .then(res =&gt; &#123; console.log('res: ', res); &#125;) .catch(err =&gt; &#123; console.log('err: ', err); &#125;);&#125;, 这样一来的话就给接口添加了一个参数，而且这参数与上一次的又不一样，所以就不会存在缓存这一说了。 问题【缘】由～据说是某些浏览器请求接口的时候，参数未变，浏览器不会发起新的请求，就用旧的数据去请求，而请求头headers存放在cookie里；故而没有更新cookie里的token。～【注释1】Pragma 是一个在 HTTP/1.0 中规定的通用首部，这个首部的效果依赖于不同的实现，所以在“请求-响应”链中可能会有不同的效果。它用来向后兼容只支持 HTTP/1.0 协议的缓存服务器，那时候 HTTP/1.1 协议中的 Cache-Control 还没有出来。～【注释2】Cache-Control 通用消息头字段，被用于在http请求和响应中，通过指定指令来实现缓存机制。缓存指令是单向的，这意味着在请求中设置的指令，不一定被包含在响应中。~总的来说是换的原因。相信还有别的方法可以解决这个问题 相关文档Headers/PragmaHeaders/Cache-Control","categories":[],"tags":[{"name":"axios","slug":"axios","permalink":"https://github.com/chengheai/tags/axios/"},{"name":"小技巧","slug":"小技巧","permalink":"https://github.com/chengheai/tags/小技巧/"}]},{"title":"vue中audio实现微信语音播放动画","slug":"vue中audio实现微信语音播放动画","date":"2019-09-09T12:58:24.000Z","updated":"2021-10-09T08:48:32.080Z","comments":true,"path":"2019/09/09/vue中audio实现微信语音播放动画/","link":"","permalink":"https://github.com/chengheai/2019/09/09/vue中audio实现微信语音播放动画/","excerpt":"","text":"预览 思路拿到时长做倒计时，时长 = （ 时长 + 1 ） * 100; destroy的时候清除一下 代码123456789101112131415161718&lt;div style=\"display:none\"&gt; &lt;audio controls=\"controls\" ref=\"audio\"&gt; &lt;source :src=\"url || ''\" type=\"audio/mpeg\" /&gt; &lt;/audio&gt;&lt;/div&gt;&lt;div class=\"voice-bg\" @click=\"handlePlay\"&gt; &lt;img v-if=\"isPlaying\" src=\"./../../assets/images/goods/voice-play.gif\" alt=\"\" /&gt; &lt;img v-else src=\"./../../assets/images/goods/voice.png\" alt=\"\" /&gt; &lt;span&gt;&#123;&#123; duration || 0 &#125;&#125;\"&lt;/span&gt;&lt;/div&gt; 123456789101112131415161718192021222324252627282930313233data() &#123; return &#123; url: '', timer: null, isPlaying: false, currentTime: 0, &#125;&#125;,methods:&#123; handlePlay() &#123; let audio = this.$refs.audio; if (!this.isPlaying) &#123; audio.play(); this.isPlaying = true; this.watchEnd(); &#125; else &#123; audio.pause(); clearTimeout(this.timer); this.isPlaying = false; audio.currentTime = 0; &#125; &#125;, watchEnd() &#123; let that = this; this.timer = setTimeout(() =&gt; &#123; that.isPlaying = false; &#125;, (that.duration + 1) * 1000); &#125;,&#125;,beforeDestroy() &#123; clearTimeout(this.timer);&#125; 资料关于获取audio信息接口七牛云🐂🐃🐕🐄1234this.$axios.get(`$&#123;this.info.url&#125;?avinfo`).then(res =&gt; &#123; let &#123; streams &#125; = res.data; this.duration = parseInt((streams &amp;&amp; streams[0].duration) || 0);&#125;); UI图片下载地址isPlaying gifisPause png","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"https://github.com/chengheai/tags/vue/"}]},{"title":"vue中audio动态绑定src不能播放","slug":"vue中audio动态绑定src不能播放","date":"2019-09-05T12:55:50.000Z","updated":"2021-10-09T08:48:32.079Z","comments":true,"path":"2019/09/05/vue中audio动态绑定src不能播放/","link":"","permalink":"https://github.com/chengheai/2019/09/05/vue中audio动态绑定src不能播放/","excerpt":"","text":"前言略去。。。 代码123&lt;audio id=\"audio\" controls&gt; &lt;source :src=\"audUrl || '../assets/alarm.ogg'\" type=\"audio/ogg\" /&gt;&lt;/audio&gt; 问题发现问题绑定的时候,发现并不管用12345let audio = document.querySelector('#audio')axios.get() .then(res =&gt; &#123; this.audUrl = res.data.xxx &#125;) 解决问题思路～打印res.data.xxx是有值的。那为啥不生效呢？【 排除接口问题 】～审查html audio元素，src属性是不是我们想要的返回值 【 排除页面属性挂载问题 】～重新写一个audio标签写在页面上，引入接口返回的url地址 【 排除接口返回资源是否正确及audio标签是否正常 】。。。。。 解决代码改为123&lt;audio ref='audio' controls&gt; &lt;source :src=\"audUrl || '../assets/alarm.ogg'\" type=\"audio/ogg\" /&gt;&lt;/audio&gt; 绑定的时候1this.$refs.audio.src = res.data.xxx 下一节，Vue中实现微信语音播放暂停功能传送门","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"https://github.com/chengheai/tags/vue/"}]},{"title":"css常见的规范标准","slug":"css常见的规范标准","date":"2019-09-04T12:44:13.000Z","updated":"2021-10-09T08:48:32.064Z","comments":true,"path":"2019/09/04/css常见的规范标准/","link":"","permalink":"https://github.com/chengheai/2019/09/04/css常见的规范标准/","excerpt":"","text":"前言你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。很多时候起名字都很随意，但也想起个正常点的名字，有标准例子吗？ 附带MarkDown快速生成表格 统一语义理解和命名布局（.g-） 语义 命名 简写 文档 doc doc 头部 head hd 主体 body bd 尾部 foot ft 主栏 main mn 主栏子容器 mainc mnc 侧栏 side sd 侧栏子容器 sidec sdc 盒容器 wrap/box wrap/box 模块（.m-）、元件（.u-） 语义 命名 简写 导航 nav nav 子导航 subnav snav 面包屑 crumb crm 菜单 menu menu 选项卡 tab tab 标题区 head/title hd/tt 内容区 body/content bd/ct 列表 list lst 表格 table tb 表单 form fm 热点 hot hot 排行 top top 登录 login log 标志 logo logo 广告 advertise ad 搜索 search sch 幻灯 slide sld 提示 tips tips 帮助 help help 新闻 news news 下载 download dld 注册 regist reg 投票 vote vote 版权 copyright cprt 结果 result rst 标题 title tt 按钮 button btn 输入 input ipt 功能（.f-） 语义 命名 简写 浮动清除 clearboth cb 向左浮动 floatleft fl 向右浮动 floatright fr 内联块级 inlineblock ib 文本居中 textaligncenter tac 文本居右 textalignright tar 文本居左 textalignleft tal 垂直居中 verticalalignmiddle vam 溢出隐藏 overflowhidden oh 完全消失 displaynone dn 字体大小 fontsize fs 字体粗细 fontweight fw 皮肤（.s-） 语义 命名 简写 浮动清除 clearboth cb 向左浮动 floatleft fl 向右浮动 floatright fr 字体颜色 fontcolor fc 背景 background bg 背景颜色 backgroundcolor bgc 背景图片 backgroundimage bgi 背景定位 backgroundposition bgp 边框颜色 bordercolor bdc 状态（.z-） 语义 命名 简写 选中 selected sel 当前 current crt 显示 show show 隐藏 hide hide 打开 open open 关闭 close close 出错 error err 不可用 disabled dis 边框颜色 bordercolor bdc 规则使用类选择器，放弃 ID 选择器ID 在一个页面中的唯一性导致了如果以 ID 为选择器来写 CSS，就无法重用。 NEC 特殊字符：”-“连字符“-“在本规范中并不表示连字符的含义。 她只表示两种含义：分类前缀分隔符、扩展分隔符，详见以下具体规则。 分类的命名方法：使用单个字母+”-“为前缀布局（grid）（.g-）；模块（module）（.m-）；元件（unit）（.u-）；功能（function）（.f-）；皮肤（skin）（.s-）；状态（.z-）。 对以上的解释详情参见：分类方法中的“CSS 内部的分类及其顺序”。 注：在你样式中的选择器总是要以上面前五类开头，然后在里面使用后代选择器。 如果这五类不能满足你的需求，你可以另外定义一个或多个大类，但必须符合单个字母+”-“为前缀的命名规则，即 .x- 的格式。 特殊：.j-将被专用于 JS 获取节点，请勿使用.j-定义样式。 后代选择器命名约定不以单个字母+”-“为前缀且长度大于等于 2 的类选择器为后代选择器，如：.item 为 m-list 模块里的每一个项，.text 为 m-list 模块里的文本部分：.m-list .item{}.m-list .text{}。一个语义化的标签也可以是后代选择器，比如：.m-list li{}。不允许单个字母的类选择器出现，原因详见下面的“模块和元件的后代选择器的扩展类”。通过使用后代选择器的方法，你不需要考虑他的命名是否已被使用，因为他只在当前模块或元件中生效，同样的样式名可以在不同的模块或元件中重复使用，互不干扰；在多人协作或者分模块协作的时候效果尤为明显！ 后代选择器不需要完整表现结构树层级，尽量能短则短。 注：后代选择器不要在页面布局中使用，因为污染的可能性较大； 12345678910111213141516171819202122/* 这里的.itm和.cnt只在.m-list中有效 */.m-list &#123; margin: 0; padding: 0;&#125;.m-list .itm &#123; margin: 1px; padding: 1px;&#125;.m-list .cnt &#123; margin-left: 100px;&#125;/* 这里的.cnt和.num只在.m-page中有效 */.m-page &#123; height: 20px;&#125;.m-page .cnt &#123; text-align: center;&#125;.m-page .num &#123; border: 1px solid #ddd;&#125; 命名应简约而不失语义12345678910/* 反对：表现化的或没有语义的命名 */.m-abc .green2 &#123;&#125;.g-left2 &#123;&#125;/* 推荐：使用有语义的简短的命名 */.m-list .wrap2 &#123;&#125;.g-side2 &#123;&#125; 相同语义的不同类命名方法：直接加数字或字母区分即可（如：.m-list、.m-list2、.m-list3 等，都是列表模块，但是是完全不一样的模块）。 其他举例：.f-fw0、.f-fw1、.s-fc0、.s-fc1、.m-logo2、.m-logo3、u-btn、u-btn2 等等。 模块和元件的扩展类的命名方法当 A、B、C、…它们类型相同且外形相似区别不大，那么就以它们中出现率最高的做成基类，其他做成基类的扩展。 方法：+“-”+数字或字母（如：.m-list 的扩展类为.m-list-1、.m-list-2 等）。 补充：基类自身可以独立使用（如：class=”m-list”即可），扩展类必须基于基类使用（如：class=”m-list m-list-2”）。 如果你的扩展类是表示不同状态，那么你可以这样命名：u-btn-dis，u-btn-hov，m-box-sel，m-box-hov 等等，然后像这样使用：class=”u-btn u-btn-dis”。 如果你的网站可以不兼容 IE6 等浏览器，那么你标识状态的方法也可以采取独立状态分类（.z-）方法：.u-btn.z-dis，.m-box.z-sel，然后像这样使用：class=”u-btn z-dis”。 模块和元件的后代选择器的扩展类有时候模块内会有些类似的东西，如果你没有把它们做成元件和扩展，那么也可以使用后代选择器和扩展。 后代选择器：.m-login .btn{}。 后代选择器扩展：.m-login .btn-1{}，.m-login .btn-dis{}。 同样也可以采取独立状态分类（.z-）方法：.m-login .btn.z-dis{}，然后像这样使用：class=”btn z-dis”。 注：此方法用于类选择器，直接使用标签做为选择器的则不需要使用此命名方法。 注：为防止后代选择器的扩展类和大类命名规范冲突，后代选择器不允许使用单个字母。 比如：.m-list .a{}是不允许的，因为当这个.a 需要扩展的时候就会变成.a-bb，这样就和大类的命名规范冲突。 分组选择器有时可以代替扩展方法有时候虽然两个同类型的模块很相似，但是你希望他们之间不要有依赖关系，也就是说你不希望使用扩展的方法，那么你可以通过合并选择器来设置共性的样式。 使用本方法的前提是：相同类型、功能和外观都相似，写在同一片代码区域方便维护。 123456789101112131415161718/* 两个元件共性的样式 */.u-tip1,.u-tip2 &#123;&#125;.u-tip1 .itm,.u-tip2 .itm &#123;&#125;/* 在分别是两个元件各自的样式 *//* tip1 */.u-tip1 &#123;&#125;.u-tip1 .itm &#123;&#125;/* tip2 */.u-tip2 &#123;&#125;.u-tip2 .itm &#123;&#125; 防止污染和被污染当模块或元件之间互相嵌套，且使用了相同的标签选择器或其他后代选择器，那么里面的选择器就会被外面相同的选择器所影响。 所以，如果你的模块或元件可能嵌套或被嵌套于其他模块或元件，那么要慎用标签选择器，必要时采用类选择器，并注意命名方式，可以采用.m-layer .layerxxx、.m-list2 .list2xxx 的形式来降低后代选择器的污染性。 实践最佳选择器写法12345678910111213141516171819202122232425262728293031323334353637383940/* 这是某个模块 */.m-nav &#123;&#125; /* 模块容器 */.m-nav li,.m-nav a &#123;&#125; /* 先共性 优化组合 */.m-nav li &#123;&#125; /* 后个性 语义化标签选择器 */.m-nav a &#123;&#125; /* 后个性中的共性 按结构顺序 */.m-nav a.a1 &#123;&#125; /* 后个性中的个性 */.m-nav a.a2 &#123;&#125; /* 后个性中的个性 */.m-nav .z-crt a &#123;&#125; /* 交互状态变化 */.m-nav .z-crt a.a1 &#123;&#125;.m-nav .z-crt a.a2 &#123;&#125;.m-nav .btn &#123;&#125; /* 典型后代选择器 */.m-nav .btn-1 &#123;&#125; /* 典型后代选择器扩展 */.m-nav .btn-dis &#123;&#125; /* 典型后代选择器扩展（状态） */.m-nav .btn.z-dis &#123;&#125; /* 作用同上，请二选一（如果可以不兼容IE6时使用） */.m-nav .m-sch &#123;&#125; /* 控制内部其他模块位置 */.m-nav .u-sel &#123;&#125; /* 控制内部其他元件位置 */.m-nav-1 &#123;&#125; /* 模块扩展 */.m-nav-1 li &#123;&#125;.m-nav-dis &#123;&#125; /* 模块扩展（状态） */.m-nav.z-dis &#123;&#125; /* 作用同上，请二选一（如果可以不兼容IE6时使用） */","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://github.com/chengheai/tags/css/"}]},{"title":"vue-ssr服务端渲染添加多个swiper","slug":"服务端渲染添加多个swiper","date":"2019-08-27T12:51:48.000Z","updated":"2021-10-09T08:48:32.093Z","comments":true,"path":"2019/08/27/服务端渲染添加多个swiper/","link":"","permalink":"https://github.com/chengheai/2019/08/27/服务端渲染添加多个swiper/","excerpt":"","text":"问题一个ssr项目添加多个swiper会引起轮播图混乱。 前言在使用nuxt.js实际开发项目中，会出现类似这样的情况，一个页面写两个【PC端一个，移动端一个】或者多个【其他需求】，在官方github有关服务端渲染的文档少之又少，只有一个简单的使用demo,且与vue-cli项目使用还有点差别，那怎么解决？ 单个使用1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;template&gt; &lt;div v-swiper:mySwiper=\"swiperOption\"&gt; &lt;div class=\"swiper-wrapper\"&gt; &lt;div class=\"swiper-slide\" v-for=\"banner in banners\"&gt; &lt;img :src=\"banner\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"swiper-pagination swiper-pagination-bullets\"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; data () &#123; return &#123; banners: [ '/1.jpg', '/2.jpg', '/3.jpg' ], swiperOption: &#123; loop: true, slidesPerView: 'auto', centeredSlides: true, spaceBetween: 30, pagination: &#123; el: '.swiper-pagination', dynamicBullets: true &#125;, on: &#123; slideChange() &#123; console.log('onSlideChangeEnd', this); &#125;, tap() &#123; console.log('onTap', this); &#125; &#125; &#125; &#125; &#125;, mounted() &#123; console.log('app init', this) setTimeout(() =&gt; &#123; this.banners.push('/5.jpg') console.log('banners update') &#125;, 3000) console.log( 'This is current swiper instance object', this.mySwiper, 'I will slideTo banners 3') this.mySwiper.slideTo(3) &#125; &#125;&lt;/script&gt; 多个使用1234567891011121314151617181920212223242526272829303132333435363738&lt;template&gt; &lt;div v-swiper:mySwiper=\"swiperOption\" key='1'&gt; &lt;div class=\"swiper-wrapper\"&gt; &lt;div class=\"swiper-slide\" v-for=\"banner in banners\"&gt; &lt;img :src=\"banner\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"swiper-pagination swiper-pagination-bullets\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div v-swiper:mySwiper=\"swiperOption\" key='2'&gt; &lt;div class=\"swiper-wrapper\"&gt; &lt;div class=\"swiper-slide\" v-for=\"banner in banners\"&gt; &lt;img :src=\"banner\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"swiper-pagination swiper-pagination-bullets\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div v-swiper:mySwiper=\"swiperOption\" key='3'&gt; &lt;div class=\"swiper-wrapper\"&gt; &lt;div class=\"swiper-slide\" v-for=\"banner in banners\"&gt; &lt;img :src=\"banner\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"swiper-pagination swiper-pagination-bullets\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div v-swiper:mySwiper=\"swiperOption\" key='N'&gt; &lt;div class=\"swiper-wrapper\"&gt; &lt;div class=\"swiper-slide\" v-for=\"banner in banners\"&gt; &lt;img :src=\"banner\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"swiper-pagination swiper-pagination-bullets\"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;// your codes.....&lt;/script&gt; 这样一来就不会有重复的mySwiper，从而解决了多个swiper混乱的问题","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"https://github.com/chengheai/tags/vue/"},{"name":"SSR","slug":"SSR","permalink":"https://github.com/chengheai/tags/SSR/"}]},{"title":"git常用指令大全","slug":"git常用指令大全","date":"2019-08-20T14:05:20.000Z","updated":"2021-10-09T08:48:32.067Z","comments":true,"path":"2019/08/20/git常用指令大全/","link":"","permalink":"https://github.com/chengheai/2019/08/20/git常用指令大全/","excerpt":"","text":"查看、添加、提交、删除、找回，重置修改文件123456789101112131415161718git help &lt;command&gt; # 显示command的helpgit show # 显示某次提交的内容 git show $idgit co -- &lt;file&gt; # 抛弃工作区修改git co . # 抛弃工作区修改git add &lt;file&gt; # 将工作文件修改提交到本地暂存区git add . # 将所有修改过的工作文件提交暂存区git rm &lt;file&gt; # 从版本库中删除文件git rm &lt;file&gt; --cached # 从版本库中删除文件，但不删除文件git reset &lt;file&gt; # 从暂存区恢复到工作文件git reset -- . # 从暂存区恢复到工作文件git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改git ci &lt;file&gt; git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做 git ci -am \"some comments\"git ci --amend # 修改最后一次提交记录git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象git revert HEAD # 恢复最后一次提交的状态tigMac上可以使用tig代替diff和log，brew install tigGit 本地分支管理 查看、切换、创建和删除分支1234567891011121314151617181920212223242526git br -r # 查看远程分支git br &lt;new_branch&gt; # 创建新的分支git br -v # 查看各个分支最后提交信息git br --merged # 查看已经被合并到当前分支的分支git br --no-merged # 查看尚未被合并到当前分支的分支git co &lt;branch&gt; # 切换到某个分支git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去git co -b &lt;new_branch&gt; &lt;branch&gt; # 基于branch创建新的new_branchgit co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除git co $id -b &lt;new_branch&gt; # 把某次历史提交记录checkout出来，创建成一个分支git br -d &lt;branch&gt; # 删除某个分支git br -D &lt;branch&gt; # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)git remote -v # 查看远程服务器地址和仓库名称git remote show origin # 查看远程服务器仓库状态git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm &lt;repository&gt; # 删除远程仓库git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址git push -u origin master # 客户端首次提交git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且trackgit remote set-head origin master # 设置远程仓库的HEAD指向master分支也可以命令设置跟踪远程库和本地库git branch --set-upstream master origin/mastergit branch --set-upstream develop origin/develop 查看文件diff123456git diff &lt;file&gt; # 比较当前文件和暂存区文件差异 git diffgit diff &lt;id1&gt;&lt;id1&gt;&lt;id2&gt; # 比较两次提交之间的差异git diff &lt;branch1&gt;..&lt;branch2&gt; # 在两个分支之间比较git diff --staged # 比较暂存区和版本库差异git diff --cached # 比较暂存区和版本库差异git diff --stat # 仅仅比较统计信息 查看提交记录1234git log git log &lt;file&gt; # 查看该文件每次提交记录git log -p &lt;file&gt; # 查看每次详细修改内容的diffgit log -p -2 # 查看最近两次详细修改内容的diffgit log --stat #查看提交统计信息 分支合并和rebase123git merge &lt;branch&gt; # 将branch分支合并到当前分支git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交git rebase master &lt;branch&gt; # 将master rebase到branch，相当于： git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt; 暂存管理1234git stash # 暂存git stash list # 列所有stashgit stash apply # 恢复暂存的内容git stash drop # 删除暂存区","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://github.com/chengheai/tags/git/"}]},{"title":"vue-quill-editor富文本内容在页面中样式丢失","slug":"vue-quill-editor富文本内容在页面中样式丢失","date":"2019-08-20T13:47:11.000Z","updated":"2021-10-09T08:48:32.077Z","comments":true,"path":"2019/08/20/vue-quill-editor富文本内容在页面中样式丢失/","link":"","permalink":"https://github.com/chengheai/2019/08/20/vue-quill-editor富文本内容在页面中样式丢失/","excerpt":"","text":"现象用富文本的情况有很多，例如在后台管理系统排版好的富文本页面，准备在移动端页面去显示，或者在官网显示，两个项目不在一起，在管理系统排好的样式在显示页面显示的一塌糊涂，为啥呢？大多数情况是样式没有引入。 解决给容器增加一个class ql-editor，才能正常显示，另外前面是主题类名，不同的主题显示不同的样式123&lt;link href=\"http://cdn.quilljs.com/1.3.4/quill.snow.css\" rel=\"stylesheet\"&gt;&lt;link href=\"http://cdn.quilljs.com/1.3.4/quill.bubble.css\" rel=\"stylesheet\"&gt;&lt;link href=\"http://cdn.quilljs.com/1.3.4/quill.core.css\" rel=\"stylesheet\"&gt; 我这边是snow，那么前缀就是ql-snow1&lt;div class=\"ql-snow ql-editor\" v-html=\"report.foreword\"&gt;&lt;/div&gt; 关于图片上传之后无法提交，报413错误 [ Request Entity Too Large ],解决方法将图片上传到七牛云","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"https://github.com/chengheai/tags/vue/"},{"name":"富文本","slug":"富文本","permalink":"https://github.com/chengheai/tags/富文本/"}]},{"title":"vue-quill-editor富文本编辑器实现图片插入七牛云上传","slug":"vue-quill-editor富文本编辑器实现图片插入七牛云上传","date":"2019-08-15T14:23:26.000Z","updated":"2021-10-09T08:48:32.078Z","comments":true,"path":"2019/08/15/vue-quill-editor富文本编辑器实现图片插入七牛云上传/","link":"","permalink":"https://github.com/chengheai/2019/08/15/vue-quill-editor富文本编辑器实现图片插入七牛云上传/","excerpt":"","text":"前言vue-quill-editor是我们再使用vue框架的时候常用的一个富文本编辑器，在进行富文本编辑的时候，我们往往要插入一些图片，vue-quill-editor默认的处理方式是直接将图片转成base64编码，这样的结果是整个富文本的html片段十分冗余，通常来讲，每个服务器端接收的post的数据大小都是有限制的，这样的话有可能导致提交失败，数据要传递很久才全部传送到服务器。因此，在富文本编辑的过程中，对于图片的处理，我们更合理的做法是将图片上传到服务器，再将图片链接插入到富文本中。 代码template12345678910111213141516171819202122232425&lt;template&gt; &lt;div&gt; &lt;!-- 图片上传组件辅助--&gt; &lt;el-upload class=\"avatar-uploader\" :action=\"serverUrl\" name=\"img\" :headers=\"header\" :show-file-list=\"false\" :on-success=\"uploadSuccess\" :on-error=\"uploadError\" :before-upload=\"beforeUpload\" &gt;&lt;/el-upload&gt; &lt;!--富文本编辑器组件--&gt; &lt;el-row v-loading=\"quillUpdateImg\"&gt; &lt;quill-editor v-model=\"detailContent\" ref=\"myQuillEditor\" :options=\"editorOption\" @change=\"onEditorChange($event)\" @ready=\"onEditorReady($event)\" &gt;&lt;/quill-editor&gt; &lt;/el-row&gt; &lt;/div&gt;&lt;/template&gt; script123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687// 工具栏配置const toolbarOptions = [ ['bold', 'italic', 'underline', 'strike'], // toggled buttons ['blockquote', 'code-block'], [&#123; header: 1 &#125;, &#123; header: 2 &#125;], // custom button values [&#123; list: 'ordered' &#125;, &#123; list: 'bullet' &#125;], [&#123; script: 'sub' &#125;, &#123; script: 'super' &#125;], // superscript/subscript [&#123; indent: '-1' &#125;, &#123; indent: '+1' &#125;], // outdent/indent [&#123; direction: 'rtl' &#125;], // text direction [&#123; size: ['small', false, 'large', 'huge'] &#125;], // custom dropdown [&#123; header: [1, 2, 3, 4, 5, 6, false] &#125;], [&#123; color: [] &#125;, &#123; background: [] &#125;], // dropdown with defaults from theme [&#123; font: [] &#125;], [&#123; align: [] &#125;], ['link', 'image', 'video'], ['clean'], // remove formatting button];export default &#123; data() &#123; return &#123; serverUrl: '', // 这里写你要上传的图片服务器地址 header: &#123; token: sessionStorage.token &#125;, // 有的图片服务器要求请求头需要有token之类的参数，写在这里 detailContent: '', // 富文本内容 editorOption: &#123; placeholder: '', theme: 'snow', // or 'bubble' modules: &#123; toolbar: &#123; container: toolbarOptions, // 工具栏 handlers: &#123; image: function(value) &#123; if (value) &#123; document.querySelector('#quill-upload input').click(); &#125; else &#123; this.quill.format('image', false); &#125; &#125;, &#125;, &#125;, &#125;, &#125;, &#125;; &#125;, methods: &#123; // 富文本图片上传前 beforeUpload() &#123; // 显示loading动画 this.quillUpdateImg = true; &#125;, uploadSuccess(res, file) &#123; // res为图片服务器返回的数据 // 获取富文本组件实例 let quill = this.$refs.myQuillEditor.quill; // 如果上传成功 if (res.status === 200) &#123; // 获取光标所在位置 let length = quill.getSelection().index; // 插入图片 res.info为服务器返回的图片地址 quill.insertEmbed(length, 'image', res.info); // 调整光标到最后 quill.setSelection(length + 1); &#125; else &#123; this.$message.error('图片插入失败'); &#125; // loading动画消失 this.quillUpdateImg = false; &#125;, // 富文本图片上传失败 uploadError() &#123; // loading动画消失 this.quillUpdateImg = false; this.$message.error('图片插入失败'); &#125;, onEditorReady(quill) &#123; console.log('editor ready!', quill); &#125;, onEditorChange(&#123; quill, html, text &#125;) &#123; console.log('editor change!', quill, html, text); this.detailContent = html; &#125;, &#125;,&#125;;","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"https://github.com/chengheai/tags/vue/"},{"name":"富文本","slug":"富文本","permalink":"https://github.com/chengheai/tags/富文本/"}]},{"title":"微信支付当前页面的URL未注册问题[单页面]","slug":"微信支付当前页面的URL未注册问题-单页面","date":"2019-08-13T13:22:06.000Z","updated":"2021-10-09T08:48:32.090Z","comments":true,"path":"2019/08/13/微信支付当前页面的URL未注册问题-单页面/","link":"","permalink":"https://github.com/chengheai/2019/08/13/微信支付当前页面的URL未注册问题-单页面/","excerpt":"","text":"前言微信支付时，当调用微信支付的时候，微信会判断当前页面和微信公众号后台设置的支付授权目录是否一致，他会把页面最后一次刷新的url作为判断依据（如果用户刷新了任何页面，这个页面就是支付页面），这个时候，单页应用的路由中‘#’后面的内容也会被传递过去，在微信的判断流程里，这个url和设置的目录是不匹配的，因为涉及到多个页面都会发起支付请求，所有设置多个带页面参数的url是不合理的，所以这里在‘#’前面添加了‘?’，让微信忽略‘?’后面的内容。 设置支付目录支付根目录1http://www.paytest.com/app/ 支付页面12345http://www.paytest.com/app/#/pay1http://www.paytest.com/app/#/pay2http://www.paytest.com/app/#/pay3 解决方式当我在’#’前面添加’?’,这个时候微信会把’?’后面的内容当做参数而vue可以识别’?#’,这样既可以避免出现出现提示当前页面url未注册的错误在视图加载后，修改url（这样不会触发页面重新加载，其他框架也可做类似处理） 解决代码12345mounted() &#123; if (window.location.href.indexOf(\"?#\") &lt; 0) &#123; window.location.href = window.location.href.replace(\"#\", \"?#\"); &#125;&#125;","categories":[],"tags":[{"name":"微信支付","slug":"微信支付","permalink":"https://github.com/chengheai/tags/微信支付/"}]},{"title":"vue自定义抽屉组件","slug":"vue自定义抽屉组件","date":"2019-08-08T13:05:40.000Z","updated":"2021-10-09T08:48:32.081Z","comments":true,"path":"2019/08/08/vue自定义抽屉组件/","link":"","permalink":"https://github.com/chengheai/2019/08/08/vue自定义抽屉组件/","excerpt":"","text":"前说在项目开发中，有很多时候由于某某原因，很多UI组件不能被用，像移动端一个小的H5页面，引入一个大的antd-mobile显然也不合理，所以就有了很多形形色色的自定义组件了。 效果 LIVEdemo 代码drawer.vue123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173&lt;template&gt; &lt;div class=\"drawer\"&gt; &lt;div :class=\"maskClass\" @click=\"closeByMask\"&gt;&lt;/div&gt; &lt;div :class=\"mainClass\" :style=\"mainStyle\" class=\"main\"&gt; &lt;div class=\"drawer-head\"&gt; &lt;span&gt;&#123;&#123; title &#125;&#125;&lt;/span&gt; &lt;span v-show=\"closable\" class=\"close-btn\" @click=\"closeByButton\" &gt;x&lt;/span&gt; &lt;/div&gt; &lt;div class=\"drawer-body\" :style=\"bodyStyle\"&gt; &lt;slot /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; props: &#123; // 是否打开 display: &#123; type: Boolean &#125;, // 标题 title: &#123; type: String, default: \"标题\" &#125;, // 是否显示关闭按钮 closable: &#123; type: Boolean, default: true &#125;, // 是否显示遮罩 mask: &#123; type: Boolean, default: true &#125;, // 是否点击遮罩关闭 maskClosable: &#123; type: Boolean, default: true &#125;, // 宽度 width: &#123; type: String, default: \"400px\" &#125;, // 高度 height: &#123; type: String, default: \"75%\" &#125;, // 是否在父级元素中打开 inner: &#123; type: Boolean, default: false &#125; &#125;, computed: &#123; maskClass: function() &#123; return &#123; \"mask-show\": this.mask &amp;&amp; this.display, \"mask-hide\": !(this.mask &amp;&amp; this.display), inner: this.inner &#125;; &#125;, mainClass: function() &#123; return &#123; \"main-show\": this.display, \"main-hide\": !this.display, inner: this.inner &#125;; &#125;, mainStyle: function() &#123; return &#123; width: this.width, height: this.height, bottom: this.display ? \"0\" : `-$&#123;this.height&#125;`, borderTop: this.mask ? \"none\" : \"1px solid #eee\" &#125;; &#125;, bodyStyle: function() &#123; return &#123; height: this.height &#125;; &#125; &#125;, mounted() &#123; if (this.inner) &#123; let box = this.$el.parentNode; box.style.position = \"relative\"; &#125; &#125;, methods: &#123; closeByMask() &#123; this.maskClosable &amp;&amp; this.$emit(\"update:display\", false); &#125;, closeByButton() &#123; this.$emit(\"update:display\", false); &#125; &#125;&#125;;&lt;/script&gt;&lt;style lang=\"less\" scoped&gt;.drawer &#123; .mask-show &#123; position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 10; background-color: rgba(0, 0, 0, 0.5); opacity: 1; transition: opacity 0.5s; &#125; .mask-hide &#123; opacity: 0; transition: opacity 0.5s; &#125; .main &#123; position: fixed; z-index: 10; bottom: 0; height: 100%; border-top-left-radius: 10px; border-top-right-radius: 10px; background: #f7f7f7; transition: all 0.5s; &#125; .main-show &#123; opacity: 1; &#125; .main-hide &#123; opacity: 0; &#125; .inner &#123; position: absolute; &#125; .drawer-head &#123; display: flex; justify-content: space-between; align-items: center; height: 50px; padding: 20px; box-sizing: border-box; border-top-left-radius: 10px; border-top-right-radius: 10px; font-size: 16px; font-weight: bold; background: #fff; position: relative; border-bottom: 1px solid #eee; .close-btn &#123; font-size: 24px; position: absolute; right: 20px; top: 50%; transform: translateY(-50%); display: inline-block; cursor: pointer; &#125; &#125; .drawer-body &#123; // padding: 20px; font-size: 14px; overflow: auto; &#125;&#125;&lt;/style&gt; index.vue引用1234567891011121314151617181920212223242526&lt;template&gt; &lt;div&gt; &lt;el-button type=\"primary\" @click=\"display = !display\"&gt;&#123;&#123;display?'close': 'open'&#125;&#125;&lt;/el-button&gt; &lt;drawer title=\"我是标题\" :display.sync=\"display\" :width=\"drawerWidth\" :height=\"drawerHeight\"&gt; &lt;div&gt;123&lt;/div&gt; &lt;/drawer&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import drawer from './../pages/drawer';export default &#123; components: &#123; drawer &#125;, data() &#123; return &#123; activeName: '1', display: true, drawerWidth: '100%', drawerHeight: '500px', &#125;; &#125;,&#125;;&lt;/script&gt;&lt;style&gt;&lt;/style&gt;","categories":[],"tags":[{"name":"小技巧","slug":"小技巧","permalink":"https://github.com/chengheai/tags/小技巧/"},{"name":"vue","slug":"vue","permalink":"https://github.com/chengheai/tags/vue/"}]},{"title":"原生js实现点击复制文本","slug":"原生js实现点击复制文本","date":"2019-08-05T12:54:12.000Z","updated":"2021-10-09T08:48:32.087Z","comments":true,"path":"2019/08/05/原生js实现点击复制文本/","link":"","permalink":"https://github.com/chengheai/2019/08/05/原生js实现点击复制文本/","excerpt":"","text":"参考文档queryCommandStateclipboardDataqueryCommandSupportedexecCommand 预览demo 代码12345678910111213141516171819202122handleCopy(text) &#123; if (window.clipboardData &amp;&amp; window.clipboardData.setData) &#123; return window.clipboardData.setData('Text', text); &#125; else if (document.queryCommandSupported &amp;&amp; document.queryCommandSupported('copy')) &#123; const textarea = document.createElement('textarea'); textarea.textContent = text; textarea.style.position = 'fixed'; textarea.style.bottom = '0'; textarea.style.zIndex = '99999'; document.body.appendChild(textarea); textarea.select(); try &#123; return document.execCommand('copy'); &#125; catch (ex) &#123; // eslint-disable-next-line console.warn('Copy to clipboard failed.', ex); return false; &#125; finally &#123; document.body.removeChild(textarea); &#125; &#125;&#125;","categories":[],"tags":[{"name":"小技巧","slug":"小技巧","permalink":"https://github.com/chengheai/tags/小技巧/"}]},{"title":"代码注释各种图像","slug":"代码注释各种图像","date":"2019-07-16T08:49:07.000Z","updated":"2021-10-09T08:48:32.084Z","comments":true,"path":"2019/07/16/代码注释各种图像/","link":"","permalink":"https://github.com/chengheai/2019/07/16/代码注释各种图像/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231 /* 标准键盘布局┌───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐│Esc│ │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P/S│S L│P/B│ ┌┐ ┌┐ ┌┐└───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘ └┘ └┘ └┘┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐│~ `│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ =│ BacSp │ │Ins│Hom│PUp│ │N L│ / │ * │ - │├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤│ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │&#123; [│&#125; ]│ | \\ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │ │├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + ││ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│&quot; &apos;│ Enter │ │ 4 │ 5 │ 6 │ │├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤ ┌───┐ ├───┼───┼───┼───┤│ Shift │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│&gt; .│? /│ Shift │ │ ↑ │ │ 1 │ 2 │ 3 │ │├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E│││ Ctrl│ │Alt │ Space │ Alt│ │ │Ctrl│ │ ← │ ↓ │ → │ │ 0 │ . │←─┘│└─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘*/ /* _ooOoo_ o8888888o 88&quot; . &quot;88 (| -_- |) O\\ = /O ____/`---&apos;\\____ .&apos; \\\\| |// `. / \\\\||| : |||// \\ / _||||| -:- |||||- \\ | | \\\\\\ - /// | | | \\_| &apos;&apos;\\---/&apos;&apos; | | \\ .-\\__ `-` ___/-. / ___`. .&apos; /--.--\\ `. . __ .&quot;&quot; &apos;&lt; `.___\\_&lt;|&gt;_/___.&apos; &gt;&apos;&quot;&quot;. | | : `- \\`.;`\\ _ /`;.`/ - ` : | | \\ \\ `-. \\_ __\\ /__ _/ .-` / / ======`-.____`-.___\\_____/___.-`____.-&apos;====== `=---=&apos; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 佛祖保佑 永无BUG */ /*** ┌─┐ ┌─┐* ┌──┘ ┴───────┘ ┴──┐* │ │* │ ─── │* │ ─┬┘ └┬─ │* │ │* │ ─┴─ │* │ │* └───┐ ┌───┘* │ │* │ │* │ │* │ └──────────────┐* │ │* │ ├─┐* │ ┌─┘* │ │* └─┐ ┐ ┌───────┬──┐ ┌──┘* │ ─┤ ─┤ │ ─┤ ─┤* └──┴──┘ └──┴──┘* 神兽保佑* 代码无BUG!*//** * ┏┓ ┏┓ * ┏┛┻━━━┛┻┓ * ┃ ┃ * ┃ ━ ┃ * ┃ ┳┛ ┗┳ ┃ * ┃ ┃ * ┃ ┻ ┃ * ┃ ┃ * ┗━┓ ┏━┛ * ┃ ┃ * ┃ ┃ * ┃ ┗━━━┓ * ┃ ┣┓ * ┃ ┏┛ * ┗┓┓┏━┳┓┏┛ * ┃┫┫ ┃┫┫ * ┗┻┛ ┗┻┛ * 神兽保佑 * 代码无BUG! */ // d*##$.// zP&quot;&quot;&quot;&quot;&quot;$e. $&quot; $o//4$ &apos;$ $&quot; $//&apos;$ &apos;$ J$ $F// &apos;b $k $&gt; $// $k $r J$ d$// &apos;$ $ $&quot; $~// &apos;$ &quot;$ &apos;$E $// $ $L $&quot; $F ...// $. 4B $ $$$*&quot;&quot;&quot;*b// &apos;$ $. $$ $$ $F// &quot;$ R$ $F $&quot; $// $k ?$ u* dF .$// ^$. $$&quot; z$ u$$$$e// #$b $E.dW@e$&quot; ?$// #$ .o$$# d$$$$c ?F// $ .d$$#&quot; . zo$&gt; #$r .uF// $L .u$*&quot; $&amp;$$$k .$$d$$F// $$&quot; &quot;&quot;^&quot;$$$P&quot;$P9$// JP .o$$$$u:$P $$// $ ..ue$&quot; &quot;&quot; $&quot;// d$ $F $// $$ ....udE 4B// #$ &quot;&quot;&quot;&quot;` $r @$// ^$L &apos;$ $F// RN 4N $// *$b d$// $$k $F// $$b $F// $&quot;&quot; $F// &apos;$ $// $L $// &apos;$ $// $ $书本代码注释// .-~~~~~~~~~-._ _.-~~~~~~~~~-.// __.&apos; ~. .~ `.__// .&apos;// \\./ \\\\`.// .&apos;// | \\\\`.// .&apos;// .-~&quot;&quot;&quot;&quot;&quot;&quot;&quot;~~~~-._ | _,-~~~~&quot;&quot;&quot;&quot;&quot;&quot;&quot;~-. \\\\`.// .&apos;//.-&quot; `-. | .-&apos; &quot;-.\\\\`.// .&apos;//______.============-.. \\ | / ..-============.______\\\\`.//.&apos;______________________________\\|/______________________________`.微软经典图标代码注释 /* __ ,-~¨^ ^¨-, _, / / ;^-._...,¨/ / / / / / / / / / / / / /,.-:&apos;&apos;-,_ / / / _,.-:--._ ^ ^:-._ __../ /^ / /¨:.._¨__.; / / / ^ / / / / / / / / / /_,.--:^-._/ / / ^ ^¨¨-.___.:^ (R) - G33K */谷歌google代码注释 /* ___ _ / __|___ ___ __ _| |___ | (_ / _ \\/ _ \\/ _` | -_) \\___\\___/\\___/\\__, |_\\___| |___/ */奥运五环代码注释 /* _.-&quot;&quot;&quot;&quot;&quot;-._ _.-&quot;&quot;&quot;&quot;&quot;-._ _.-&quot;&quot;&quot;&quot;&quot;-._ ,&apos; `. ,&apos; `. ,&apos; `. / \\ / \\ / \\ | | | | | | | | | | | | | | | _.-&quot;|&quot;|&quot;-._ _.-&quot;|&quot;|&quot;-._ | \\ ,&apos; / \\ `. ,&apos; / \\ `. / `. / ,&apos; `. \\ / ,&apos; `. \\ ,&apos; `-..__|..-&apos; `-..|_|..-&apos; `-..|__..-&apos; | | | | | | | | | | \\ / \\ / `. ,&apos; `. ,&apos; `-..___..-&apos; `-..___..-&apos; */ 电脑图像代码注释 /* ,----------------, ,---------, ,-----------------------, ,&quot; ,&quot;| ,&quot; ,&quot;| ,&quot; ,&quot; | +-----------------------+ | ,&quot; ,&quot; | | .-----------------. | | +---------+ | | | | | | | -==----&apos;| | | | I LOVE DOS! | | | | | | | | Bad command or | | |/----|`---= | | | | C:\\&gt;_ | | | ,/|==== ooo | ; | | | | | // |(((( [33]| ,&quot; | `-----------------&apos; |,&quot; .;&apos;| |(((( | ,&quot; +-----------------------+ ;; | | |,&quot; /_)______________(_/ //&apos; | +---------+ ___________________________/___ `, / oooooooooooooooo .o. oooo /, \\,&quot;----------- / ==ooooooooooooooo==.o. ooo= // ,`\\--&#123;)B ,&quot; /_==__==========__==_ooo__ooo=_/&apos; /___________,&quot; */ /* _________ / /. .-------------. /_________/ | / / | | | | /+============+\\ | | |====| | | ||C:\\&gt; || | | | | || || | | |====| | | || || | | ___ | | || || | | |166| | | || ||/@@@ | --- | | \\+============+/ @ |_________|./. @ .. ....&apos; ..................@ __.&apos;.&apos; &apos;&apos; /oooooooooooooooo// /// /................// /_/ ------------------ */","categories":[],"tags":[{"name":"材料","slug":"材料","permalink":"https://github.com/chengheai/tags/材料/"}]},{"title":"常见js中易错小题介绍","slug":"常见js中易错小题介绍","date":"2019-07-16T05:31:49.000Z","updated":"2021-10-09T08:48:32.088Z","comments":true,"path":"2019/07/16/常见js中易错小题介绍/","link":"","permalink":"https://github.com/chengheai/2019/07/16/常见js中易错小题介绍/","excerpt":"","text":"前说在前端面试过程中，有时候会因为一些小题而使你与offer失之交臂，这也反应出你的基础知识点不扎实，或做事粗心大意，很多公司也喜欢出这样的题目来考察面试者的基本水平。下面总结了一些典型的面试易错题。 典题1、下面哪个是错误的？ A : li:nth-of-child(1) B : li:nth-of-type(1) C : li:nth-last-child(1) D : li:nth-last-of-type(1)答案：A解析：只有nth-child() 没有nth-of-child() 2、关于IE的window对象表述正确的有：() A. window.opener属性本身就是指向window B. window.reload()方法可以用来刷新当前页面 C. window.location = ‘a.html’ 和 window.location.href = ‘a.html’的作用都是把当前页面替换成a.html页面 D. 定义了全局变量g， 可以通过window.g来取得该变量 答案：ACD 解析：window不存在reload()方法， 只有location.reload() 3、 运行结果是什么？12var a = 'HelloWorld'console.log(a.split('').sort().join('')); 答案：HWdellloor解析：sort根据Unicode排序资料： sort Unicode ASCII Unicode与ASCII的区别","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://github.com/chengheai/tags/JavaScript/"},{"name":"面试题","slug":"面试题","permalink":"https://github.com/chengheai/tags/面试题/"}]},{"title":"面试题[1,2,3].map(parseInt)解析","slug":"面试题-1-2-3-map-parseInt-解析","date":"2019-07-16T02:11:03.000Z","updated":"2021-10-09T08:48:32.097Z","comments":true,"path":"2019/07/16/面试题-1-2-3-map-parseInt-解析/","link":"","permalink":"https://github.com/chengheai/2019/07/16/面试题-1-2-3-map-parseInt-解析/","excerpt":"","text":"题目12let a = ['1','2','3'].map(parseInt);console.log(a); 答案1// [ 1, NaN, NaN ] 解析代码解析1、传入一个参数123456var arr = [\"1\", \"2\", \"3\"].map(function(item)&#123; // 这个地方只传入一个参数 return item;&#125;);console.log(arr);// [\"1\", \"2\", \"3\"] 2、 传入两个参数123456var arr = [\"1\", \"2\", \"3\"].map(function(item, index)&#123; // 这个地方传入两个参数 return \"value:\" + item + \", index:\" + index;&#125;);console.log(arr);// [\"value:1, index:0\", \"value:2, index:1\", \"value:3, index:2\"] 3、map标准的语句123arr.map(function(item, index, arr)&#123; .....&#125;); 即，此时原题可以变换为：123var arr = [\"1\",\"2\",\"3\"];arr.map((value,index,array) =&gt; parseInt(value,index));//parseInt(string,radix) Map、parseInt 公式分析Map文档parseInt文档 这里只讲parseInt 语法parseInt(string, radix); 参数string要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用 ToString 抽象操作)。字符串开头的空白符将会被忽略。 radix一个介于2和36之间的整数(数学系统的基础)，表示上述字符串的基数。比如参数”10”表示使用我们通常使用的十进制数值系统。始终指定此参数可以消除阅读该代码时的困惑并且保证转换结果可预测。当未指定基数时，不同的实现会产生不同的结果，通常将值默认为10。相信到这里你应该懂了吧～～ 分解 求解步骤parseInt(‘1’, 0); // 1 (parseInt的处理方式，这个地方item没有以”0x”或者”0X”开始，8和10这个基数由实现环境来定，ES5规定使用10来作为基数，因此这个0相当于传递了10)parseInt(‘2’, 1); // NaN (因为parseInt的定义，超出了radix的界限)parseInt(‘3’, 2); // NaN (虽然没有超出界限，但是二进制里面没有3，因此返回NaN)","categories":[],"tags":[{"name":"面试题","slug":"面试题","permalink":"https://github.com/chengheai/tags/面试题/"},{"name":"Javascript","slug":"Javascript","permalink":"https://github.com/chengheai/tags/Javascript/"}]},{"title":"前端js综合经典面试题","slug":"前端js综合经典面试题","date":"2019-07-15T13:09:18.000Z","updated":"2021-10-09T08:48:32.085Z","comments":true,"path":"2019/07/15/前端js综合经典面试题/","link":"","permalink":"https://github.com/chengheai/2019/07/15/前端js综合经典面试题/","excerpt":"","text":"前记前些时间，面试中写的笔试题，偶然的机会做了两次，最后还是错了几道，结果回来在网上一挡，哎。。不过说实话，该公司面试题道道都是经典题，的确不错，长知识了。 题目1234567891011121314151617function Foo() &#123; getName = function() &#123;console.log(1);&#125;; return this;&#125;Foo.getName = function() &#123;console.log(2);&#125;;Foo.prototype.getName = function() &#123;console.log(3);&#125;;var getName = function() &#123;console.log(4);&#125;;function getName() &#123;console.log(5);&#125;//以下输出值为多少？Foo.getName();getName();Foo().getName();getName();new Foo.getName();new Foo().getName();new new Foo().getName(); 答案2 4 1 1 2 3 3 分析考察知识点分析逻辑运算符、运算符的优先级、声明变量和声明函数的提升优先级、原型继承、闭包 步骤分析1.函数和变量提升12Foo.getName(); // 2getName(); // 4 第一问 Foo.getName();第5行代码 Foo创建了一个叫getName的静态属性存储了一个匿名函数， 则第一问的答案就是Foo的静态函数返回 。 2 第二问 getName(); var getName 与 function getName 都是声明语句，区别在于 var getName 是函数表达式，而 function getName 是函数声明。函数声明会提前 小例子 123console.log(a);//输出：function a()&#123;&#125;var a=1;function a()&#123;&#125; 原题中代码最终执行时的是1234567891011function Foo() &#123; getName = function () &#123; console.log(1); &#125;; return this;&#125;var getName;//只提升变量声明function getName() &#123; console.log(5);&#125;//提升函数声明，覆盖var的声明 Foo.getName = function () &#123; console.log(2);&#125;;Foo.prototype.getName = function () &#123; console.log(3);&#125;;getName = function () &#123; console.log(4);&#125;;//最终的赋值再次覆盖function getName声明getName();//最终输出4 函数和作用域第三问 Foo().getName() 与第四问 getName();Foo().getName(); 先执行了Foo函数，然后调用Foo函数的返回值对象的getName属性函数 1、Foo的函数体内，getName是没有用var声明的，所以getName是一个全局变量。 2、Foo()的意思是运行Foo的函数体，这个函数体中做的事情就是，把全局变量getName的函数体替换成console.log(1)。3、Foo函数体的返回值是this，这里的this指向的是window对象。Foo().getName();就相当于window.getName();，也就是直接调用getName()函数，显示结果就是1。4、此时的window.getName(), getName(), Foo().getName()是等价的，如不熟悉this指向问题，可点击 运算符和优先级优先级汇总表 从以上的运算符优先级资料中可以看出，”.”运算符的优先级是比”new”运算符的优先级高的。 第五问 new Foo.getName()分析1、相当于new (Foo.getName)();2、执行Foo.getName函数，这时候就已经输出2了3、实例化一个对象 所以实际上将getName函数作为了构造函数来执行，故打印2。 第六问 new Foo().getName()1、相当于(new Foo()).getName();.运算符的优先级是19，就是指.会优于其他运算符之前执行，但是执行点的时候，是按照点前和点后的表达式依次执行的，因为Foo后面有个括号，而圆括号的优先级是20，所以new运算符是归Foo()这个函数的。2、函数中返回的是this，而this在构造函数中本来就代表当前实例化对象，遂最终Foo函数返回实例化对象。之后调用实例化对象的getName函数，因为在Foo构造函数中没有为实例化对象添加任何属性，遂到当前对象的原型对象（prototype）中寻找getName，找到了。构造函数中自定书写return问题3、执行new Foo()，实例化一个对象，这个对象中拥有Foo.prototype.getName方法。4、执行.getName()，调用Foo.prototype.getName方法，输出为3。 第七问 new new Foo().getName()最终运行代码 new ((new Foo()).getName)();先初始化Foo的实例化对象，然后将其原型上的getName函数作为构造函数再次new1、.运算符的优先级是19，就是指.会优于其他运算符之前执行。执行点的时候，是按照点前和点后的表达式依次执行的。看看左边的new new Foo()，带参数的new优先级是比不带参数的new优先级高的，所以左边的部分就相当于new (new Foo())什么是带参数的new：new Foo()什么是不带参数的new：new Foo2、执行(new Foo()).getName()，相当于foo.getName()。foo是new Foo()出来后的实例，这个结果和题目2是一样的。这时候已经输出3了。3、执行new，实例化一个对象","categories":[],"tags":[{"name":"面试题","slug":"面试题","permalink":"https://github.com/chengheai/tags/面试题/"}]},{"title":"关于js中构造函数手写return的影响","slug":"关于js中构造函数手写return的影响","date":"2019-07-15T12:44:55.000Z","updated":"2021-10-09T08:48:32.085Z","comments":true,"path":"2019/07/15/关于js中构造函数手写return的影响/","link":"","permalink":"https://github.com/chengheai/2019/07/15/关于js中构造函数手写return的影响/","excerpt":"","text":"例子基础例子构造函数正常的应该是这样的格式，new关键字调用函数，函数名首字母大写。123456789// 一个类function Fun(name, age, sex) &#123; this.name = name; this.age = age; this.sex = sex;&#125;// 实例var obj = new Fun('alex', 12, 'male');console.log(obj); 不用new调用的构造函数this指向window1、12345678function Fun(name, age, sex) &#123; this.name = name; this.age = age; this.sex = sex;&#125;// 不用new调用，函数直接调用，this windowFun('alex', 12, 'male');console.log(age) // 12 window 2、12345678function People(name, age)&#123; this.name = name; this.age = age;&#125;var obj = People('小米', 12);console.log(obj == null) // trueconsole.log(obj.age) // 报错 // 没有用new调用 不是构造函数，没有返回值 构造函数末尾有return语句1234567function fun(name, age) &#123; this.name = name; this.age = age; return 3;&#125;var xiaoming = new fun('小明', 12);console.log(xiaoming) // 忽略return 3； 构造函数在句中有return语句[基本类型值]123456789function fun(name, age) &#123; this.name = name; return 3; this.age = age;&#125;// 基本类型值，就会被忽视； // NaN undefined '' true, falsevar xiaoming = new fun('小明', 12);console.log(xiaoming) // 打断程序执行，age将不会执行 构造函数语句中return [引用类型值]12345678910111213// 返回 &#123;&#125; [] Math /\\d/// 引用类型值function fun(name, age) &#123; this.name = name; return &#123; a: 1, b: 2 &#125;; this.age = age;&#125;// 基本类型值，就会被忽视；var xiaoming = new fun('小明', 12);console.log(xiaoming) // 返回函数自己写的return里的值 工厂类型123456789101112function createPeople(name, age, sex) &#123; var obj = &#123;&#125;; obj.name = name; obj.age = age; obj.sex = sex; return obj;&#125;// 不写new也可以的，名称为工厂模式var xiaoming = createPeople('小明', 12, '男');console.log(xiaoming) // &#123; name: '小明', age: 12, sex: '男' &#125;console.log(xiaoming instanceof createPeople) // false 总结构造函数运行用new运算符调用一个函数的时候，分为4个步骤1，函数内部自己创建一个局部变量吗是一个控对象{}2,函数将自己的上下文设置为这个{}, 即所有语句中的this都指向这个控对象3，函数执行所有语句4，所有语句执行后，函数将return这个对象，函数将把自己的上下文返回 上面的构造函数就是典型的四步走 含有return语句构造函数不用谢return语句，自动return如果写了一个return ：如果return这个基本类型值，无视这个return值，该return什么还是return什么但是return阻止了构造函数的执行","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://github.com/chengheai/tags/JavaScript/"}]},{"title":"浅谈js中函数的继承方式","slug":"浅谈js中函数的继承方式","date":"2019-07-09T07:17:09.000Z","updated":"2021-10-09T08:48:32.093Z","comments":true,"path":"2019/07/09/浅谈js中函数的继承方式/","link":"","permalink":"https://github.com/chengheai/2019/07/09/浅谈js中函数的继承方式/","excerpt":"","text":"～～ 回首往昔， 更近一步 ～～ 招式1. ES5 构造函数继承1234567891011function Parent() &#123; this.name = 'parent'; this.colors = ['black', 'yellow', 'red']&#125;function Child() &#123; Parent.call(this); this.type = 'child';&#125;var q1 = new Child();console.log(q1.name); // parentconsole.log(q1.colors); // [ 'black', 'yellow', 'red' ] 再看12345678910111213141516function Parent() &#123; this.name = 'parent'; this.colors = ['black', 'yellow', 'red']&#125;function Child() &#123; Parent.call(this); this.type = 'child';&#125;Parent.prototype.age = 12;Parent.prototype.say = function()&#123; console.log('hello');&#125;var q1 = new Child();console.log(q1);console.log(q1.age); // undefinedconsole.log(q1.say()); // 报错 总结：Child无法继承Parent的原型对象，并没有真正的实现继承（部分继承） 2. ES5 原型链继承12345678910111213141516function Parent() &#123; this.name = 'parent'; this.colors = ['black', 'yellow', 'red']&#125;function Child() &#123; this.type = 'child';&#125;Parent.prototype.age = 12;Parent.prototype.say = function()&#123; console.log('hello');&#125;Child.prototype = new Parent();var q1 = new Child();// console.log(q1);console.log(q1.age); // 12console.log(q1.say()); // hello 再看1234567891011121314151617function Parent() &#123; this.name = 'parent'; this.colors = ['black', 'yellow', 'red']&#125;function Child() &#123; this.type = 'child';&#125;Parent.prototype.age = 12;Parent.prototype.say = function()&#123; console.log('hello');&#125;Child.prototype = new Parent();var q1 = new Child();var q2 = new Child();q1.colors.push('pink');console.log(q1.colors) // [ 'black', 'yellow', 'red', 'pink' ]console.log(q2.colors) // [ 'black', 'yellow', 'red', 'pink' ] 结论：被new出来的实例不能隔离 3. 组合继承(构造函数和原型链继承)123456789101112131415161718function Parent() &#123; this.name = 'parent'; this.colors = ['black', 'yellow', 'red']&#125;function Child() &#123; Parent.call(this); this.type = 'child';&#125;Parent.prototype.age = 12;Parent.prototype.say = function()&#123; console.log('hello');&#125;Child.prototype = new Parent();var q1 = new Child();var q2 = new Child();q1.colors.push('pink');console.log(q1.colors) // [ 'black', 'yellow', 'red','pink']console.log(q2.colors) // [ 'black', 'yellow', 'red', ] 结论：父类的构造函数被执行了两次，第一次是Child.prototype = new Parent()，第二次是在实例化的时候，这是没有必要的。 优化12345678910111213141516171819function Parent() &#123; this.name = 'parent'; this.colors = ['black', 'yellow', 'red']&#125;function Child() &#123; Parent.call(this); this.type = 'child';&#125;Parent.prototype.age = 12;Parent.prototype.say = function()&#123; console.log('hello');&#125;Child.prototype = Object.create(Parent.prototype);Child.prototype.constructor = Child;var q1 = new Child();var q2 = new Child();q1.colors.push('pink');console.log(q1.colors) // [ 'black', 'yellow', 'red', 'pink' ]console.log(q2.colors) // [ 'black', 'yellow', 'red', ] 结论：Object.create是一种创建对象的方式，它会创建一个中间对象 4. ES6 class继承12345678910111213141516171819202122// es6的继承class Parent &#123; constructor(name) &#123; this.name = name; &#125; say() &#123; console.log('parent has say method. ' + this.name); &#125;&#125;class Child extends Parent &#123; constructor(name) &#123; super(name); &#125; fly() &#123; console.log('chid can fly...'); &#125;&#125;var p = new Child('tom');p.say();p.fly(); 结论：文档，谢谢～ https://es6.ruanyifeng.com/?search=extend&amp;x=0&amp;y=0#docs/class-extends","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://github.com/chengheai/tags/JavaScript/"}]},{"title":"使用vue中mixin制作一个公用el-table组件","slug":"使用vue中mixin制作一个公用el-table组件","date":"2019-07-09T05:20:17.000Z","updated":"2021-10-09T08:48:32.084Z","comments":true,"path":"2019/07/09/使用vue中mixin制作一个公用el-table组件/","link":"","permalink":"https://github.com/chengheai/2019/07/09/使用vue中mixin制作一个公用el-table组件/","excerpt":"","text":"官网原话混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项 功能～1.选项合并～1.全局混入～1.自定义选项合并策略具体看官网介绍：https://cn.vuejs.org/v2/guide/mixins.html 需求假如我们的项目中有很多重复类似的页面，比如admin管理系统中，有很多很多的表格页面，你是不是每个页面都去写pageNum，pageSize，handleSizeChange，handleCurrentChange…..这样一来页面太多重复代码了。那怎么提取优化呢？🐳。你可以组件提出来写。经网上查阅资料所得：1. 组件在引用之后相当于在父组件内开辟了一块单独的空间，来根据父组件props过来的值进行相应的操作，单本质上两者还是泾渭分明，相对独立。 2. mixin则是在引入组件之后，则是将组件内部的内容如data等方法、method等属性与父组件相应内容进行合并。相当于在引入后，父组件的各种属性方法都被扩充了 单纯组件引用： =&gt; 父组件 + 子组件 &gt;&gt;&gt; 父组件 + 子组件 mixin： =&gt; 父组件 + 子组件 &gt;&gt;&gt; new父组件 实例想要实现的内容把项目中table非常多的东西都是可以复用的例如分页，表格高度，加载方法， loading 声明等一大堆的东西。下面我们来整理出来一个简单通用混入 list.js DEMO👻 点我呀 🐳 react👅 + redux🌈 + dvajs🦞 + mobx👺 + antd-design🤡 list代码list.js12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061const list = &#123; data() &#123; return &#123; loading: false, pageParam: &#123; pageNum: 1, // 页码 pageSize: 10, // 每页显示条数 &#125;, total: 0, // 总数 pageSizes: [10, 20, 30, 50], // 每页条数 pageLayout: 'total, sizes, prev, pager, next, jumper', // 分页布局 pagerCount: 5, // 大于等于 5 且小于等于 21 的奇数 list: [], &#125;; &#125;, methods: &#123; // 分页回掉事件 handleSizeChange(val) &#123; this.pageParam.pageSize = val; this.getList(); &#125;, handleCurrentChange(val) &#123; this.pageParam.pageNum = val; this.getList(); &#125;, /** * 请求返回的回调 * @param &#123;*&#125; apiResult * @returns &#123;*&#125; promise */ listSuccessCb(apiResult = &#123;&#125;) &#123; return new Promise((resolve, reject) =&gt; &#123; let tempList = []; // resolve return出的list try &#123; this.loading = false; tempList = apiResult.data.data.list; this.total = apiResult.data.totalCount; // 直接抛出 resolve(tempList); &#125; catch (error) &#123; reject(error); &#125; &#125;); &#125;, /** * 处理异常情况 * 错误时将loading置为 false */ listExceptionCb(error) &#123; this.loading = false; console.error(error); &#125;, &#125;, created() &#123; this.$nextTick().then(() =&gt; &#123; console.log('我是table mixin') &#125;); &#125;,&#125;;export default list; 应用代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;template&gt; &lt;div&gt; &lt;el-table :data=\"list\" v-loading=\"loading\" style=\"width: 100%\"&gt; &lt;el-table-column prop=\"date\" label=\"日期\" width=\"180\"&gt; &lt;/el-table-column&gt; &lt;el-table-column prop=\"name\" label=\"姓名\" width=\"180\"&gt; &lt;/el-table-column&gt; &lt;el-table-column prop=\"address\" label=\"地址\"&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;el-pagination @size-change=\"handleSizeChange\" @current-change=\"handleCurrentChange\" :page-sizes=\"pageSizes\" :pager-count=\"pagerCount\" :layout=\"pageLayout\" :total=\"total\"&gt; &lt;/el-pagination&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import mixin from '@/mixins/list' // 引入export default &#123; name: 'mixins-demo', mixins: [mixin], // 使用mixins data () &#123; return &#123; searchForm: &#123; // age: 18, // six: 'male' &#125; &#125; &#125;, methods: &#123; // 加载列表 getList () &#123; this.loading = true; const params = &#123; ...this.searchForm, ...this.pageParam &#125; this.$http.get('https://www.api.com/api/v1/query', &#123;params&#125;).then(res =&gt; &#123; if (res.data.code === 0) &#123; this.listSuccessCb(res).then((list) =&gt; &#123; this.list = list &#125;).catch((err) =&gt; &#123; this.listExceptionCb(err) // console.log(err) &#125;) &#125; &#125;) &#125; &#125;, created() &#123; console.log('我是组件自己的created'); &#125;, mounted() &#123; this.getList() &#125;&#125;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 使用了 mixins 之后一个简单的有 loading, 分页,数据的表格大概就只需要上面这些代码。 现在在list.js中我们可以直接调用组件的方法，比如在分页\b回调事件中调用组件的 getList()方法，在组件中直接调用 list.js中的代码，如直接访问 this.pageParam","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"https://github.com/chengheai/tags/vue/"},{"name":"element-ui","slug":"element-ui","permalink":"https://github.com/chengheai/tags/element-ui/"}]},{"title":"git中配置别名git config --global alias.xxx","slug":"git中配置别名git","date":"2019-07-08T12:40:19.000Z","updated":"2021-10-09T08:48:32.066Z","comments":true,"path":"2019/07/08/git中配置别名git/","link":"","permalink":"https://github.com/chengheai/2019/07/08/git中配置别名git/","excerpt":"","text":"前言有没有经常敲错命令？比如git status 打成 git stauts? stats…你有没有见过别人敲指令的时候是 git st?废话不多说，先呈上些实用的例子吧 alias123456789101112131415$ git status||$ git config --global alias.st status******* br *******$ git checkout||$ git config --global alias.co checkout******* br *******git commit||$ git config --global alias.ci commit******* br *******$ git branch||$ git config --global alias.br branch 以后你提交代码就可以这样输入1git ci -m &quot;biling,biling..&quot; 12345678$ git reset HEAD||$ git config --global alias.unstage &apos;reset HEAD&apos;******* br *******$ git last||$ git config --global alias.last &apos;log -1&apos; gitk .1git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit\" 美图献上 撤销与查看123456789$ vi .gitconfig[alias] co = checkout ci = commit br = branch st = status[user] name = Your Name email = your@email.com 别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://github.com/chengheai/tags/git/"}]},{"title":"有关前端js中this指向的问题笔记","slug":"有关前端js中this指向的问题笔记","date":"2019-07-08T11:52:05.000Z","updated":"2021-10-09T08:48:32.092Z","comments":true,"path":"2019/07/08/有关前端js中this指向的问题笔记/","link":"","permalink":"https://github.com/chengheai/2019/07/08/有关前端js中this指向的问题笔记/","excerpt":"","text":"前言在以往的ECMAScript 5中，this的指向可谓是多种多样，在各个公司面试题也是必考项，现收集几个面试题进行解析： 原题解析题1:123456789var o = &#123; fn: function()&#123; var a = 1; console.log(this.a); &#125;&#125;o.a = 2;o.fn.a = 3;o.fn(); *分析:123o.a = 2; // 赋值, 即给对象o添加一个a属性，值为2o.fn.a = 3; // 赋值, fn函数添加属性 a 为 3o.fn(); // 对象调用，this是函数对象o里面 答案：2 题2:123456789101112var o = &#123;function fun()&#123; var a = 1; this.a = 2; function fn()&#123; return this.a; &#125; fn.a = 3; return fn;&#125;var result = fun()();console.log(result) *分析:123var a = 1; // 全局变量this.a = 2; // 全局添加属性var result = fun()(); // 函数直接调用，this window对象 答案：2 题3:123456789101112131415var a = 1;var obj = &#123; a: 2, fn: (function()&#123; this.a = 3; return function()&#123; return this.a; &#125; &#125;)()&#125;var fn = obj.fn;var result1 = obj.fn();var result2 = fn();console.log('result1: ', result1);console.log('result2: ', result2); *分析:12345678补充知识点：// 自运行函数是先执行的；比如var o =&#123; a: 1+1 // 先执行 1 + 1；&#125;this.a = 3; // 全局变量var result1 = obj.fn(); // obj对象调用，指向对象内部 a值var result2 = fn(); // global调用a, 值为3 答案：2, 3 题4:1234567891011var arr = [fn1,fn2];function fn1()&#123; return this.length;&#125;function fn2()&#123; return this[0];&#125;var a = arr[0]();var b = arr[1]()();console.log('a: ', a);console.log('b: ', b); *分析:1234567// 枚举return this.length; // this是数组var b = arr[1]()(); // global调用 // 在浏览器中与在弄的环境中运行结果都不一样// node:// a: 2;// b: undefined; 答案：2, undefined; 题5:12345function f()&#123; console.log(this.a)&#125;;f.a = 100;怎么使函数中打印100？ *分析:123456789// 方法一 call 方法f.call(f);// 方法二 arguments.callee原函数更改为：function f()&#123; console.log(arguments.callee.a)&#125;f.a = 100;f(); 答案：f.call(f), console.log(arguments.callee.a);","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://github.com/chengheai/tags/JavaScript/"},{"name":"this","slug":"this","permalink":"https://github.com/chengheai/tags/this/"}]},{"title":"css布局两边固定中间自适应方法集","slug":"css布局两边固定中间自适应方法集","date":"2019-06-21T13:56:26.000Z","updated":"2021-10-09T08:48:32.063Z","comments":true,"path":"2019/06/21/css布局两边固定中间自适应方法集/","link":"","permalink":"https://github.com/chengheai/2019/06/21/css布局两边固定中间自适应方法集/","excerpt":"","text":"1、90后万能flex方法12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .left&#123; width: 100px; background: red; &#125; .right&#123; width: 100px; background: blue; &#125; .wrap&#123; display: flex; &#125; .middle&#123; flex: 1; background: rosybrown; &#125; &lt;/style&gt; &lt;/head&gt; &lt;!-- 中间响应式，两边固定 --&gt; &lt;body&gt; &lt;div class=\"wrap\"&gt; &lt;div class=\"left\"&gt;left&lt;/div&gt; &lt;div class=\"middle\"&gt;&lt;/div&gt; &lt;div class=\"right\"&gt;right&lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 2、80后大佬们的table方法123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .left&#123; width: 100px; background: red; &#125; .right&#123; width: 100px; background: blue; &#125; .wrap&#123; display: table; &#125; .wrap &gt; div&#123; display: table-cell; &#125; .middle&#123; background: rosybrown; &#125; &lt;/style&gt;&lt;/head&gt;&lt;!-- 中间响应式，两边固定 --&gt;&lt;body&gt; &lt;div class=\"wrap\"&gt; &lt;div class=\"left\"&gt;left&lt;/div&gt; &lt;div class=\"middle\"&gt;我是中间的&lt;/div&gt; &lt;div class=\"right\"&gt;right&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 3、00后牛叉gird方法12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .left&#123; background: red; &#125; .right&#123; background: blue; &#125; .wrap&#123; display: grid; width: 100%; grid-template-rows: auto; grid-template-columns: 100px auto 100px; &#125; .middle&#123; background: rosybrown; &#125; &lt;/style&gt;&lt;/head&gt;&lt;!-- 中间响应式，两边固定 --&gt;&lt;body&gt; &lt;div class=\"wrap\"&gt; &lt;div class=\"left\"&gt;left&lt;/div&gt; &lt;div class=\"middle\"&gt;我是中间的&lt;/div&gt; &lt;div class=\"right\"&gt;right&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 4、8090老套路position方法12345678910111213141516171819202122232425262728293031323334353637383940&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .left&#123; left: 0; width: 100px; background: red; &#125; .right&#123; right: 0; width: 100px; background: blue; &#125; .wrap&#123; position: relative; &#125; .wrap&gt; div&#123; position: absolute; &#125; .middle&#123; left: 100px; right: 100px; background: rosybrown; &#125; &lt;/style&gt;&lt;/head&gt;&lt;!-- 中间响应式，两边固定 --&gt;&lt;body&gt; &lt;div class=\"wrap\"&gt; &lt;div class=\"left\"&gt;left&lt;/div&gt; &lt;div class=\"middle\"&gt;我是中间的&lt;/div&gt; &lt;div class=\"right\"&gt;right&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://github.com/chengheai/tags/css/"}]},{"title":"vue项目按需使用keep-alive","slug":"vue项目按需使用keep-alive","date":"2019-05-23T14:05:40.000Z","updated":"2021-10-09T08:48:32.081Z","comments":true,"path":"2019/05/23/vue项目按需使用keep-alive/","link":"","permalink":"https://github.com/chengheai/2019/05/23/vue项目按需使用keep-alive/","excerpt":"","text":"需求list 页面做缓存add/edit 页面不做缓存detail 页面不做缓存……….. 前人法子1234567&lt;keep-alive&gt; &lt;!-- 需要缓存 --&gt; &lt;router-view :include=\"include\" v-if=\"$route.meta.keepAlive\" /&gt;&lt;/keep-alive&gt;&lt;!-- 不需要缓存 --&gt;&lt;router-view v-if=\"!$route.meta.keepAlive\" /&gt; 123456789101112131415161718192021export default &#123; name: 'app', data: () =&gt; (&#123; include: [], &#125;), watch: &#123; $route(to, from) &#123; //如果要to的页面是需要 keepAlive 缓存的，把 name push 进 include数组 if (to.meta.keepAlive) &#123; !this.include.includes(to.name) &amp;&amp; this.include.push(to.name); &#125; //如果要form的页面是 keepAlive缓存的， //再根据 deepth 来判断是前进还是后退 //如果是后退 if (from.meta.keepAlive &amp;&amp; to.meta.deepth &lt; from.meta.deepth) &#123; var index = this.include.indexOf(from.name); index !== -1 &amp;&amp; this.include.splice(index, 1); &#125; &#125;, &#125;,&#125;; 粗暴法子12345678&lt;transition name=\"move\" mode=\"out-in\"&gt; &lt;keep-alive&gt; &lt;!-- 需要缓存的视图组件 --&gt; &lt;router-view v-if=\"$route.meta.keepAlive\" /&gt; &lt;/keep-alive&gt;&lt;/transition&gt;&lt;!-- 不需要缓存的视图组件 --&gt;&lt;router-view v-if=\"!$route.meta.keepAlive\" /&gt; 123456789101112watch: &#123; $route(to, from) &#123; console.log(to); // 如果是后退 if (to.meta.deepth &lt; from.meta.deepth) &#123; to.meta.keepAlive = false; &#125; else &#123; to.meta.keepAlive = true; &#125; &#125;&#125;, 12345678910111213141516171819202122232425262728293031323334353637383940new Router(&#123; routes: [ &#123; path: '/', name: 'index', component: () =&gt; import('./views/keep-alive/index.vue'), meta: &#123; deepth: 1, // 同级 不刷新 keepAlive: true &#125; &#125;, &#123; path: '/list', name: 'list', component: () =&gt; import('./views/keep-alive/list.vue'), meta: &#123; deepth: 1 // 同级不刷新 keepAlive: true &#125; &#125;, &#123; path: '/detail', name: 'detail', component: () =&gt; import('./views/keep-alive/detail.vue'), meta: &#123; deepth: 0, // 进入list不刷新页面 keepAlive: false &#125; &#125;, &#123; path: '/edit', name: 'edit', component: () =&gt; import('./views/keep-alive/edit.vue'), meta: &#123; deepth: 2, // 进入list刷新页面 keepAlive: false &#125; &#125; ]&#125;)","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"https://github.com/chengheai/tags/vue/"},{"name":"vue-router","slug":"vue-router","permalink":"https://github.com/chengheai/tags/vue-router/"}]},{"title":"vue-cli axios 项目有关于refresh_token、access_token过期失效刷新的处理","slug":"vue-cli项目有关于refresh-token、access-token过期失效刷新的处理","date":"2019-05-22T14:24:19.000Z","updated":"2021-10-09T08:48:32.075Z","comments":true,"path":"2019/05/22/vue-cli项目有关于refresh-token、access-token过期失效刷新的处理/","link":"","permalink":"https://github.com/chengheai/2019/05/22/vue-cli项目有关于refresh-token、access-token过期失效刷新的处理/","excerpt":"","text":"需求用户登录之后，返回access_token, refresh_token 还有返回失效时间20秒.1,假如用户一直在数据交互。当access_token 失效了就用refresh_token 来更新一下 access_token.2,假如用户登录之后啥也不干，那么access_token 失效了就跳到login页面.3,假如用户在失效前30分钟存在数据交互，则用refresh_token 刷新 access_token。 前言于在网上搜索了一大半。都是说的是在接口401状态去用refresh_token 去调取新 access_token，这样那还不是存在一直登录不退出的状态？不现实。。这里又涉及到axios的二次封装。刚好项目中用到element-ui， 索性把错误状态提示也做了一下。思路则是在请求拦截，响应拦截做文章。废话不多说。下面是代码。源代码 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183import axios from 'axios';import Cookies from 'js-cookie';import &#123; Message &#125; from 'element-ui';import router from './../router/index';axios.defaults.timeout = 10000;var init = &#123; ❤️ 没画好？重画 [更多...] // 记录时间戳 timer: null, // 是否调过refresh_token函数 isRefresh: false, // 公用提示 🥕🥕🥕 🥕🥕🥕🥕 openMessage: function(msg) &#123; 🥕🥕🥕🥕 🥕🥕🥕🥕🥕 Message(&#123; 🥕🥕🥕🥕🥕 🥕🥕🥕🥕🥕 message: msg, 🥕🥕🥕🥕🥕 🥕🥕🥕🥕🥕🥕 type: 'error', 🥕 🥕🥕🥕🥕🥕🥕🥕🥕🥕 showClose: true, 🥕 🥕🥕🥕🥕🥕🥕🥕🥕🥕🥕 &#125;); 🥕🥕🥕🥕🥕🥕🥕🥕🥕 &#125;, 🥕🥕🥕🥕🥕🥕🥕 getRefreshToken: function() &#123; 🥕🥕🥕🥕🥕🥕 let params = &#123; 🥕🥕🥕🥕🥕、 refresh_token: Cookies.get('refresh_token'), 🥕🥕🥕🥕 &#125;; 🥕🥕🥕 let that = this; 🥕🥕 axios(&#123; method: 'post', url: `api/v1/refresh_token$&#123;params&#125;`, &#125;) .then(function(res) &#123; if (res.data.access_token) &#123; // 防止重复调refresh_token接口 that.isRefresh = false; let result = res.data; let millisecond = new Date().getTime(); let expiresTime = result.expires_in * 1000; let utilTime = millisecond + expiresTime; Cookies.set('access_token', result.access_token, &#123; expires: expiresTime &#125;); Cookies.set('utilTime', utilTime); Cookies.set('refresh_token', result.refresh_token); Cookies.set('expires_in', result.expires_in); &#125; else &#123; //刷新token失败只能跳转到登录页重新登录 localStorage.clear(); Cookies.remove('access_token'); Cookies.remove('utilTime'); Cookies.remove('expires_in'); Cookies.remove('refresh_token'); router.replace(&#123; path: '/login', query: &#123; redirect: router.currentRoute.fullPath &#125;, &#125;); &#125; &#125;) .catch(function(err) &#123; //刷新token失败只能跳转到登录页重新登录 get_sys_logout(); localStorage.clear(); Cookies.remove('access_token'); Cookies.remove('utilTime'); Cookies.remove('expires_in'); Cookies.remove('refresh_token'); console.log(err); that.openMessage('登录失效'); router.replace(&#123; path: '/login', query: &#123; redirect: router.currentRoute.fullPath &#125;, &#125;); &#125;); &#125;,&#125;;//http request 拦截器axios.interceptors.request.use( config =&gt; &#123; config.data = JSON.stringify(config.data); init.timer = new Date().getTime(); if (Cookies.get('access_token')) &#123; if ((parseInt(Cookies.get('utilTime')) - init.timer) / (1000 * 60 * 60) &lt; 0) &#123; Cookies.remove('access_token'); Cookies.remove('utilTime'); Cookies.remove('expires_in'); Cookies.remove('refresh_token'); get_sys_logout(); localStorage.clear(); router.replace(&#123; path: '/login', query: &#123; redirect: router.currentRoute.fullPath &#125;, &#125;); &#125; config.headers = &#123; 'Content-Type': 'application/json', Authorization: `Bearer $&#123;Cookies.get('access_token')&#125;`, &#125;; &#125; else &#123; config.headers = &#123; 'Content-Type': 'application/json', &#125;; &#125; return config; &#125;, error =&gt; &#123; Message.error(&#123; message: '加载超时', &#125;); return Promise.reject(error); &#125;);//响应拦截器即异常处理axios.interceptors.response.use( response =&gt; &#123; if (Cookies.get('utilTime')) &#123; if (!init.isRefresh) &#123; // 是否是到期前30分钟 if ((parseInt(Cookies.get('utilTime')) - init.timer) / (1000 * 60 * 60) &lt; 0.5) &#123; init.isRefresh = true; init.getRefreshToken(); &#125; &#125; &#125; return response; &#125;, err =&gt; &#123; // debugger if (err &amp;&amp; err.response) &#123; switch (err.response.status) &#123; case 400: console.log('错误请求'); break; case 401: //刷新token失败只能跳转到登录页重新登录 get_sys_logout(); localStorage.clear(); Cookies.remove('access_token'); Cookies.remove('expires_in'); Cookies.remove('utilTime'); Cookies.remove('refresh_token'); init.openMessage('登录失效'); router.replace(&#123; path: '/login', query: &#123; redirect: router.currentRoute.fullPath &#125;, &#125;); break; case 403: init.openMessage('拒绝访问'); break; case 404: init.openMessage('请求错误,未找到该资源'); break; case 405: init.openMessage('请求方法未允许'); break; case 408: init.openMessage('请求超时'); break; case 500: init.openMessage('服务器端出错'); break; case 501: init.openMessage('网络未实现'); break; case 502: init.openMessage('网络错误'); break; case 503: init.openMessage('服务不可用'); break; case 504: init.openMessage('网络超时'); break; case 505: init.openMessage('http版本不支持该请求'); break; default: init.openMessage(`连接错误$&#123;err.response.status&#125;`); &#125; &#125; else &#123; init.openMessage('连接服务器失败'); &#125; return Promise.reject(err.response); &#125;);export default axios;","categories":[],"tags":[{"name":"axios","slug":"axios","permalink":"https://github.com/chengheai/tags/axios/"},{"name":"vue","slug":"vue","permalink":"https://github.com/chengheai/tags/vue/"},{"name":"token","slug":"token","permalink":"https://github.com/chengheai/tags/token/"}]},{"title":"Mac下使用rz、sz远程上传、下载","slug":"Mac下使用rz、sz远程上传、下载","date":"2019-05-13T13:33:29.000Z","updated":"2021-10-09T08:48:32.057Z","comments":true,"path":"2019/05/13/Mac下使用rz、sz远程上传、下载/","link":"","permalink":"https://github.com/chengheai/2019/05/13/Mac下使用rz、sz远程上传、下载/","excerpt":"","text":"写在前面什么是rz/sz (lsz/lrz)简单说就是，可以很方便地用这两个sz/rz工具，实现Linux下和Windows之间的文件传输(发送和接收)，速度大概为10KB/s，适合中小文件。rz/sz 通过Zmodem协议传输数据。 为什么要用rz/sz普通Linux和Windows之间的文件共享方法，主要有建立nfs实现文件共享，和tftp之类的方法，但是都很麻烦，而如果只是小文件（几十K，几百K），那么直接用rz/sz，就显得极其地方便了。大文件的话，还是要考虑上面说得，其他的共享方法了，毕竟，rz/sz速度只有10K左右，传大文件会累死人的。 Mac上如何使用步骤1.下载并安装iTerm2 (一般来说都安装过了)http://www.iterm2.com/#/section/downloads2.下载安装lrzszsudo brew install lrzsz(或者 brew install lrzsz)3.下载并安装automatic zmoderm for iTerm2-1 usr/local/bin-2 sudo wget https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-send-zmodem.shsudo wget https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-recv-zmodem.sh-3 sudo chmod 777 /usr/local/bin/iterm2-*4.添加iTerm2 triggerTerm2 –&gt; Profiles –&gt; Advanced –&gt; Edit Trigger 12345Regular expression Action Parameters\\*\\*B0100 Run Silent Coprocess /usr/local/bin/iterm2-send-zmodem.sh\\*\\*B00000000000000 Run Silent Coprocess /usr/local/bin/iterm2-recv-zmodem.sh","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://github.com/chengheai/tags/linux/"}]},{"title":"el-input在vue中优雅实现禁止输入特殊字符","slug":"el-input在vue中优雅实现禁止输入特殊字符","date":"2019-04-15T13:10:10.000Z","updated":"2021-10-09T08:48:32.065Z","comments":true,"path":"2019/04/15/el-input在vue中优雅实现禁止输入特殊字符/","link":"","permalink":"https://github.com/chengheai/2019/04/15/el-input在vue中优雅实现禁止输入特殊字符/","excerpt":"","text":"前提补充在vue中1&lt;input v-model=\"text\" /&gt; 等价于1234&lt;input :value=\"text\" @input=\"e =&gt; text = e.target.value\"/&gt; 需求前端提交form表单要求，不能输入 @#¥%……&amp;*…..不是提示，而是 禁止输入 效果 代码** 在mian.js中添加【vue原型上添加方法，便于全局使用】12345678910Vue.prototype.validForbid = function (value, number = 255) &#123; value = value.replace(/[`~!@#$%^&amp;*()_\\-+=&lt;&gt;?:\"&#123;&#125;|,./;'\\\\[\\]·~！@#￥%……&amp;*（）——\\-+=&#123;&#125;|《》？：“”【】、；‘’，。、]/g, '').replace(/\\s/g, \"\"); if (value.length &gt;= number) &#123; this.$message(&#123; type: \"warning\", message: `输入内容不能超过$&#123;number&#125;个字符` &#125;); &#125; return value;&#125; ** 在component.vue中加入123456&lt;el-input :value=\"form.name\" @input=\"e =&gt; form.name = validSe(e)\" maxlength=\"10\" placeholder=\"过滤特殊字符长度10\"&gt;&lt;/el-input&gt; over听说你要在线测试⁉️ 那就点我🐙吧","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"https://github.com/chengheai/tags/vue/"},{"name":"element","slug":"element","permalink":"https://github.com/chengheai/tags/element/"}]},{"title":"vue-cli 上传文件与文件夹进度条","slug":"上传文件与文件夹进度条","date":"2019-04-13T09:12:03.000Z","updated":"2021-10-09T08:48:32.082Z","comments":true,"path":"2019/04/13/上传文件与文件夹进度条/","link":"","permalink":"https://github.com/chengheai/2019/04/13/上传文件与文件夹进度条/","excerpt":"","text":"效果 DEMO点我呀🐳⚠️🔞测试上传的东西后端一概不收！！！[…] 代码Way - 011234567891011121314151617181920212223242526272829303132333435363738394041424344*** store.js/* eslint-disable */import Vue from 'vue';import Vuex from 'vuex';import axios from 'axios';Vue.use(Vuex);export default new Vuex.Store(&#123; state: &#123; uploadPercentage: 0 &#125;, mutations: &#123; setUploadPercentage(state, percentage) &#123; state.uploadPercentage = percentage; &#125;, &#125;, actions: &#123; upload(&#123; commit &#125;, file) &#123; const config = &#123; onUploadProgress: function(progressEvent) &#123; console.log(progressEvent); const uploadPercentage = Math.round((progressEvent.loaded * 100) / progressEvent.total); commit('setUploadPercentage', uploadPercentage); &#125;, &#125;; const data = new FormData(); data.append('file', file); axios .post('https://api/v1/upload', data, config) .then(data =&gt; &#123; console.log(data); &#125;) .catch(err =&gt; &#123; commit('setUploadPercentage', 10); // 上传失败 console.log(err); &#125;); &#125;, &#125;, getters: &#123; uploadPercentage: state =&gt; state.uploadPercentage, &#125;,&#125;); 1234567891011121314151617181920212223242526272829*** temp.vue&lt;template&gt; &lt;div&gt; &lt;a href=\"javascript:;\" class=\"file\"&gt; 上传文件夹 &lt;i class=\"el-icon-upload2 el-icon--right\"&gt;&lt;/i&gt; &lt;input type=\"file\" ref=\"file\" name=\"file\" webkitdirectory @change.stop=\"handleFileChanged\"&gt; &lt;/a&gt; &lt;a href=\"javascript:;\" class=\"file\"&gt; 上传文件 &lt;i class=\"el-icon-upload2 el-icon--right\"&gt;&lt;/i&gt; &lt;input type=\"file\" ref=\"upload\" name=\"file\" @change.stop=\"handleFileChanged\"&gt; &lt;/a&gt; &lt;!-- --&gt; &lt;el-progress :text-inside=\"true\" :stroke-width=\"18\" :percentage=\"percentage\"&gt;&lt;/el-progress&gt; &lt;el-progress :text-inside=\"true\" :stroke-width=\"18\" :percentage=\"percentage\" color=\"rgba(142, 113, 199, 0.7)\" &gt;&lt;/el-progress&gt; &lt;el-progress :text-inside=\"true\" :stroke-width=\"18\" :percentage=\"percentage\" status=\"success\"&gt;&lt;/el-progress&gt; &lt;el-progress :text-inside=\"true\" :stroke-width=\"18\" :percentage=\"percentage\" status=\"exception\"&gt;&lt;/el-progress&gt; &lt;el-progress type=\"circle\" :percentage=\"percentage\"&gt;&lt;/el-progress&gt; &lt;el-progress type=\"circle\" :percentage=\"percentage\" color=\"#8e71c7\"&gt;&lt;/el-progress&gt; &lt;el-progress type=\"circle\" :percentage=\"percentage\" status=\"success\"&gt;&lt;/el-progress&gt; &lt;el-progress type=\"circle\" :percentage=\"percentage\" status=\"exception\"&gt;&lt;/el-progress&gt; &lt;/div&gt;&lt;/template&gt; 123456789101112131415161718192021*** temp.vueimport axios from \"axios\";import &#123; mapState, mapGetters, mapActions, mapMutations &#125; from \"vuex\";export default &#123; data() &#123; return &#123; file: null &#125;; &#125;, computed: &#123; ...mapGetters(&#123; percentage: \"uploadPercentage\" &#125;) &#125;, methods: &#123; handleFileChanged(event) &#123; const file = event.target.files[0]; this.$store.dispatch(\"upload\", file); &#125; &#125;&#125;; 12345678910111213141516171819202122232425262728293031323334*** temp.vue&lt;style lang=\"less\" scoped&gt;.el-progress &#123; margin-top: 10px;&#125;.file &#123; position: relative; display: inline-block; background: #1890ff; border-radius: 4px; padding: 4px 12px; overflow: hidden; color: #fff; text-decoration: none; text-indent: 0; line-height: 20px; font-size: 14px; input &#123; position: absolute; font-size: 14px; right: 0; top: 0; opacity: 0; cursor: pointer; &#125; i &#123; float: left; font-size: 16px; margin-top: 2px; margin-right: 4px; margin-left: -6px; &#125;&#125;&lt;/style&gt; Way - 02temple1234567891011121314 &lt;el-dialog title=\"上传进度\" :visible.sync=\"dialogVisible\" @closed=\"closeDal\" width=\"60%\"&gt; &lt;div&gt; &lt;el-progress :text-inside=\"true\" :stroke-width=\"18\" status=\"success\" :percentage=\"percentage\" &gt;&lt;/el-progress&gt; &lt;p&gt;&#123;&#123;percentage === 100 ? '上传完成！': percentage === 0? '上传失败': '上传中...'&#125;&#125;&lt;/p&gt; &lt;/div&gt; &lt;span slot=\"footer\" class=\"dialog-footer\"&gt; &lt;el-button type=\"primary\" @click=\"closeDal\"&gt;确 定&lt;/el-button&gt; &lt;/span&gt;&lt;/el-dialog&gt; 单个文件1234567891011121314151617181920212223242526272829303132uploadFile(e, m) &#123; let file = e.target.files; let param = new FormData(); // 创建FormData对象 this.dialogVisible = true; const config = &#123; onUploadProgress: progressEvent =&gt; &#123; const complete = Math.round( (progressEvent.loaded * 100) / progressEvent.total ); this.percentage = complete; &#125; &#125;; for (var i = 0; i &lt; file.length; i++) &#123; // 通过append向FormData对象添加数据 param.append(\"file\", file[i]); &#125; axios .post(\"/task/upload-file\", param, config) .then(res =&gt; &#123; if (res.data.code === \"0\") &#123; this.openMessageSuccess(res.data.msg); this.getTasks(); &#125; else &#123; this.percentage = 0; this.openMessageError(res.data.msg); &#125; &#125;) .catch(err =&gt; &#123; this.percentage = 0; this.openMessageError(err); &#125;);&#125;, 文件夹12345678910111213141516171819202122232425262728293031323334353637uploadFiles(event) &#123; const fileList = event.target.files; let param = new FormData(); // 创建FormData对象 let paths = []; _.each(fileList, function(o) &#123; paths.push(o.webkitRelativePath); &#125;); for (var i = 0; i &lt; fileList.length; i++) &#123; // 通过append向FormData对象添加数据 param.append(\"file\", fileList[i]); param.append(\"path\", paths[i]); &#125; const config = &#123; onUploadProgress: progressEvent =&gt; &#123; const complete = Math.round( (progressEvent.loaded * 100) / progressEvent.total ); this.percentage = complete; &#125; &#125;; // param.append(&#123;paths&#125;); axios .post(\"/task/upload-dir\", param, config) .then(res =&gt; &#123; if (res.data.code === \"0\") &#123; this.openMessageSuccess(res.data.msg); this.getTasks(); &#125; else &#123; this.percentage = 0; this.openMessageError(res.data.msg); &#125; &#125;) .catch(err =&gt; &#123; this.percentage = 0; this.openMessageError(err); &#125;);&#125;,","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"https://github.com/chengheai/tags/vue/"},{"name":"progress","slug":"progress","permalink":"https://github.com/chengheai/tags/progress/"}]},{"title":"datetime限制日期时间范围","slug":"datetime限制日期时间范围","date":"2019-03-25T12:58:47.000Z","updated":"2021-10-09T08:48:32.065Z","comments":true,"path":"2019/03/25/datetime限制日期时间范围/","link":"","permalink":"https://github.com/chengheai/2019/03/25/datetime限制日期时间范围/","excerpt":"","text":"效果demo 代码 [ 日期比较 ]1234567891011121314151617181920&lt;div class=\"block\"&gt; &lt;span class=\"demonstration\"&gt;开始日期：&lt;/span&gt; &lt;el-date-picker v-model=\"startDate\" type=\"date\" :picker-options=\"pickerOptionsStart\" @change=\"changeEnd\" placeholder=\"选择日期\" &gt;&lt;/el-date-picker&gt;&lt;/div&gt;&lt;div class=\"block\" style=\"margin-right: 50px;\"&gt; &lt;span class=\"demonstration\"&gt;结束日期：&lt;/span&gt; &lt;el-date-picker v-model=\"endDate\" type=\"date\" :picker-options=\"pickerOptionsEnd\" @change=\"changeStart\" placeholder=\"选择日期时间\" &gt;&lt;/el-date-picker&gt;&lt;/div&gt; 12345678910111213141516171819202122232425export default &#123; data() &#123; return &#123; pickerOptionsStart: &#123;&#125;, pickerOptionsEnd: &#123;&#125;, startDate: \"\", endDate: \"\" &#125;; &#125;, methods: &#123; changeStart() &#123; this.pickerOptionsStart = Object.assign(&#123;&#125;, this.pickerOptionsStart, &#123; disabledDate: time =&gt; &#123; return time.getTime() &gt; this.endDate; &#125; &#125;); &#125;, changeEnd() &#123; this.pickerOptionsEnd = Object.assign(&#123;&#125;, this.pickerOptionsEnd, &#123; disabledDate: time =&gt; &#123; return time.getTime() &lt; this.startDate; &#125; &#125;); &#125;, &#125; 代码 [ 日期时间比较 ]12345678910111213141516171819&lt;div class=\"block\"&gt; &lt;span class=\"demonstration\"&gt;开始时间：&lt;/span&gt; &lt;el-date-picker v-model=\"startTime\" type=\"datetime\" value-format=\"yyyy-MM-dd HH:mm:ss\" placeholder=\"选择时间\" &gt;&lt;/el-date-picker&gt;&lt;/div&gt;&lt;div class=\"block\"&gt; &lt;span class=\"demonstration\"&gt;结束时间：&lt;/span&gt; &lt;el-date-picker v-model=\"endTime\" type=\"datetime\" value-format=\"yyyy-MM-dd HH:mm:ss\" @change=\"change\" placeholder=\"选择时间\" &gt;&lt;/el-date-picker&gt;&lt;/div&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081export default &#123; data() &#123; return &#123; pickerOptionsStartTime: &#123;&#125;, pickerOptionsEndTime: &#123;&#125;, startTime: \"\", endTime: \"\" &#125;; &#125;, methods: &#123; change(val) &#123; console.log(val); this.comptime(this.startTime, val) .then(res =&gt; &#123; this.endTime = res; console.log(\"res: \", res); &#125;) .catch(err =&gt; &#123; this.endTime = err; console.log(\"err: \", err); &#125;); &#125;, async comptime(beginTime, endTime) &#123; if (beginTime) &#123; var str = endTime; var beginTimes = beginTime.substring(0, 10).split(\"-\"); var endTimes = endTime.substring(0, 10).split(\"-\"); beginTime = beginTimes[1] + \"-\" + beginTimes[2] + \"-\" + beginTimes[0] + \" \" + beginTime.substring(10, 19); endTime = endTimes[1] + \"-\" + endTimes[2] + \"-\" + endTimes[0] + \" \" + endTime.substring(10, 19); var a = (Date.parse(endTime) - Date.parse(beginTime)) / 3600 / 1000; if (a &lt;= 0) &#123; this.$message(&#123; message: \"结束时间必须大于开始时间\", type: \"warning\" &#125;); return \"\"; &#125; else &#123; return str; &#125; &#125; else &#123; this.$message(&#123; message: \"请选择开始时间\", type: \"warning\" &#125;); &#125; &#125;, changeStartTime() &#123; this.pickerOptionsStartTime = Object.assign( &#123;&#125;, this.pickerOptionsStartTime, &#123; disabledDate: time =&gt; &#123; return time.getTime() &gt; this.endTime; &#125; &#125; ); &#125;, changeEndTime() &#123; this.pickerOptionsEndTime = Object.assign(&#123;&#125;, this.pickerOptionsEndTime, &#123; disabledDate: time =&gt; &#123; return time.getTime() &lt; this.startTime; &#125; &#125;); &#125; &#125;&#125;;","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"https://github.com/chengheai/tags/vue/"},{"name":"element-ui","slug":"element-ui","permalink":"https://github.com/chengheai/tags/element-ui/"}]},{"title":"javascript eval()函数作用","slug":"javascript-eval-函数作用","date":"2019-03-14T13:19:38.000Z","updated":"2021-10-09T08:48:32.069Z","comments":true,"path":"2019/03/14/javascript-eval-函数作用/","link":"","permalink":"https://github.com/chengheai/2019/03/14/javascript-eval-函数作用/","excerpt":"","text":"定义和用法eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。 语法eval(string) eval函数是强大的数码转换引擎,字符串经eval转换后得到一个javascript对象说明该方法只接受原始字符串作为参数，如果 string 参数不是原始字符串，那么该方法将不作任何改变地返回。因此请不要为 eval() 函数传递 String 对象来作为参数。 如果试图覆盖 eval 属性或把 eval() 方法赋予另一个属性，并通过该属性调用它，则 ECMAScript 实现允许抛出一个 EvalError 异常。 例子var temp = eval(“3″);等效于var temp = 3;var temp = eval(“’3′”);等效于var temp = ’3′;eval(“x=10;y=20;document.write(x*y)”)document.write(eval(“2+2”))var x=10document.write(eval(x+17)) 实践假设后端返回一个字段，data = ‘[“image1.png”, “image2.png”, “image3.png”]’; 你怎么拿到里面的图片遍历出来呢🌚还想着字符串截取？这样？ 用eval() 一套搞定 提示和注释提示：虽然 eval() 的功能非常强大，但在实际使用中用到它的情况并不多。 提示：虽然 eval() 的功能非常强大，但在实际使用中用到它的情况并不多。","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://github.com/chengheai/tags/JavaScript/"}]},{"title":"chart力导图node节点图片代替","slug":"chart力导图node节点图片代替","date":"2019-02-14T09:14:30.000Z","updated":"2021-10-09T08:48:32.061Z","comments":true,"path":"2019/02/14/chart力导图node节点图片代替/","link":"","permalink":"https://github.com/chengheai/2019/02/14/chart力导图node节点图片代替/","excerpt":"","text":"效果 源码在线demo 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546chart: &#123; type: 'networkgraph' &#125;, plotOptions: &#123; networkgraph: &#123; layoutAlgorithm: &#123; enableSimulation: true &#125; &#125; &#125;, series: [&#123; link: &#123; width: 2 &#125;, data: [&#123; from: 'chengheai-1', to: 'chengheai-2' &#125;, &#123; from: 'chengheai-2', to: 'chengheai-3' &#125;], nodes: [&#123; id: 'chengheai-1', marker: &#123; width: 20, height: 20, symbol: 'url(https://avatars3.githubusercontent.com/u/26807610?s=88&amp;v=4)' &#125; &#125;, &#123; id: 'chengheai-2', marker: &#123; width: 40, height: 40, symbol: 'url(https://avatars3.githubusercontent.com/u/26807610?s=88&amp;v=4)' &#125; &#125;, &#123; id: 'chengheai-3', marker: &#123; width: 40, height: 40, symbol: 'url(https://avatars3.githubusercontent.com/u/26807610?s=88&amp;v=4)' &#125; &#125;] &#125;]","categories":[],"tags":[{"name":"charts","slug":"charts","permalink":"https://github.com/chengheai/tags/charts/"}]},{"title":"Mint-ui-infinite-scroll解决重复加载","slug":"Mint-ui-infinite-scroll解决重复加载","date":"2019-01-22T02:40:09.000Z","updated":"2021-10-09T08:48:32.059Z","comments":true,"path":"2019/01/22/Mint-ui-infinite-scroll解决重复加载/","link":"","permalink":"https://github.com/chengheai/2019/01/22/Mint-ui-infinite-scroll解决重复加载/","excerpt":"","text":"第一种方法（当数据不多的情况下使用【比如排行榜10条】）思路每次上滑的时候都调一次接口，直到没有数据就将infinite-scroll-disabled 设为true，每次截取slice(i 3, (i + 1) 3）; 3是每次显示的条数 代码123456789101112131415161718&lt;div class=\"r-contatin\"&gt; &lt;ul class=\"r-item-wrapper\" v-infinite-scroll=\"loadMore\" infinite-scroll-disabled=\"loading\" infinite-scroll-distance=\"10\" &gt; &lt;li v-for=\"(item, key) in list\" :key=\"key\"&gt; &lt;div&gt;&#123;&#123;item&#125;&#125;==&#123;&#123;key&#125;&#125;&lt;/div&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;p v-if=\"!noMore\" class=\"loading-tip\"&gt; &lt;mt-spinner color=\"rgba(255, 51, 153, 1)\" type=\"fading-circle\"&gt;&lt;/mt-spinner&gt; &lt;span style=\"margin-left: 5px;\"&gt;更多加载中...&lt;/span&gt;&lt;/p&gt;&lt;p class=\"no-more\" v-else&gt;没有更多了~&lt;/p&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263data() &#123; return &#123; list: [], moreList: [], i: 0, loading: false, noMore: false, &#125;;&#125;,filters: &#123;&#125;,mounted() &#123; this.getData(this.obj);&#125;,methods: &#123; getData(obj) &#123; let i = 0; let that = this; axios.post(obj) .then(res =&gt; &#123; console.log(res); if (res.data.code === \"200\") &#123; that.list = res.data.result.rankingDetailList.slice( i * 3, (i + 1) * 3 ); &#125; else &#123; Toast(\"载入失败\"); &#125; &#125;) .catch(err =&gt; &#123; Toast(\"载入失败\"); console.log(err); &#125;); &#125;, loadMore() &#123; let that = this; that.loading = true; that.noMore = false; axios.post(that.obj) .then(res =&gt; &#123; that.i++; console.log(res); that.moreList = res.data.result.rankingDetailList.slice( that.i * 3, (that.i + 1) * 3 ); if (that.moreList.length === 0) &#123; that.noMore = true; that.loading = true; &#125; else &#123; that.loading = false; that.noMore = false; that.moreList.forEach(function(item) &#123; that.list.push(item); &#125;); &#125; &#125;) .catch(function(error) &#123; console.info(error); &#125;); &#125;,&#125; 第二种方法（当数据很多并有分页的情况下使用【比如点菜菜单 &gt;= 20 条】）思路第一次进来传第一页，之后每次上滑page++，当返回的数据长度为0时，把上滑功能关闭 ##代码12345&lt;div class=\"real-content\" v-infinite-scroll=\"busy\" infinite-scroll-distance=\"10\"&gt; &lt;div class=\"item\" v-for=\"g in good\" :key=\"g.item\"&gt; ... &lt;/div&gt;&lt;/div&gt; 1234567loadMore()&#123; this.busy = true; this.pageSize++; axios(&#123; //请求数据 &#125;) this.busy = false;","categories":[],"tags":[{"name":"Mint-ui","slug":"Mint-ui","permalink":"https://github.com/chengheai/tags/Mint-ui/"},{"name":"vue","slug":"vue","permalink":"https://github.com/chengheai/tags/vue/"}]},{"title":"vue-element 实现支持按周切换的日历","slug":"vue-element-实现支持按周切换的日历","date":"2019-01-07T12:20:43.000Z","updated":"2021-10-09T08:48:32.076Z","comments":true,"path":"2019/01/07/vue-element-实现支持按周切换的日历/","link":"","permalink":"https://github.com/chengheai/2019/01/07/vue-element-实现支持按周切换的日历/","excerpt":"","text":"vue-week-picker vue-week-picker 安装 1npm install vue-week-picker --save-dev DEMO 原生线上DEMO👅 🦊 🐸 🚎 与element-ui结合使用线上DEMO👅 🦊 🐸 🚎 功能 自适应式按周切换 与DatePicker日期选择器使用结合Element-ui使用效果 与vue-element结合组件，请转到🌈 使用123456789101112131415161718192021&lt;VueWeekPicker @dateValue=\"dateValue\" /&gt;Or&lt;vue-week-picker @dateValue=\"dateValue\" /&gt;import VueWeekPicker from 'vue-week-picker';export default &#123; components: &#123; VueWeekPicker &#125;&#125;Orexport default &#123; components: &#123; 'vue-week-picker': VueWeekPicker &#125;&#125; 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;template&gt; &lt;div class=\"date\"&gt; &lt;el-row&gt; &lt;el-col :span=\"24\"&gt; &lt;div class=\"weeks\"&gt; &lt;!-- 日期 --&gt; &lt;ul class=\"days\"&gt; &lt;li @click=\"weekPre\" class=\"prev-btn\"&gt; &lt;i class=\"fa fa-angle-left fa-icon\" aria-hidden=\"true\"&gt;&lt;/i&gt; &lt;span class=\"hidden-sm-and-down\" style=\"margin-left: 5px;\"&gt;上一周&lt;/span&gt; &lt;/li&gt; &lt;li @click=\"pick(day, index)\" v-for=\"(day, index) in days\" :key=\"index\" :class=\"&#123;selected:index == tabIndex&#125;\" &gt; &lt;!--本月--&gt; &lt;span v-if=\"day.getMonth()+1 != currentMonth\" class=\"other-month item-wrapper\"&gt; &lt;p&gt;&#123;&#123;day | getWeekFormat&#125;&#125;&lt;/p&gt; &lt;span class=\"hidden-sm-and-down\"&gt;&#123;&#123; day | dateFormat &#125;&#125;&lt;/span&gt; &lt;/span&gt; &lt;span v-else&gt; &lt;!--今天--&gt; &lt;span v-if=\"day.getFullYear() == new Date().getFullYear() &amp;&amp; day.getMonth() == new Date().getMonth() &amp;&amp; day.getDate() == new Date().getDate()\" class=\"today-item\" &gt;今天&lt;/span&gt; &lt;span class=\"item-wrapper\" v-else&gt; &lt;p&gt;&#123;&#123;day | getWeekFormat&#125;&#125;&lt;/p&gt; &lt;span class=\"hidden-sm-and-down\"&gt;&#123;&#123; day | dateFormat &#125;&#125;&lt;/span&gt; &lt;/span&gt; &lt;/span&gt; &lt;/li&gt; &lt;li @click=\"weekNext\" class=\"next-btn\"&gt; &lt;span class=\"hidden-sm-and-down\" style=\"margin-right: 5px;\"&gt;下一周&lt;/span&gt; &lt;i class=\"fa fa-angle-right fa-icon\" aria-hidden=\"true\"&gt;&lt;/i&gt; &lt;/li&gt; &lt;li&gt; &lt;span&gt; &lt;el-date-picker class=\"right-pick-btn\" style=\"width: 100%\" @change=\"pickDate\" v-model=\"value1\" type=\"date\" placeholder=\"按日期查询\" &gt;&lt;/el-date-picker&gt; &lt;/span&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/el-col&gt; &lt;/el-row&gt; &lt;el-row&gt; &lt;el-col :span=\"20\" :offset=\"2\" class=\"time-range\"&gt; &lt;span @click=\"pickTime(time, index)\" v-for=\"(time, index) in times\" :key=\"index\" :class=\"&#123;active:index == tabTimeIndex&#125;\" &gt;&#123;&#123;time&#125;&#125;&lt;/span&gt; &lt;/el-col&gt; &lt;/el-row&gt; &lt;/div&gt;&lt;/template&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167&lt;script&gt;/* eslint-disable */import moment from \"moment\";export default &#123; props: &#123; dateValue: &#123; type: String, default: moment(new Date()).format(\"YYYY-MM-DD\") &#125;, timeValue: &#123; type: String, default: \"00:00\" &#125; &#125;, data() &#123; return &#123; currentYear: 1970, // 年份 currentMonth: 1, // 月份 currentDay: 1, // 日期 currentWeek: 1, // 星期 days: [], value1: \"\", tabIndex: null, tabTimeIndex: 0, times: [ \"00:00~06:00\", \"06:00~12:00\", \"12:00~18:00\", \"18:00~24:00\", \"今日节目\" ] &#125;; &#125;, filters: &#123; dateFormat(date) &#123; return moment(date).format(\"YYYY-MM-DD\"); &#125;, getWeekFormat(date) &#123; const weeksObj = &#123; 1: \"周一\", 2: \"周二\", 3: \"周三\", 4: \"周四\", 5: \"周五\", 6: \"周六\", 7: \"周日\" &#125;; let weekNumber = moment(date).isoWeekday(); return weeksObj[weekNumber]; &#125; &#125;, mounted() &#123; const index = _.findIndex(this.days, function(o) &#123; // console.log('o: ', o.getDate()); // console.log('new Date().getDate(): ', new Date().getDate()); return o.getDate() === new Date().getDate(); &#125;); console.log(\"index: \", index); this.tabIndex = index; &#125;, created() &#123; this.initData(null); &#125;, methods: &#123; formatDate(year, month, day) &#123; const y = year; let m = month; if (m &lt; 10) m = `0$&#123;m&#125;`; let d = day; if (d &lt; 10) d = `0$&#123;d&#125;`; return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;`; &#125;, pickDate(date) &#123; let newDate = moment(date).format(\"YYYY-MM-DD\"); this.$emit(\"dateValue\", newDate); &#125;, initData(cur) &#123; let date = \"\"; if (cur) &#123; date = new Date(cur); &#125; else &#123; date = new Date(); &#125; this.currentDay = date.getDate(); // 今日日期 几号 this.currentYear = date.getFullYear(); // 当前年份 this.currentMonth = date.getMonth() + 1; // 当前月份 this.currentWeek = date.getDay(); // 1...6,0 // 星期几 if (this.currentWeek === 0) &#123; this.currentWeek = 7; &#125; const str = this.formatDate( this.currentYear, this.currentMonth, this.currentDay ); // 今日日期 年-月-日 this.days.length = 0; // 今天是周日，放在第一行第7个位置，前面6个 这里默认显示一周，如果需要显示一个月，则第二个循环为 i&lt;= 35- this.currentWeek /* eslint-disabled */ for (let i = this.currentWeek - 1; i &gt;= 0; i -= 1) &#123; const d = new Date(str); d.setDate(d.getDate() - i); // console.log(y:\" + d.getDate()) this.days.push(d); &#125; for (let i = 1; i &lt;= 7 - this.currentWeek; i += 1) &#123; const d = new Date(str); d.setDate(d.getDate() + i); this.days.push(d); &#125; &#125;, // 上个星期 weekPre() &#123; const d = this.days[0]; // 如果当期日期是7号或者小于7号 d.setDate(d.getDate() - 7); this.initData(d); &#125;, // 下个星期 weekNext() &#123; const d = this.days[6]; // 如果当期日期是7号或者小于7号 d.setDate(d.getDate() + 7); this.initData(d); &#125;, // 上一個月 传入当前年份和月份 pickPre(year, month) &#123; const d = new Date(this.formatDate(year, month, 1)); d.setDate(0); this.initData(this.formatDate(d.getFullYear(), d.getMonth() + 1, 1)); &#125;, // 下一個月 传入当前年份和月份 pickNext(year, month) &#123; const d = new Date(this.formatDate(year, month, 1)); d.setDate(35); this.initData(this.formatDate(d.getFullYear(), d.getMonth() + 1, 1)); &#125;, // 当前选择日期 pick(date, index) &#123; let newDate = moment(date).format(\"YYYY-MM-DD\"); this.$emit(\"dateValue\", newDate); // console.log(\"index: \", index); this.tabIndex = index; // alert( // this.formatDate(date.getFullYear(), date.getMonth() + 1, date.getDate()) // ); &#125;, pickTime(time, index) &#123; // console.log('time: ', time); let timeArr = []; timeArr.push(_.head(_.split(time, \"~\"))); console.log(\"timeArr: \", timeArr); this.$emit(\"timeValue\", _.join(timeArr), \"\"); // console.log(\"index: \", index); this.tabTimeIndex = index; // alert( // this.formatDate(date.getFullYear(), date.getMonth() + 1, date.getDate()) // ); &#125; &#125;&#125;;&lt;/script&gt;","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"https://github.com/chengheai/tags/vue/"},{"name":"element","slug":"element","permalink":"https://github.com/chengheai/tags/element/"}]},{"title":"Vuejs+Element监听-window.resize-el-menu响应式显示","slug":"Vuejs-Element监听-window-resize-el-menu响应式显示","date":"2018-12-28T08:47:31.000Z","updated":"2021-10-09T08:48:32.061Z","comments":true,"path":"2018/12/28/Vuejs-Element监听-window-resize-el-menu响应式显示/","link":"","permalink":"https://github.com/chengheai/2018/12/28/Vuejs-Element监听-window-resize-el-menu响应式显示/","excerpt":"","text":"效果 代码template12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;template&gt; &lt;div class=\"sidebar\"&gt; &lt;!-- 折叠按钮 --&gt; &lt;div class=\"collapse-btn\" @click=\"collapseChage\"&gt; &lt;i class=\"el-icon-d-arrow-left\" v-show=\"!collapse\" title=\"收起\"&gt; &amp;nbsp;&amp;nbsp; &lt;small&gt;收缩侧边栏&lt;/small&gt; &lt;/i&gt; &lt;i class=\"el-icon-d-arrow-right\" v-show=\"collapse\" title=\"展开\"&gt;&lt;/i&gt; &lt;/div&gt; &lt;el-menu class=\"sidebar-el-menu\" :default-active=\"onRoutes\" :collapse=\"collapse\" text-color=\"#8d9199\" active-text-color=\"#20a0ff\" unique-opened router &gt; &lt;template v-for=\"item in items\"&gt; &lt;template v-if=\"item.subs\"&gt; &lt;el-submenu :index=\"item.index\" :key=\"item.index\"&gt; &lt;template slot=\"title\"&gt; &lt;i :class=\"item.icon\"&gt;&lt;/i&gt; &lt;span slot=\"title\"&gt;&#123;&#123; item.title &#125;&#125;&lt;/span&gt; &lt;/template&gt; &lt;template v-for=\"subItem in item.subs\"&gt; &lt;el-submenu v-if=\"subItem.subs\" :index=\"subItem.index\" :key=\"subItem.index\"&gt; &lt;template slot=\"title\"&gt; &lt;i :class=\"subItem.icon\"&gt;&lt;/i&gt; &#123;&#123; subItem.title &#125;&#125; &lt;/template&gt; &lt;el-menu-item v-for=\"(threeItem,i) in subItem.subs\" :key=\"i\" :index=\"threeItem.index\" &gt;&#123;&#123; threeItem.title &#125;&#125;&lt;/el-menu-item&gt; &lt;/el-submenu&gt; &lt;el-menu-item v-else :index=\"subItem.index\" :key=\"subItem.index\"&gt; &lt;i :class=\"subItem.icon\"&gt;&lt;/i&gt; &#123;&#123; subItem.title &#125;&#125; &lt;/el-menu-item&gt; &lt;/template&gt; &lt;/el-submenu&gt; &lt;/template&gt; &lt;template v-else&gt; &lt;el-menu-item :index=\"item.index\" :key=\"item.index\"&gt; &lt;i :class=\"item.icon\"&gt;&lt;/i&gt; &lt;span slot=\"title\"&gt;&#123;&#123; item.title &#125;&#125;&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/template&gt; &lt;/template&gt; &lt;/el-menu&gt; &lt;div&gt; &lt;i class=\"el-icon-d-arrow-right\" v-show=\"collapse\" title=\"展开\"&gt;&lt;/i&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt; javascript12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;script&gt;import bus from \"./bus\";import &#123; menu &#125; from \"../../data/menu\";export default &#123; data() &#123; return &#123; collapse: false, items: menu, screenWidth: 1000 &#125;; &#125;, computed: &#123; onRoutes() &#123; return this.$route.path.replace(\"/\", \"\"); &#125; &#125;, created() &#123; // 通过 Event Bus 进行组件间通信，来折叠侧边栏 bus.$on(\"collapse\", msg =&gt; &#123; this.collapse = msg; &#125;); &#125;, mounted() &#123; // if (document.body.clientWidth &lt; 1500) &#123; // this.collapseChage(); // &#125; const that = this; window.addEventListener(\"resize\", function() &#123; return (() =&gt; &#123; window.screenWidth = document.body.clientWidth; that.screenWidth = window.screenWidth; &#125;)(); &#125;); &#125;, watch: &#123; screenWidth(val) &#123; if (!this.timer) &#123; this.screenWidth = val; this.timer = true; let that = this; setTimeout(function() &#123; // that.screenWidth = that.$store.state.canvasWidth console.log(that.screenWidth); that.auto(); that.timer = false; &#125;, 400); &#125; &#125; &#125;, methods: &#123; // 侧边栏折叠 collapseChage() &#123; this.collapse = !this.collapse; bus.$emit(\"collapse\", this.collapse); &#125;, auto() &#123; if (this.screenWidth &lt; 1200) &#123; console.log(\"收起来\"); this.collapse = true; bus.$emit(\"collapse\", true); &#125; else &#123; console.log(\"展开\"); this.collapse = false; bus.$emit(\"collapse\", false); &#125; &#125; &#125;&#125;;&lt;/script&gt; css123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;style scoped&gt;.sidebar &#123; z-index: 1024; display: block; position: fixed; left: 0; top: 70px; bottom: 0; overflow-y: scroll;&#125;.sidebar::-webkit-scrollbar &#123; width: 0;&#125;.sidebar-el-menu:not(.el-menu--collapse) &#123; width: 200px;&#125;.sidebar &gt; ul &#123; height: 100%; /*写给不支持calc()的浏览器*/ height: calc(100% - 52px); top: 30px; background-color: rgb(235, 239, 243); border-top: 1px solid #d6d6d6;&#125;.sidebar &gt; ul &gt; li,.sidebar &gt; ul &gt; li div &#123; background-color: rgb(235, 239, 243);&#125;.sidebar &gt; ul &gt; li &gt; ul &#123; background-color: rgb(235, 239, 243);&#125;.el-menu &#123; background-color: rgb(235, 239, 243);&#125;i &#123; margin-right: 10px;&#125;.collapse-btn &#123; height: 30px; width: 100%; cursor: pointer; line-height: 30px; position: absolute; top: 0; left: 0; background-color: #f4f6fa; color: #fff; text-align: center; overflow: hidden; box-sizing: border-box; box-shadow: 0 5px 10px #ddd;&#125;.collapse-btn i &#123; color: #8d9199; padding: 1px; cursor: pointer; overflow: hidden; text-overflow: ellipsis;&#125;/* .collapse-btn:before&#123; content: \"\"; display: block; height: 0; border-top: 1px dotted #909399; position: absolute; left: 15px; right: 15px; top: 18px; &#125; */&lt;/style&gt; ##注意⚠️此开发框架是github 名为 lin-xin 的 vue-manage-system因公司项目需要兼容iPad，故而修改详细代码点击这里 👇🏽👇🏽👇🏽👇🏽👇🏽👇🏽👇🏽👇🏽完整代码请点我👅 🦊 🐸 🚎","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"https://github.com/chengheai/tags/vue/"},{"name":"element-ui","slug":"element-ui","permalink":"https://github.com/chengheai/tags/element-ui/"}]},{"title":"vue中@keyup.enter.native输入法的回车与消息发送快捷键回车的冲突解决方法","slug":"vue中-keyup-enter-native输入法的回车与消息发送快捷键回车的冲突解决方法","date":"2018-12-24T02:33:58.000Z","updated":"2021-10-09T08:48:32.079Z","comments":true,"path":"2018/12/24/vue中-keyup-enter-native输入法的回车与消息发送快捷键回车的冲突解决方法/","link":"","permalink":"https://github.com/chengheai/2018/12/24/vue中-keyup-enter-native输入法的回车与消息发送快捷键回车的冲突解决方法/","excerpt":"","text":"问题*当你在中文输入法下输入然后回车后，发现表单提交了。 代码12345&lt;el-col :span=\"14\"&gt; &lt;el-input type=\"text\" v-model=\"loginForm.content\" autocomplete=\"off\" @keyup.enter.native =\"submitForm('loginForm')\" placeholder=\"图形验证码\"&gt; &lt;template slot=\"prepend\"&gt;&lt;span class=\"fa fa-picture-o\" style=\"width: 13px\"&gt;&lt;/span&gt;&lt;/template&gt; &lt;/el-input&gt;&lt;/el-col&gt; 结果 文本 解决方法代码更换12345678910111213@keyup.enter.native =\"submitForm('loginForm')\" || || || \\\\||// \\\\// || 👇 👇↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓@keypress.enter.native =\"submitForm('loginForm')\"","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"https://github.com/chengheai/tags/vue/"},{"name":"element","slug":"element","permalink":"https://github.com/chengheai/tags/element/"}]},{"title":"前端库2018总结","slug":"前端库2018总结","date":"2018-12-20T02:15:05.000Z","updated":"2021-10-09T08:48:32.086Z","comments":true,"path":"2018/12/20/前端库2018总结/","link":"","permalink":"https://github.com/chengheai/2018/12/20/前端库2018总结/","excerpt":"","text":"GitHub前端库2018/12/19打包工具 webpack - 打包项目。 rollup - 打包 npm 库。 parcel - webpack 竞品，但发展前景不乐观，再观察一段时间。 systemjs - 针对一些特殊场景会比较有用，比如云 ide，支付宝小程序 IDE 等。 microbundle - 基于 rollup，简化配置。 webpack-dev-server - webpack 开发服务器。 webpack-dev-middleware - webpack 中间件。 vue-cli - vue 命令行工具。 create-react-app - react 官方脚手架。 webpack-merge - 合并 webpack 配置。 webpack-chain - 通过 chain 风格 api 的方式修改 webpack 配置。 webpack loader 和插件 hard-source-webpack-plugin - 性能提升 70%，但有坑。 svgr - svg 转 react 组件。 postcss - CSS 界的 babel。 autoprefixer - 为 CSS 选择权自动加 prefix。 cssnano - CSS 压缩，也有类 preset 的概念。 mini-css-extract-plugin - 提取 CSS 为单独文件。 webpackbar - webpack 进度条。 webpack-bundle-analyzer - 构建产物占比分析。 uglifyjs-webpack-plugin - JS 压缩，产物为 ES5 语法。 terser-webpack-plugin - JS 压缩，产物为 ES6 语法。 webpack-manifest-plugin - 生成 manifest.json。 copy-webpack-plugin - 复制额外的文件到输出目录。 case-sensitive-paths-webpack-plugin - 大小写敏感检测，能规避一些问题，但构建时性能消耗较大。 css-hot-loader - CSS 热更新，搭配 mini-css-extract-plugin 使用。 duplicate-package-checker-webpack-plugin - 重复依赖检测。 包管理 yarn npm babel babel babel-plugin-rawest - React 的 DOM 直出方案。 babel-plugin-macros - 前端文件写 node 逻辑。 babel-plugin-dynamic-import-node - 有些场景下会需要禁用 import() 语法。 babel-plugin-react-require - 自动为 jsx 语法加 react 引用。 babel-plugin-react-remove-prop-types - 删除 prop-types，生产环境用。 测试 jest ts-jest enzyme jsdom puppeteer react-test-rerender - 官方出品。 react-testing-library - kentcdodds 出品。 框架 react vue next.js nuxt.js gastby umi choo taro - 用 React 写小程序，适配微信和支付宝等。 mpvue - 用 Vue 写小程序。 after.js react 相关库 preact - 轻量级 React 实现。 inferno - 轻量级 React 实现。 react-router - React 路由方案。 reach-router - React 路由方案，较新，优势是可访问性。 router5 - 通用的路由方案。 react-loadable - 按需加载 react 组件。 ant-design - 蚂蚁金服的 React UI 库。 material-ui - UI 库。 react-intl - React 的国际化方案。 react-dnd - 拖拽实现。 react-helmet - 修改 html 的 header 内容。 vue 相关库 vue-router 工具类 history path-to-regexp lodash fastclick 数据流 redux immer mobx unstated rxjs dva rematch - 基于 redux。 vuex ngrx redux 扩展 react-redux - 绑定 react 和 redux。 redux-saga redux-persist redux-bundler redux-box 性能优化 workbox - PWA 方案，Google 出品。 critical - 提取关键 CSS。 语言 typescript flow graphql 文档 vuepress docz 工程 lerna - monorepo 管理。 lerna-changelog - 为 lerna 项目自动生成 changelog。 eslint - JS 风格约束。 eslint-config-airbnb prettier - 更主观的风格自动修改。 yeoman-generator - 脚手架工具。 serve - 本地静态服务器。 np - npm publish 辅助，自动 push、打 tag、升版本等。 lint-staged - eslint 提速，只 lint 提交的代码。 coveralls - 覆盖率。 husky - 添加 git hooks。 cross-env - 跨平台的环境变量声明。 projj - 本地 git 项目管理，支持 github 和 gitlab。 nvm - 管理 node 版本。 concurrently - 在 npm scripts 里并行执行命令。 @zeit/ncc - 打包为 npm 包为一个文件。 编辑器 VSCode IntelliJ IDEA codesandbox stackblitz css css modules emotion 命令行 yargs - 命令行入口套件。 yargs-parser - 命令行参数解析。 chalk - 输出不同颜色。 cheerio - 用类 jQuery 语法处理 HTML。 chokidar - 文件监听。 clipboardy - 复制文本到粘贴板。 debug - 打印调试信息。 deprecate - 给过期警告。 glob - 文件查找。 tiny-glob - 文件查找。 signale - 漂亮的日志打印。 semver - semver 版本处理。 update-notifier - 更新提醒。 rimraf - 删除文件。 depd - 给出 deprecated 警告。 请求处理 whatwg-fetch got axios request reqwest 语法解析 esquery - 语法树查询。 其他 electron","categories":[],"tags":[{"name":"总结","slug":"总结","permalink":"https://github.com/chengheai/tags/总结/"}]},{"title":"react+antd+mongodb+express实现增删查改","slug":"react-antd-mongodb-express实现增删查改","date":"2018-12-10T05:17:07.000Z","updated":"2021-10-09T08:48:32.075Z","comments":true,"path":"2018/12/10/react-antd-mongodb-express实现增删查改/","link":"","permalink":"https://github.com/chengheai/2018/12/10/react-antd-mongodb-express实现增删查改/","excerpt":"","text":"前言：之前有一段时间做过react + antd的项目，还挺熟，但是现在在公司一直用的是vue，随着时间的推移，记忆也慢慢消失，所有趁工作之余的休息时间来写了这个小例子，实现本地起服务，调本地mongo数据，当然，你也可以放线上或者VPS上预览。[demo](http://144.34.148.126:10000/) ;另外也有一个vue+ element 的项目 [GitHub](https://github.com/chengheai/mongodb-vue) [完整代码](https://github.com/chengheai/mongo-react) ;欢迎👏 star follow 如有问题请在GitHub上留言，谢谢！ 效果图 登录 使用sessionStorage在登录的时候setItem用户名，然后在components下Header.jsx去getItem用户名主要代码1234567891011handleSubmit = (e) =&gt; &#123; const &#123; dispatch &#125; = this.props; e.preventDefault(); this.props.form.validateFields((err, values) =&gt; &#123; if (!err) &#123; dispatch(routerRedux.replace('/list')); console.log('Received values of form: ', values); sessionStorage.setItem('guest', values.userName) &#125; &#125;);&#125; 添加与编辑，添加图片 编辑与添加共用一个抽屉，加一个types用来区别是编辑还是添加主要代码123456789101112131415161718192021222324252627282930313233343536373839404142434445handleSubmit = (e) =&gt; &#123; let that = this; const &#123; dispatch &#125; = this.props; const &#123; types, editForm &#125; = this.state; e.preventDefault(); if(types === 2)&#123; this.props.form.validateFields((err, values) =&gt; &#123; values = Object.assign(editForm, values); if (!err) &#123; // message.loading('正在添加...'); dispatch(&#123; type: 'heroModel/put_heros', payload: values, callback: (res) =&gt; &#123; message.success('修改成功'); this.setState(&#123; visible: false, editId: '' &#125;); this.props.form.resetFields(); that.getData(); &#125; &#125;) &#125; &#125;); &#125; else &#123; this.props.form.validateFields((err, values) =&gt; &#123; if (!err) &#123; // message.loading('正在添加...'); dispatch(&#123; type: 'heroModel/post_hero', payload: values, callback: (res) =&gt; &#123; message.success('添加成功'); this.setState(&#123; visible: false, &#125;); this.props.form.resetFields(); that.getData(); &#125; &#125;) &#125; &#125;); &#125;&#125; 分页与删除 主要代码server.js12345678910111213141516171819202122 router.get(\"/hero\", (req, res) =&gt; &#123; // console.log('========',req.query.pageSize) // console.log('+++++++++++++',Hero.count()) var total = 0; Hero.count(&#123;&#125;, function(err, count)&#123; if(err) return; total = count; res.set('x-header', total) &#125;) Hero.find(&#123;&#125;) .limit(Math.min(parseInt(req.query.pageSize) || 10, 100)) .skip(parseInt(req.query.currentPage -1) * req.query.pageSize || 0) .sort(&#123; updatedAt: -1 &#125;) .then(heros =&gt; &#123; res.json(heros); &#125;) .catch(err =&gt; &#123; res.json(err); &#125;)&#125;); list.js1234567891011121314151617181920212223242526272829handleTableChange = (pagination, filters, sorter) =&gt; &#123; console.log(pagination); // let that = this; const &#123; pageSize, current &#125; = pagination; const &#123; dispatch &#125; = this.props; const &#123; payload &#125; = this.state; this.setState(&#123; pagination: &#123; currentPage: current, pageSize, &#125;, &#125;); const query = &#123; ...payload, pageSize, currentPage: current &#125;; dispatch(&#123; type: 'heroModel/get_heros', payload: query, callback: res =&gt; &#123; this.setState(&#123; tableData: res.data, // eslint-disable-next-line total: parseInt(res.headers['x-header']) &#125;) &#125; &#125;);&#125;","categories":[],"tags":[{"name":"react","slug":"react","permalink":"https://github.com/chengheai/tags/react/"},{"name":"antd","slug":"antd","permalink":"https://github.com/chengheai/tags/antd/"},{"name":"mongodb","slug":"mongodb","permalink":"https://github.com/chengheai/tags/mongodb/"},{"name":"dvajs","slug":"dvajs","permalink":"https://github.com/chengheai/tags/dvajs/"},{"name":"nodejs","slug":"nodejs","permalink":"https://github.com/chengheai/tags/nodejs/"}]},{"title":"在docker下删除一个或多个image及container","slug":"下删除一个或多个image及container","date":"2018-11-15T06:13:52.000Z","updated":"2021-10-09T08:48:32.083Z","comments":true,"path":"2018/11/15/下删除一个或多个image及container/","link":"","permalink":"https://github.com/chengheai/2018/11/15/下删除一个或多个image及container/","excerpt":"","text":"停止所有的container，这样才能够删除其中的images 删除一个container公式1docker rm container_name/ID 1234➜ docker git:(master) ✗ docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES41c2ed15b32a koa-demo \"/bin/bash\" About an hour ago Exited (127) About an hour ago awesome_noycecaec5440819a hello-world \"/hello\" 2 hours ago Exited (0) 2 hours ago festive_austin 12➜ docker git:(master) ✗ docker rm caec5440819acaec5440819a 123➜ docker git:(master) ✗ docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES41c2ed15b32a koa-demo &quot;/bin/bash&quot; About an hour ago Exited (127) About an hour ago awesome_noyce 删除多个container1docker rm $(docker ps -a -q) 删除一个image停止12➜ docker git:(master) ✗ docker stop $(docker ps -a -q)41c2ed15b32a 查看所有12345➜ docker git:(master) ✗ docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEkoa-demo latest 7d24f0109057 About an hour ago 676MBhello-world latest 4ab4c602aa5e 2 months ago 1.84kBnode 8.4 386940f92d24 14 months ago 673MB 删除12345➜ docker git:(master) ✗ docker rmi 4ab4c602aa5eUntagged: hello-world:latestUntagged: hello-world@sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788Deleted: sha256:4ab4c602aa5eed5528a6620ff18a1dc4faef0e1ab3a5eddeddb410714478c67fDeleted: sha256:428c97da766c4c13b19088a471de6b622b038f3ae8efa10ec5a37d6d31a2df0b 检查是否删除1234➜ docker git:(master) ✗ docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEkoa-demo latest 7d24f0109057 About an hour ago 676MBnode 8.4 386940f92d24 14 months ago 673MB 删除多个image1docker rmi $( docker images -q ) 强制删除1docker rmi imagename 或者docker rmi -f imagename","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"https://github.com/chengheai/tags/docker/"}]},{"title":"常见的.eslintrc.js配置及rules说明","slug":"常见的-eslintrc-js配置及rules说明","date":"2018-11-08T07:58:22.000Z","updated":"2021-10-09T08:48:32.089Z","comments":true,"path":"2018/11/08/常见的-eslintrc-js配置及rules说明/","link":"","permalink":"https://github.com/chengheai/2018/11/08/常见的-eslintrc-js配置及rules说明/","excerpt":"","text":"规则级别“off”或者0，不启用这个规则 “warn”或者1，出现问题会有警告 “error”或者2，出现问题会报错 关闭ESLint检测12345/* eslint-disable */console.log(&apos;hello world&apos;);/* eslint-enable */ 配置eslintrc.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134// https://eslint.org/docs/user-guide/configuringmodule.exports = &#123; //此项是用来告诉eslint找当前配置文件不能往父级查找 root: true, //此项是用来指定eslint解析器的，解析器必须符合规则，babel-eslint解析器是对babel解析器的包装使其与ESLint解析 parser: 'babel-eslint', //此项是用来指定javaScript语言类型和风格，sourceType用来指定js导入的方式，默认是script，此处设置为module，指某块导入方式 parserOptions: &#123; // 设置 script(默认) 或 module，如果代码是在ECMASCRIPT中的模块 sourceType: 'module', \"ecmaVersion\": 6, \"ecmaFeatures\": &#123; \"jsx\": true &#125; &#125;, // 此项指定环境的全局变量，下面的配置指定为浏览器环境 env: &#123; \"browser\": true, \"node\": true, \"commonjs\": true, \"es6\": true, \"amd\": true &#125;, // https://github.com/standard/standard/blob/master/docs/RULES-en.md // 此项是用来配置标准的js风格，就是说写代码的时候要规范的写，如果你使用vs-code我觉得应该可以避免出错 extends: 'vue', // 此项是用来提供插件的，插件名称省略了eslint-plugin-，下面这个配置是用来规范html的 plugins: [ 'html', \"flow-vars\", \"react\" ], /* 下面这些rules是用来设置从插件来的规范代码的规则，使用必须去掉前缀eslint-plugin- 主要有如下的设置规则，可以设置字符串也可以设置数字，两者效果一致 \"off\" -&gt; 0 关闭规则 \"warn\" -&gt; 1 开启警告规则 \"error\" -&gt; 2 开启错误规则 */ rules: &#123; // 不需要 \"space-before-function-paren\": 0, // 函数定义时括号前面要不要有空格 \"eol-last\": 0, // 文件以单一的换行符结束 \"no-extra-semi\": 0, // 可以多余的冒号 \"semi\": 0, // 语句可以不需要分号结尾 \"eqeqeq\": 0, // 必须使用全等 \"one-var\": 0, // 连续声明 \"no-undef\": 0, // 可以 有未定义的变量 // 警告 \"no-extra-boolean-cast\": 1, // 不必要的bool转换 \"no-extra-parens\": 1, // 非必要的括号 \"no-empty\": 1, // 块语句中的内容不能为空 \"no-use-before-define\": [1, \"nofunc\"], // 未定义前不能使用 \"complexity\": [1, 10], // 循环复杂度 \"no-unused-vars\": 1, // 不能有声明后未被使用的变量或参数 // vue \"flow-vars/define-flow-type\": 1, \"flow-vars/use-flow-type\": 1, // react \"react/jsx-uses-react\": 2, \"react/jsx-uses-vars\": 2, // 错误 \"comma-dangle\": [2, \"never\"], // 对象字面量项尾不能有逗号 \"no-debugger\": 2, // 禁止使用debugger \"no-constant-condition\": 2, // 禁止在条件中使用常量表达式 if(true) if(1) \"no-dupe-args\": 2, // 函数参数不能重复 \"no-dupe-keys\": 2, // 在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125; \"no-duplicate-case\": 2, // switch中的case标签不能重复 \"no-empty-character-class\": 2, // 正则表达式中的[]内容不能为空 \"no-invalid-regexp\": 2, // 禁止无效的正则表达式 \"no-func-assign\": 2, // 禁止重复的函数声明 \"valid-typeof\": 2, // 必须使用合法的typeof的值 \"no-unreachable\": 2, // 不能有无法执行的代码 \"no-unexpected-multiline\": 2, // 避免多行表达式 \"no-sparse-arrays\": 2, // 禁止稀疏数组， [1,,2] \"no-shadow-restricted-names\": 2, // 严格模式中规定的限制标识符不能作为声明时的变量名使用 \"no-cond-assign\": 2, // 禁止在条件表达式中使用赋值语句 \"no-native-reassign\": 2, // 不能重写native对象 // 代码风格 \"no-else-return\": 1, // 如果if语句里面有return,后面不能跟else语句 \"no-multi-spaces\": 1, // 不能用多余的空格 \"key-spacing\": [1, &#123; // 对象字面量中冒号的前后空格 \"beforeColon\": false, \"afterColon\": true &#125;], \"block-scoped-var\": 2, // 块语句中使用var \"consistent-return\": 2, // return 后面是否允许省略 \"accessor-pairs\": 2, // 在对象中使用getter/setter \"dot-location\": [2, \"property\"], // 对象访问符的位置，换行的时候在行首还是行尾 \"no-lone-blocks\": 2, // 禁止不必要的嵌套块 \"no-labels\": 2, // 禁止标签声明 \"no-extend-native\": 2, // 禁止扩展native对象 \"no-floating-decimal\": 2, // 禁止省略浮点数中的0 .5 3. \"no-loop-func\": 2, // 禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以） \"no-new-func\": 2, // 禁止使用new Function \"no-self-compare\": 2, // 不能比较自身 \"no-sequences\": 2, // 禁止使用逗号运算符 \"no-throw-literal\": 2, // 禁止抛出字面量错误 throw \"error\"; \"no-return-assign\": [2, \"always\"], // return 语句中不能有赋值表达式 \"no-redeclare\": [2, &#123; // 禁止重复声明变量 \"builtinGlobals\": true &#125;], \"no-unused-expressions\": [2, &#123; // 禁止无用的表达式 \"allowShortCircuit\": true, \"allowTernary\": true &#125;], \"no-useless-call\": 2, // 禁止不必要的call和apply \"no-useless-concat\": 2, \"no-void\": 2, // 禁用void操作符 \"no-with\": 2, // 禁用with \"space-infix-ops\": 2, // 中缀操作符周围要不要有空格 \"valid-jsdoc\": [2, &#123; // jsdoc规则 \"requireParamDescription\": true, \"requireReturnDescription\": true &#125;], \"no-warning-comments\": [2, &#123; // 不能有警告备注 \"terms\": [\"todo\", \"fixme\", \"any other term\"], \"location\": \"anywhere\" &#125;], \"curly\": 1, // 必须使用 if()&#123;&#125; 中的&#123;&#125; // common js \"no-duplicate-imports\": 1 &#125;&#125; 常用规则规则的细节请到ESLint官方网站查看官网123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141'rules': &#123; \"comma-dangle\": [\"error\", \"never\"], //是否允许对象中出现结尾逗号 \"no-cond-assign\": 2, //条件语句的条件中不允许出现赋值运算符 \"no-console\": 2, //不允许出现console语句 \"no-constant-condition\": 2, //条件语句的条件中不允许出现恒定不变的量 \"no-control-regex\": 2, //正则表达式中不允许出现控制字符 \"no-debugger\": 2, //不允许出现debugger语句 \"no-dupe-args\": 2, //函数定义的时候不允许出现重复的参数 \"no-dupe-keys\": 2, //对象中不允许出现重复的键 \"no-duplicate-case\": 2, //switch语句中不允许出现重复的case标签 \"no-empty\": 2, //不允许出现空的代码块 \"no-empty-character-class\": 2, //正则表达式中不允许出现空的字符组 \"no-ex-assign\": 2, //在try catch语句中不允许重新分配异常变量 \"no-extra-boolean-cast\": 2, //不允许出现不必要的布尔值转换 \"no-extra-parens\": 0, //不允许出现不必要的圆括号 \"no-extra-semi\": 2, //不允许出现不必要的分号 \"no-func-assign\": 2, //不允许重新分配函数声明 \"no-inner-declarations\": [\"error\", \"functions\"], //不允许在嵌套代码块里声明函数 \"no-invalid-regexp\": 2, //不允许在RegExp构造函数里出现无效的正则表达式 \"no-irregular-whitespace\": 2, //不允许出现不规则的空格 \"no-negated-in-lhs\": 2, //不允许在in表达式语句中对最左边的运算数使用取反操作 \"no-obj-calls\": 2, //不允许把全局对象属性当做函数来调用 \"no-regex-spaces\": 2, //正则表达式中不允许出现多个连续空格 \"quote-props\": 2, //对象中的属性名是否需要用引号引起来 \"no-sparse-arrays\": 2, //数组中不允许出现空位置 \"no-unreachable\": 2, //在return，throw，continue，break语句后不允许出现不可能到达的语句 \"use-isnan\": 2, //要求检查NaN的时候使用isNaN() \"valid-jsdoc\": [\"error\", &#123; \"requireReturn\": false, \"requireParamDescription\": false, \"requireReturnDescription\": true &#125;], //强制JSDoc注释 \"valid-typeof\": [\"error\", &#123; \"requireStringLiterals\": true &#125;], //在使用typeof表达式比较的时候强制使用有效的字符串 \"block-scoped-var\": 2, //将变量声明放在合适的代码块里 \"complexity\": 0, //限制条件语句的复杂度 \"consistent-return\": 2, //无论有没有返回值都强制要求return语句返回一个值 \"curly\": [\"error\", \"all\"], //强制使用花括号的风格 \"default-case\": 0, //在switch语句中需要有default语句 \"dot-notation\": [\"error\", &#123;\"allowKeywords\": false, \"allowPattern\": \"\"&#125;], //获取对象属性的时候使用点号 \"eqeqeq\": [\"error\", \"smart\"], //比较的时候使用严格等于 \"no-alert\": 1, //不允许使用alert，confirm，prompt语句 \"no-caller\": 2, //不允许使用arguments.callee和arguments.caller属性 \"guard-for-in\": 0, //监视for in循环，防止出现不可预料的情况 \"no-div-regex\": 2, //不能使用看起来像除法的正则表达式 \"no-else-return\": 0, //如果if语句有return，else里的return不用放在else里 \"no-labels\": [\"error\", &#123; \"allowLoop\": false, \"allowSwitch\": false &#125;], //不允许标签语句 \"no-eq-null\": 2, //不允许对null用==或者!= \"no-eval\": 2, //不允许使用eval() \"no-extend-native\": 2, //不允许扩展原生对象 \"no-extra-bind\": 2, //不允许不必要的函数绑定 \"no-fallthrough\": 2, //不允许switch按顺序全部执行所有case \"no-floating-decimal\": 2, //不允许浮点数缺失数字 \"no-implied-eval\": 2, //不允许使用隐式eval() \"no-iterator\": 2, //不允许使用__iterator__属性 \"no-lone-blocks\": 2, //不允许不必要的嵌套代码块 \"no-loop-func\": 2, //不允许在循环语句中进行函数声明 \"no-multi-spaces\": 2, //不允许出现多余的空格 \"no-multi-str\": 2, //不允许用\\来让字符串换行 \"no-global-assign\": 2, //不允许重新分配原生对象 \"no-new\": 2, //不允许new一个实例后不赋值或者不比较 \"no-new-func\": 2, //不允许使用new Function \"no-new-wrappers\": 2, //不允许使用new String，Number和Boolean对象 \"no-octal\": 2, //不允许使用八进制字面值 \"no-octal-escape\": 2, //不允许使用八进制转义序列 \"no-param-reassign\": 0, //不允许重新分配函数参数\"no-proto\": 2, //不允许使用__proto__属性 \"no-redeclare\": 2, //不允许变量重复声明 \"no-return-assign\": 2, //不允许在return语句中使用分配语句 \"no-script-url\": 2, //不允许使用javascript:void(0) \"no-self-compare\": 2, //不允许自己和自己比较 \"no-sequences\": 2, //不允许使用逗号表达式 \"no-throw-literal\": 2, //不允许抛出字面量错误 throw \"error\" \"no-unused-expressions\": 2, //不允许无用的表达式 \"no-void\": 2, //不允许void操作符 \"no-warning-comments\": [1, &#123;\"terms\": [\"todo\", \"fixme\", \"any other term\"]&#125;], //不允许警告备注 \"no-with\": 2, //不允许使用with语句 \"radix\": 1, //使用parseInt时强制使用基数来指定是十进制还是其他进制 \"vars-on-top\": 0, //var必须放在作用域顶部 \"wrap-iife\": [2, \"any\"], //立即执行表达式的括号风格 \"yoda\": [2, \"never\", &#123;\"exceptRange\": true&#125;], //不允许在if条件中使用yoda条件 \"strict\": [2, \"function\"], //使用严格模式 \"no-catch-shadow\": 2, //不允许try catch语句接受的err变量与外部变量重名\"no-delete-var\": 2, //不允许使用delete操作符 \"no-label-var\": 2, //不允许标签和变量同名 \"no-shadow\": 2, //外部作用域中的变量不能与它所包含的作用域中的变量或参数同名 \"no-shadow-restricted-names\": 2, //js关键字和保留字不能作为函数名或者变量名 \"no-undef\": 2, //不允许未声明的变量 \"no-undef-init\": 2, //不允许初始化变量时给变量赋值undefined \"no-undefined\": 2, //不允许把undefined当做标识符使用 \"no-unused-vars\": [2, &#123;\"vars\": \"all\", \"args\": \"after-used\"&#125;], //不允许有声明后未使用的变量或者参数 \"no-use-before-define\": [2, \"nofunc\"], //不允许在未定义之前就使用变量\"indent\": 2, //强制一致的缩进风格 \"brace-style\": [2, \"1tbs\", &#123; \"allowSingleLine\": false&#125;], //大括号风格 \"camelcase\": [2, &#123;\"properties\": \"never\"&#125;], //强制驼峰命名规则 \"comma-style\": [2, \"last\"], //逗号风格 \"consistent-this\": [0, \"self\"], //当获取当前环境的this是用一样的风格 \"eol-last\": 2, //文件以换行符结束 \"func-names\": 0, //函数表达式必须有名字 \"func-style\": 0, //函数风格，规定只能使用函数声明或者函数表达式 \"key-spacing\": [2, &#123;\"beforeColon\": false, \"afterColon\": true&#125;], //对象字面量中冒号的前后空格 \"max-nested-callbacks\": 0, //回调嵌套深度 \"new-cap\": [2, &#123;\"newIsCap\": true, \"capIsNew\": false&#125;], //构造函数名字首字母要大写 \"new-parens\": 2, //new时构造函数必须有小括号 \"newline-after-var\": 0, //变量声明后必须空一行 \"no-array-constructor\": 2, //不允许使用数组构造器 \"no-inline-comments\": 0, //不允许行内注释 \"no-lonely-if\": 0, //不允许else语句内只有if语句 \"no-mixed-spaces-and-tabs\": [2, \"smart-tabs\"], //不允许混用tab和空格 \"no-multiple-empty-lines\": [2, &#123;\"max\": 2&#125;], //空行最多不能超过两行 \"no-nested-ternary\": 2, //不允许使用嵌套的三目运算符 \"no-new-object\": 2, //禁止使用new Object() \"fun-call-spacing\": 2, //函数调用时，函数名与()之间不能有空格 \"no-ternary\": 0, //不允许使用三目运算符 \"no-trailing-spaces\": 2, //一行最后不允许有空格 \"no-underscore-dangle\": 2, //不允许标识符以下划线开头 \"no-extra-parens\": 0, //不允许出现多余的括号 \"one-var\": 0, //强制变量声明放在一起 \"operator-assignment\": 0, //赋值运算符的风格 \"padded-blocks\": [2, \"never\"], //块内行首行尾是否空行 \"quote-props\": 0, //对象字面量中属性名加引号 \"quotes\": [1, \"single\", \"avoid-escape\"], //引号风格 \"semi\": [2, \"always\"], //强制语句分号结尾 \"semi-spacing\": [2, &#123;\"before\": false, \"after\": true&#125;], //分后前后空格 \"sort-vars\": 0, //变量声明时排序 \"space-before-blocks\": [2, \"always\"], //块前的空格 \"space-before-function-paren\": [2, &#123;\"anonymous\": \"always\", \"named\": \"never\"&#125;], //函数定义时括号前的空格 \"space-infix-ops\": [2, &#123;\"int32Hint\": true&#125;], //操作符周围的空格 \"keyword-spacing\": 2, //关键字前后的空格 \"space-unary-ops\": [2, &#123; \"words\": true, \"nonwords\": false&#125;], //一元运算符前后不要加空格 \"wrap-regex\": 2, //正则表达式字面量用括号括起来 \"no-var\": 0, //使用let和const代替var \"generator-star-spacing\": [2, \"both\"], //生成器函数前后空格 \"max-depth\": 0, //嵌套块深度 \"max-len\": 0, //一行最大长度，单位为字符 \"max-params\": 0, //函数最多能有多少个参数 \"max-statements\": 0, //函数内最多有几个声明 \"no-bitwise\": 0, //不允许使用位运算符 \"no-plusplus\": 0 //不允许使用++ --运算符 &#125; FaceBook Reactfacebook/react","categories":[],"tags":[{"name":"EsLint","slug":"EsLint","permalink":"https://github.com/chengheai/tags/EsLint/"}]},{"title":"vue点击收起部分隐藏","slug":"点击收起部分隐藏","date":"2018-11-06T12:51:46.000Z","updated":"2021-10-09T08:48:32.094Z","comments":true,"path":"2018/11/06/点击收起部分隐藏/","link":"","permalink":"https://github.com/chengheai/2018/11/06/点击收起部分隐藏/","excerpt":"","text":"[demo](https://chengheai.github.io/Element-UI/docs/) 效果 代码12345678&lt;div&gt; &lt;div v-for=\"item in showdetailList\" :key='item.message'&gt; &lt;h3&gt;&#123;&#123;item.message&#125;&#125;&lt;/h3&gt; &lt;/div&gt;&lt;/div&gt;&lt;el-button type=\"success\" v-if=\"items.length &gt; 2\" v-on:click=\"changeFoldState\"&gt; &lt;span&gt;&#123;&#123;brandFold?'展开':'收起'&#125;&#125;&lt;/span&gt;&lt;/el-button&gt; 1234567891011121314151617181920212223242526272829303132333435363738data()&#123; return &#123; brandFold: true, items: [&#123; message: \"Foo\" &#125;, &#123; message: \"Bar\" &#125;, &#123; message: \"alex\" &#125;] &#125;&#125;,computed: &#123; showetailList: &#123; get: function () &#123; if (this.brandFold) &#123; if (this.items.length &lt; 3) &#123; return this.items &#125; let newArr = [] for (var i = 0; i &lt; 2; i++) &#123; let item = this.items[i] newArr.push(item) &#125; return newArr &#125; return this.items &#125;, set: function (val) &#123; this.showdetailList = val &#125; &#125;&#125;,methods: &#123; changeFoldState() &#123; this.brandFold = !this.brandFold &#125;&#125;","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://github.com/chengheai/tags/Vue/"}]},{"title":"MongoDB导入与导出","slug":"MongoDB导入与导出","date":"2018-10-24T07:50:48.000Z","updated":"2021-10-09T08:48:32.059Z","comments":true,"path":"2018/10/24/MongoDB导入与导出/","link":"","permalink":"https://github.com/chengheai/2018/10/24/MongoDB导入与导出/","excerpt":"","text":"导出概念mongoDB 中的 mongoexport 工具可以把一个 collection 导出成 JSON 格式或 CSV 格式的文件。可以通过参数指定导出的数据项，也可以根据指定的条件导出数据。 语法1234567mongoexport -d dbname -c collectionname -o file --type json/csv -f field 参数说明： -d ：数据库名 -c ：collection名 -o ：输出的路径和文件名 --type ： 输出的格式，默认为json -f ：输出的字段，如果-type为csv，则需要加上-f \"字段名\" 例子123➜ mongodb-vue git:(master) ✗ mongoexport -d lolTest -c myhero -o /Users/chengheai/Desktop/a.json --type json2018-10-24T15:41:56.489+0800 connected to: localhost2018-10-24T15:41:56.496+0800 exported 12 records 导入语法12345678 mongoimport -d dbname -c collectionname --file filename --headerline --type json/csv -f field 参数说明： -d ：数据库名 -c ：collection名 --type ：导入的格式默认json -f ：导入的字段名 --headerline ：如果导入的格式是csv，则可以使用第一行的标题作为导入的字段 --file ：要导入的文件 例子123➜ mongodb-vue git:(master) ✗ mongoimport -d mgDbs -c myhero --file /Users/chengheai/Desktop/a.json --type json2018-10-24T15:47:09.209+0800 connected to: localhost2018-10-24T15:47:09.273+0800 imported 12 documents 备份12345678mongodump -h host -d dbname -o directorymongodump -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -o 文件存在路径Eg： # mongodump -d test -o /data/参数说明：如果想导出所有数据库，可以去掉-d-h：MongDB所在服务器地址，如：127.0.0.1，也可以指定端口号：127.0.0.1:27017-d：需要备份的数据库名称，如：db_test-o：备份的数据存放位置，如：~\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个db_test目录，这个目录里面存放该数据库实例的备份数据。 恢复概念mongorestore是Mongodb从备份中恢复数据的工具，它主要用来获取mongodump的输出结果，并将备份的数据插入到运行的Mongodb中。123456mongorestore -h host -d dbname --directoryperdb dbdirectoryEg: # mongorestore --host=10.0.0.25 --port=27017 --db ztjy --dir=ztjy/参数说明：-h：MongoDB所在服务器地址-d：需要恢复的数据库名称，如：db_test，当然这个名称可以不同于备份的时候，比如new_db--directoryperdb：备份数据文件所在位置，如：~\\dump\\db_test（这里之所以要加db_test子目录，从mongoretore的help中的--directoryperdb，可以读出“每一个db在一个单独的目录”。）","categories":[],"tags":[{"name":"mongoDB","slug":"mongoDB","permalink":"https://github.com/chengheai/tags/mongoDB/"}]},{"title":"css划圆形进度条的demo","slug":"css划圆形进度条的demo","date":"2018-10-19T03:12:06.000Z","updated":"2021-10-09T08:48:32.062Z","comments":true,"path":"2018/10/19/css划圆形进度条的demo/","link":"","permalink":"https://github.com/chengheai/2018/10/19/css划圆形进度条的demo/","excerpt":"","text":"效果 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110 &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .circle_process&#123; position: relative; width: 199px; height : 200px;&#125;.circle_process .wrapper&#123; width: 100px; height: 200px; position: absolute; top:0; overflow: hidden;&#125;.circle_process .right&#123; right:0;&#125;.circle_process .left&#123; left:0;&#125;.circle_process .circle&#123; width: 160px; height: 160px; border:20px solid transparent; border-radius: 50%; position: absolute; top:0; transform : rotate(-135deg);&#125;.circle_process .rightcircle&#123; border-top:20px solid green; border-right:20px solid green; right:0; /* -webkit-animation: circle_right 5s linear infinite; */&#125;.circle_process .leftcircle&#123; border-bottom:20px solid green; border-left:20px solid green; left:0; /* -webkit-animation: circle_left 5s linear infinite; */&#125;/* @-webkit-keyframes circle_right&#123; 0%&#123; -webkit-transform: rotate(-135deg); &#125; 50%,100%&#123; -webkit-transform: rotate(45deg); &#125;&#125;@-webkit-keyframes circle_left&#123; 0%,50%&#123; -webkit-transform: rotate(-135deg); &#125; 100%&#123; -webkit-transform: rotate(45deg); &#125;&#125; */#show&#123; font-size: 60px; font-weight: 600; position: absolute; top: 50%; left: 50%; transform: translateX(-50%) translateY(-50%);&#125;&lt;/style&gt;&lt;/head&gt; &lt;body&gt; &lt;div class=\"circle_process\"&gt; &lt;div class=\"wrapper right\"&gt; &lt;div class=\"circle rightcircle\" id=\"rightcircle\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=\"show\"&gt;&lt;/div&gt; &lt;div class=\"wrapper left\"&gt; &lt;div class=\"circle leftcircle\" id=\"leftcircle\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; function getTime()&#123; var date = new Date(); var second = date.getSeconds(); var rightcircle = document.getElementById('rightcircle'); var leftcircle = document.getElementById('leftcircle'); var show = document.getElementById('show'); show.innerHTML = second; if(second&lt;=30)&#123; rightcircle.style.cssText = \"transform: rotate(\"+ (-135+6*second) +\"deg)\"; leftcircle.style.cssText = \"transform: rotate(-135deg)\"; &#125;else&#123; rightcircle.style.cssText = \"transform: rotate(45deg)\"; leftcircle.style.cssText = \"transform: rotate(\"+ (-135+6*(second-30)) +\"deg)\"; &#125;&#125;getTime();setInterval(function()&#123; getTime();&#125;, 1000) &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://github.com/chengheai/tags/css/"}]},{"title":"VSCode快捷键Mac","slug":"VSCode快捷键Mac","date":"2018-10-18T05:45:04.000Z","updated":"2021-10-09T08:48:32.060Z","comments":true,"path":"2018/10/18/VSCode快捷键Mac/","link":"","permalink":"https://github.com/chengheai/2018/10/18/VSCode快捷键Mac/","excerpt":"","text":"全局Command + Shift + P / F1 显示命令面板Command + P 快速打开Command + Shift + N 打开新窗口Command + W 关闭窗口 基本Command + X 剪切（未选中文本的情况下，剪切光标所在行）Command + C 复制（未选中文本的情况下，复制光标所在行）Option + Up 向上移动行Option + Down 向下移动行Option + Shift + Up 向上复制行Option + Shift + Down 向下复制行Command + Shift + K 删除行Command + Enter 下一行插入Command + Shift + Enter 上一行插入Command + Shift + \\ 跳转到匹配的括号Command + [ 减少缩进Command + ] 增加缩进Home 跳转至行首End 跳转到行尾Command + Up 跳转至文件开头Command + Down 跳转至文件结尾Ctrl + PgUp 按行向上滚动Ctrl + PgDown 按行向下滚动Command + PgUp 按屏向上滚动Command + PgDown 按屏向下滚动Command + Shift + [ 折叠代码块Command + Shift + ] 展开代码块Command + K Command + [ 折叠全部子代码块Command + K Command + ] 展开全部子代码块Command + K Command + 0 折叠全部代码块Command + K Command + J 展开全部代码块Command + K Command + C 添加行注释Command + K Command + U 移除行注释Command + / 添加、移除行注释Option + Shift + A 添加、移除块注释Option + Z 自动换行、取消自动换行 多光标与选择Option + 点击 插入多个光标Command + Option + Up 向上插入光标Command + Option + Down 向下插入光标Command + U 撤销上一个光标操作Option + Shift + I 在所选行的行尾插入光标Command + I 选中当前行Command + Shift + L 选中所有与当前选中内容相同部分Command + F2 选中所有与当前选中单词相同的单词Command + Ctrl + Shift + Left 折叠选中Command + Ctrl + Shift + Right 展开选中Alt + Shift + 拖动鼠标 选中代码块Command + Shift + Option + Up 列选择 向上Command + Shift + Option + Down 列选择 向下Command + Shift + Option + Left 列选择 向左Command + Shift + Option + Right 列选择 向右Command + Shift + Option + PgUp 列选择 向上翻页Command + Shift + Option + PgDown 列选择 向下翻页 查找替换Command + F 查找Command + Option + F 替换Command + G 查找下一个Command + Shift + G 查找上一个Option + Enter 选中所有匹配项Command + D 向下选中相同内容Command + K Command + D 移除前一个向下选中相同内容 进阶Ctrl + Space 打开建议Command + Shift + Space 参数提示Tab Emmet插件缩写补全Option + Shift + F 格式化Command + K Command + F 格式化选中内容F12 跳转到声明位置Option + F12 查看具体声明内容Command + K F12 分屏查看具体声明内容Command + . 快速修复Shift + F12 显示引用F2 重命名符号Command + Shift + . 替换为上一个值Command + Shift + , 替换为下一个值Command + K Command + X 删除行尾多余空格Command + K M 更改文件语言 编辑Command + W 关闭编辑器Command + K F 关闭文件夹Command + \\ 编辑器分屏Command + 1 切换到第一分组Command + 2 切换到第二分组Command + 3 切换到第三分组Command + K Command + Left 切换到上一分组Command + K Command + Right 切换到下一分组Command + K Command + Shift + Left 左移编辑器Command + K Command + Shift + Right 右移编辑器Command + K Left 激活左侧编辑组Command + K Right 激活右侧编辑组 文件Command + N 新建文件Command + O 打开文件Command + S 保存文件Command + Shift + S 另存为Command + Option + S 全部保存Command + W 关闭Command + K Command + W 全部关闭Command + Shift + T 重新打开被关闭的编辑器Command + K Enter 保持打开Ctrl + Tab 打开下一个Ctrl + Shift + Tab 打开上一个Command + K P 复制当前文件路径Command + K R 在资源管理器中查看当前文件Command + K O 新窗口打开当前文件 显示Command + Ctrl + F 全屏、退出全屏Command + Option + 1 切换编辑器分屏方式（横、竖）Command + + 放大Command + - 缩小Command + B 显示、隐藏侧边栏Command + Shift + E 显示资源管理器 或 切换焦点Command + Shift + F 显示搜索框Ctrl + Shift + G 显示Git面板Command + Shift + D 显示调试面板Command + Shift + X 显示插件面板Command + Shift + H 全局搜索替换Command + Shift + J 显示、隐藏高级搜索Command + Shift + C 打开新终端Command + Shift + U 显示输出面板Command + Shift + V Markdown预览窗口Command + K V 分屏显示 Markdown预览窗口 集成终端Ctrl + 显示终端 Ctrl + Shift + 新建终端Command + Up 向上滚动Command + Down 向下滚动PgUp 向上翻页PgDown 向下翻页Command + Home 滚动到顶部Command + End 滚动到底部","categories":[],"tags":[{"name":"vscode","slug":"vscode","permalink":"https://github.com/chengheai/tags/vscode/"}]},{"title":"Mac终端命令大全","slug":"Mac终端命令大全","date":"2018-10-18T05:18:18.000Z","updated":"2021-10-09T08:48:32.058Z","comments":true,"path":"2018/10/18/Mac终端命令大全/","link":"","permalink":"https://github.com/chengheai/2018/10/18/Mac终端命令大全/","excerpt":"","text":"目录操作 命令名 功能描述 使用举例 mkdir 创建一个目录 mkdir dirname rmdir 删除一个目录 rmdir dirname mvdir 移动或重命名一个目录 mvdir dir1 dir2 cd 改变当前目录 cd dirname pwd 显示当前目录的路径名 pwd ls 显示当前目录的内容 ls -la dircmp 比较两个目录的内容 dircmp dir1 dir2 文件操作 命令名 功能描述 使用举例 cat 显示或连接文件 cat filename pg 分页格式化显示文件内容 pg filename more 分屏显示文件内容 more filename od 显示非文本文件的内容 od -c filename cp 复制文件或目录 cp file1 file2 rm 删除文件或目录 rm filename mv 改变文件名或所在目录 mv file1 file2 ln 联接文件 ln -s file1 file2 find 使用匹配表达式查找文件 find . -name “*.c” -print file 显示文件类型 file filename open 使用默认的程序打开文件 open filename 选择操作 命令名 功能描述 使用举例 head 显示文件的最初几行 head -20 filename tail 显示文件的最后几行 tail -15 filename cut 显示文件每行中的某些域 cut -f1,7 -d: /etc/passwd colrm 从标准输入中删除若干列 colrm 8 20 file2 paste 横向连接文件 paste file1 file2 diff 比较并显示两个文件的差异 diff file1 file2 sed 非交互方式流编辑器 sed “s/red/green/g” filename grep 在文件中按模式查找 grep “^[a-zA-Z]” filename awk 在文件中查找并处理模式 awk ‘{print $1 $1}’ filename sort 排序或归并文件 sort -d -f -u file1 uniq 去掉文件中的重复行 uniq file1 file2 comm 显示两有序文件的公共和非公共行 comm file1 file2 wc 统计文件的字符数、词数和行数 wc filename nl 给文件加上行号 nl file1 &gt;file2 安全操作 命令名 功能描述 使用举例 passwd 修改用户密码 passwd chmod 改变文件或目录的权限 chmod ug+x filename umask 定义创建文件的权限掩码 umask 027 chown 改变文件或目录的属主 chown newowner filename chgrp 改变文件或目录的所属组 chgrp staff filename xlock 给终端上锁 xlock -remote 编程操作 命令名 功能描述 使用举例 make 维护可执行程序的最新版本 make touch 更新文件的访问和修改时间 touch -m 05202400 filename dbx 命令行界面调试工具 dbx a.out xde 图形用户界面调试工具 xde a.out 进程操作 命令名 功能描述 使用举例 ps 显示进程当前状态 ps u kill 终止进程 kill -9 30142 nice 改变待执行命令的优先级 nice cc -c *.c renice 改变已运行进程的优先级 renice +20 32768 时间操作 命令名 功能描述 使用举例 date 显示系统的当前日期和时间 date cal 显示日历 cal 8 1996 time 统计程序的执行时间 time a.out 网络与通信操作 命令名 功能描述 使用举例 telnet 远程登录 telnet hpc.sp.net.edu.cn rlogin 远程登录 rlogin hostname -l username rsh 在远程主机执行指定命令 rsh f01n03 date ftp 在本地主机与远程主机之间传输文件 ftp ftp.sp.net.edu.cn rcp 在本地主机与远程主机 之间复制文件 rcp file1 host1:file2 ping 给一个网络主机发送 回应请求 ping hpc.sp.net.edu.cn mail 阅读和发送电子邮件 mail write 给另一用户发送报文 write username pts/1 mesg 允许或拒绝接收报文 mesg n shell 命令 命令名 功能描述 使用举例 history 列出最近执行过的 几条命令及编号 history r 重复执行最近执行过的 某条命令 r -2 alias 给某个命令定义别名 alias del=rm -i unalias 取消对某个别名的定义 unalias del 其它命令 命令名 功能描述 使用举例 uname 显示操作系统的有关信息 uname -a clear 清除屏幕或窗口内容 clear env 显示当前所有设置过的环境变量 env who 列出当前登录的所有用户 who whoami 显示当前正进行操作的用户名 whoami tty 显示终端或伪终端的名称 tty stty 显示或重置控制键定义 stty -a du 查询磁盘使用情况 du -k subdir df 显示文件系统的总空间和可用空间 df /tmp w 显示当前系统活动的总信息 w","categories":[],"tags":[{"name":"mac","slug":"mac","permalink":"https://github.com/chengheai/tags/mac/"}]},{"title":"怎么在npm官网上传自己的包","slug":"怎么在npm官网上传自己的包","date":"2018-10-14T15:26:35.000Z","updated":"2021-10-09T08:48:32.091Z","comments":true,"path":"2018/10/14/怎么在npm官网上传自己的包/","link":"","permalink":"https://github.com/chengheai/2018/10/14/怎么在npm官网上传自己的包/","excerpt":"","text":"注意：因为courage package已经发布到npm了，而npm包不存在重名的，你需要改个别的名字。 demo：[git](https://github.com/chengheai/npm-publish) 第一步:在项目的根目录下创建一个名字为node_modules的目录，此目录用来放置所有的node模块 第二步:在node_modules目录下名字courage目录; 第三步:courage目录下新建两个文件： index.js 1234567891011121314151617'use strict'var now = new Date(), hour = now.getHours(), greetingif (hour &lt; 6) &#123;greeting = '凌晨好！';&#125;else if (hour &lt; 9) &#123;greeting = '早上好！';&#125;else if (hour &lt; 12) &#123;greeting = '上午好！';&#125;else if (hour &lt; 14) &#123;greeting = '中午好！';&#125;else if (hour &lt; 17) &#123;greeting = '下午好！';&#125;else if (hour &lt; 19) &#123;greeting = '傍晚好！';&#125;else if (hour &lt; 22) &#123;greeting = '晚上好！';&#125;else &#123;greeting = '夜深了，早点休息！';&#125;function greetings () &#123; console.log(greeting)&#125;module.exports = greetings package.json 123456789&#123; &quot;name&quot;: &quot;courage&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;keywords&quot;: [], &quot;author&quot;: &quot;https://github.com/chengheai&quot;, &quot;license&quot;: &quot;ISC&quot;&#125; 发布courage包到npm 首先要注册一个npm账号(如果没有的话) 注册完后，在命令窗口运行npm adduser(登陆npm),会提示你输入用户名和密码； 登陆成功后，在courage目录下执行命令npm publish(发布package) 发布成功后就可以登陆到npm官网去看自己发布的package。 使用1.先新建一个空的目录npm-test;然后在命令行中切换到npm-test目录;2.然后执行npm install courage命令;3.执行成功后在npm-test目录下看到多了一个node_modules的目录，在node_modules目录中就可以看到我们刚才发布的courage package;4.然后再npm-test目录下新建一个greeting.js来测试一下greetings()方法，greeting.js中的内容如下：12const greeting = require('courage');greeting() 如何更新courage版本发布到npm的package？ 进入到courage目录, 对index.js做一些修改(做为要更新的内容) 然后再命令行执行npm version patch, 此命令会把package.json的version更新到0.02 然后执行npm publish就可以更新到npm了","categories":[{"name":"nodejs后端开发","slug":"nodejs后端开发","permalink":"https://github.com/chengheai/categories/nodejs后端开发/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"https://github.com/chengheai/tags/nodejs/"},{"name":"npm","slug":"npm","permalink":"https://github.com/chengheai/tags/npm/"}]},{"title":"git撤销已经push到远端的commit","slug":"git撤销已经push到远端的commit","date":"2018-10-12T07:39:15.000Z","updated":"2021-10-09T08:48:32.068Z","comments":true,"path":"2018/10/12/git撤销已经push到远端的commit/","link":"","permalink":"https://github.com/chengheai/2018/10/12/git撤销已经push到远端的commit/","excerpt":"","text":"在使用git时，不小心把多余的文件commit了，而且还push到远程了，怎么回退到提交之前的\b版本呢？\b先在本地回退到相应的版本：版本号就是你的commitID123git reset --hard &lt;版本号&gt;// 注意使用 --hard 参数会抛弃当前工作区的修改// 使用 --soft 参数的话会回退到之前的版本，但是保留当前工作区的修改，可以重新提交 如果\b此时使用\bpush命令,会提示本地的版本落后于远端的版本；:1git push origin &lt;分支名&gt; 为了覆盖掉远端的版本信息，使远端的仓库也回退到相应的版本，需要加上参数–force1git push origin &lt;分支名&gt; --force","categories":[{"name":"git使用笔记","slug":"git使用笔记","permalink":"https://github.com/chengheai/categories/git使用笔记/"}],"tags":[{"name":"git","slug":"git","permalink":"https://github.com/chengheai/tags/git/"}]},{"title":"js事件委托","slug":"js事件委托","date":"2018-10-12T06:56:58.000Z","updated":"2021-10-09T08:48:32.071Z","comments":true,"path":"2018/10/12/js事件委托/","link":"","permalink":"https://github.com/chengheai/2018/10/12/js事件委托/","excerpt":"","text":"事件委托利用冒泡的原理，把事件加到父级上，触发执行效果好处提高性能 新添加的元素，還會有之前的事件代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;script&gt; ///提高性能 新添加的元素，還會有之前的事件 // 事件委托：利用冒泡的原理，把事件加到父级上，触发执行效果 window.onload = function()&#123; var oUl = document.querySelector('ul'); var oInput = document.querySelector('input'); var aLi = oUl.querySelectorAll('li'); var now = 4; console.log(aLi) // for(var i=0;i&lt;aLi.length;i++)&#123; // aLi[i].onmouseover = function()&#123; // this.style.background = 'red' // &#125; // aLi[i].onmouseout = function()&#123; // this.style.background = '' // &#125; // &#125; oInput.onclick = function()&#123; now++; var oli = document.createElement('li'); oli.innerHTML = now*111 oUl.appendChild(oli) &#125; oUl.onmouseover = function(ev)&#123; var ev = ev || window.ev; var target = ev.target || ev.srcElement; // alert(target.innerHTML) if(target.nodeName.toLowerCase() == 'li')&#123; target.style.background = 'red'; &#125; &#125; oUl.onmouseout = function(ev)&#123; var ev = ev || window.ev; var target = ev.target || ev.srcElement; // alert(target.innerHTML) target.style.background = ''; &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;input type=\"button\" value=\"添加\"&gt; &lt;ul&gt; &lt;li&gt;111&lt;/li&gt; &lt;li&gt;222&lt;/li&gt; &lt;li&gt;333&lt;/li&gt; &lt;li&gt;444&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"原生js事件委托","slug":"原生js事件委托","permalink":"https://github.com/chengheai/categories/原生js事件委托/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://github.com/chengheai/tags/JavaScript/"},{"name":"HTML","slug":"HTML","permalink":"https://github.com/chengheai/tags/HTML/"},{"name":"事件","slug":"事件","permalink":"https://github.com/chengheai/tags/事件/"}]},{"title":"jd商品hover过光","slug":"jd商品hover过光","date":"2018-10-12T06:27:38.000Z","updated":"2021-10-09T08:48:32.069Z","comments":true,"path":"2018/10/12/jd商品hover过光/","link":"","permalink":"https://github.com/chengheai/2018/10/12/jd商品hover过光/","excerpt":"","text":"效果 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; /*广告图片效果*/ div &#123; position:relative; height:450px; width:330px; left:150px; top:0; overflow:hidden; &#125; div a &#123; display:block; &#125; a:hover::before &#123; left:400px; transition:left 1s ease 0s; &#125; div a::before &#123; content:\"\"; position:absolute; width:80px; height:450px; top:0; left:-150px; overflow:hidden; background:-moz-linear-gradient(left,rgba(255,255,255,0)0,rgba(255,255,255,.2)50%,rgba(255,255,255,0)100%); background:-webkit-gradient(linear,left top,righttop,color-stop(0%,rgba(255,255,255,0)),color-stop(50%,rgba(255,255,255,.2)),color-stop(100%,rgba(255,255,255,0))); background:-webkit-linear-gradient(left,rgba(255,255,255,0)0,rgba(255,255,255,.2)50%,rgba(255,255,255,0)100%); background:-o-linear-gradient(left,rgba(255,255,255,0)0,rgba(255,255,255,.2)50%,rgba(255,255,255,0)100%); -webkit-transform:skewX(-25deg); -moz-transform:skewX(-25deg); -o-transform:skewX(-25deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;a href=\"#\"&gt; &lt;img src=\"http://www.jq22.com/img/cs/500x500b.png\" width=\"330\" height=\"475\"&gt; &lt;/a&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"jd商品hover过光效果","slug":"jd商品hover过光效果","permalink":"https://github.com/chengheai/categories/jd商品hover过光效果/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://github.com/chengheai/tags/HTML/"},{"name":"CSS3","slug":"CSS3","permalink":"https://github.com/chengheai/tags/CSS3/"}]},{"title":"CSDN","slug":"csdn-blog","date":"2018-10-10T09:52:03.000Z","updated":"2021-10-09T08:48:32.061Z","comments":true,"path":"2018/10/10/csdn-blog/","link":"","permalink":"https://github.com/chengheai/2018/10/10/csdn-blog/","excerpt":"","text":"CSDNhttps://blog.csdn.net/chi1130","categories":[{"name":"前任Blog / CSDN","slug":"前任Blog-CSDN","permalink":"https://github.com/chengheai/categories/前任Blog-CSDN/"}],"tags":[{"name":"个人","slug":"个人","permalink":"https://github.com/chengheai/tags/个人/"}]},{"title":"MarkDown","slug":"markdown-first","date":"2018-10-10T08:09:34.000Z","updated":"2021-10-09T08:48:32.073Z","comments":true,"path":"2018/10/10/markdown-first/","link":"","permalink":"https://github.com/chengheai/2018/10/10/markdown-first/","excerpt":"","text":"MarkDown 常用1、标题 格式：# 标题一级标题(# 一级标题)二级标题(## 二级标题)三级标题(### 三级标题)四级标题(#### 四级标题)五级标题(##### 五级标题)六级标题(###### 六级标题)2、列表2.1 有序列表 格式：1.列表项1.列表项1（1.列表项1）2.列表项2（2.列表项2）3.列表项3（3.列表项3） 2.2 无序列表 格式：-列表项、*列表项、+列表项 列表项1（- 列表项1） 列表项2（+ 列表项2） 列表项3（* 列表项3） 3、链接与图片3.1 链接 格式：\\[文本](链接)[百度](http://www.baidu.com) 3.2 图片 格式：\\![文本]\\(图片链接) logo 4、表格语法：第二行中“—-|：–：|—”冒号用于设置表格的对齐方式，左边表示左对齐，右边表示右对齐，放两边表示居中，不放冒号（默认状态）表示表头居中内容居左。 Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 简写模式，省略了两边的“|”。1234dog | bird | cat-----|-----|-----bar | bear | boxbar | bear | box dog bird cat bar bear box bar bear box 5、粗体和斜体我是粗体(**我是粗体**)我是斜体 (*我是斜体*) 6、代码编写123456789101112131415(function (window, document) &#123; var getRem = function () &#123; if (document) &#123; var html = document.documentElement; var hWidth = (html.getBoundingClientRect().width) * (750 / 352); console.log(hWidth) html.style.fontSize = hWidth / 16 + \"px\"; console.log(html.style.fontSize) &#125; &#125;; getRem(); window.onresize = function () &#123; getRem(); &#125;&#125;)(window, document)","categories":[{"name":"MarkDown学习笔记","slug":"MarkDown学习笔记","permalink":"https://github.com/chengheai/categories/MarkDown学习笔记/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://github.com/chengheai/tags/JavaScript/"},{"name":"HTML","slug":"HTML","permalink":"https://github.com/chengheai/tags/HTML/"},{"name":"Nodejs","slug":"Nodejs","permalink":"https://github.com/chengheai/tags/Nodejs/"},{"name":"Angularjs","slug":"Angularjs","permalink":"https://github.com/chengheai/tags/Angularjs/"},{"name":"Angular","slug":"Angular","permalink":"https://github.com/chengheai/tags/Angular/"},{"name":"React","slug":"React","permalink":"https://github.com/chengheai/tags/React/"},{"name":"dva","slug":"dva","permalink":"https://github.com/chengheai/tags/dva/"},{"name":"Java","slug":"Java","permalink":"https://github.com/chengheai/tags/Java/"},{"name":"bash","slug":"bash","permalink":"https://github.com/chengheai/tags/bash/"},{"name":"MongoDB","slug":"MongoDB","permalink":"https://github.com/chengheai/tags/MongoDB/"},{"name":"CSS2","slug":"CSS2","permalink":"https://github.com/chengheai/tags/CSS2/"},{"name":"ES6","slug":"ES6","permalink":"https://github.com/chengheai/tags/ES6/"},{"name":"Git","slug":"Git","permalink":"https://github.com/chengheai/tags/Git/"},{"name":"Mac","slug":"Mac","permalink":"https://github.com/chengheai/tags/Mac/"}]}],"categories":[{"name":"nodejs后端开发","slug":"nodejs后端开发","permalink":"https://github.com/chengheai/categories/nodejs后端开发/"},{"name":"git使用笔记","slug":"git使用笔记","permalink":"https://github.com/chengheai/categories/git使用笔记/"},{"name":"原生js事件委托","slug":"原生js事件委托","permalink":"https://github.com/chengheai/categories/原生js事件委托/"},{"name":"jd商品hover过光效果","slug":"jd商品hover过光效果","permalink":"https://github.com/chengheai/categories/jd商品hover过光效果/"},{"name":"前任Blog / CSDN","slug":"前任Blog-CSDN","permalink":"https://github.com/chengheai/categories/前任Blog-CSDN/"},{"name":"MarkDown学习笔记","slug":"MarkDown学习笔记","permalink":"https://github.com/chengheai/categories/MarkDown学习笔记/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://github.com/chengheai/tags/Javascript/"},{"name":"docker","slug":"docker","permalink":"https://github.com/chengheai/tags/docker/"},{"name":"nginx","slug":"nginx","permalink":"https://github.com/chengheai/tags/nginx/"},{"name":"jenkins","slug":"jenkins","permalink":"https://github.com/chengheai/tags/jenkins/"},{"name":"element-ui","slug":"element-ui","permalink":"https://github.com/chengheai/tags/element-ui/"},{"name":"vue","slug":"vue","permalink":"https://github.com/chengheai/tags/vue/"},{"name":"redux","slug":"redux","permalink":"https://github.com/chengheai/tags/redux/"},{"name":"react","slug":"react","permalink":"https://github.com/chengheai/tags/react/"},{"name":"nodejs","slug":"nodejs","permalink":"https://github.com/chengheai/tags/nodejs/"},{"name":"跨域","slug":"跨域","permalink":"https://github.com/chengheai/tags/跨域/"},{"name":"小程序","slug":"小程序","permalink":"https://github.com/chengheai/tags/小程序/"},{"name":"小技巧","slug":"小技巧","permalink":"https://github.com/chengheai/tags/小技巧/"},{"name":"水印","slug":"水印","permalink":"https://github.com/chengheai/tags/水印/"},{"name":"git","slug":"git","permalink":"https://github.com/chengheai/tags/git/"},{"name":"linux","slug":"linux","permalink":"https://github.com/chengheai/tags/linux/"},{"name":"部署","slug":"部署","permalink":"https://github.com/chengheai/tags/部署/"},{"name":"vscode","slug":"vscode","permalink":"https://github.com/chengheai/tags/vscode/"},{"name":"axios","slug":"axios","permalink":"https://github.com/chengheai/tags/axios/"},{"name":"css","slug":"css","permalink":"https://github.com/chengheai/tags/css/"},{"name":"SSR","slug":"SSR","permalink":"https://github.com/chengheai/tags/SSR/"},{"name":"富文本","slug":"富文本","permalink":"https://github.com/chengheai/tags/富文本/"},{"name":"微信支付","slug":"微信支付","permalink":"https://github.com/chengheai/tags/微信支付/"},{"name":"材料","slug":"材料","permalink":"https://github.com/chengheai/tags/材料/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://github.com/chengheai/tags/JavaScript/"},{"name":"面试题","slug":"面试题","permalink":"https://github.com/chengheai/tags/面试题/"},{"name":"this","slug":"this","permalink":"https://github.com/chengheai/tags/this/"},{"name":"vue-router","slug":"vue-router","permalink":"https://github.com/chengheai/tags/vue-router/"},{"name":"token","slug":"token","permalink":"https://github.com/chengheai/tags/token/"},{"name":"element","slug":"element","permalink":"https://github.com/chengheai/tags/element/"},{"name":"progress","slug":"progress","permalink":"https://github.com/chengheai/tags/progress/"},{"name":"charts","slug":"charts","permalink":"https://github.com/chengheai/tags/charts/"},{"name":"Mint-ui","slug":"Mint-ui","permalink":"https://github.com/chengheai/tags/Mint-ui/"},{"name":"总结","slug":"总结","permalink":"https://github.com/chengheai/tags/总结/"},{"name":"antd","slug":"antd","permalink":"https://github.com/chengheai/tags/antd/"},{"name":"mongodb","slug":"mongodb","permalink":"https://github.com/chengheai/tags/mongodb/"},{"name":"dvajs","slug":"dvajs","permalink":"https://github.com/chengheai/tags/dvajs/"},{"name":"EsLint","slug":"EsLint","permalink":"https://github.com/chengheai/tags/EsLint/"},{"name":"Vue","slug":"Vue","permalink":"https://github.com/chengheai/tags/Vue/"},{"name":"mongoDB","slug":"mongoDB","permalink":"https://github.com/chengheai/tags/mongoDB/"},{"name":"mac","slug":"mac","permalink":"https://github.com/chengheai/tags/mac/"},{"name":"npm","slug":"npm","permalink":"https://github.com/chengheai/tags/npm/"},{"name":"HTML","slug":"HTML","permalink":"https://github.com/chengheai/tags/HTML/"},{"name":"事件","slug":"事件","permalink":"https://github.com/chengheai/tags/事件/"},{"name":"CSS3","slug":"CSS3","permalink":"https://github.com/chengheai/tags/CSS3/"},{"name":"个人","slug":"个人","permalink":"https://github.com/chengheai/tags/个人/"},{"name":"Nodejs","slug":"Nodejs","permalink":"https://github.com/chengheai/tags/Nodejs/"},{"name":"Angularjs","slug":"Angularjs","permalink":"https://github.com/chengheai/tags/Angularjs/"},{"name":"Angular","slug":"Angular","permalink":"https://github.com/chengheai/tags/Angular/"},{"name":"React","slug":"React","permalink":"https://github.com/chengheai/tags/React/"},{"name":"dva","slug":"dva","permalink":"https://github.com/chengheai/tags/dva/"},{"name":"Java","slug":"Java","permalink":"https://github.com/chengheai/tags/Java/"},{"name":"bash","slug":"bash","permalink":"https://github.com/chengheai/tags/bash/"},{"name":"MongoDB","slug":"MongoDB","permalink":"https://github.com/chengheai/tags/MongoDB/"},{"name":"CSS2","slug":"CSS2","permalink":"https://github.com/chengheai/tags/CSS2/"},{"name":"ES6","slug":"ES6","permalink":"https://github.com/chengheai/tags/ES6/"},{"name":"Git","slug":"Git","permalink":"https://github.com/chengheai/tags/Git/"},{"name":"Mac","slug":"Mac","permalink":"https://github.com/chengheai/tags/Mac/"}]}